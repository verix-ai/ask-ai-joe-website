{
  "version": 3,
  "sources": ["../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/ms/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/node_modules/debug/src/common.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/node_modules/debug/src/browser.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/has-flag/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/supports-color/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/node_modules/debug/src/node.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/node_modules/debug/src/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/formidable/lib/file.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/formidable/lib/multipart_parser.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/formidable/lib/querystring_parser.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/formidable/lib/octet_parser.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/formidable/lib/json_parser.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/formidable/lib/incoming_form.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/formidable/lib/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/delayed-stream/lib/delayed_stream.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/combined-stream/lib/combined_stream.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/mime-db/db.json", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/mime-db/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/mime-types/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/lib/defer.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/lib/async.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/lib/abort.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/lib/iterate.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/lib/state.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/lib/terminator.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/parallel.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/serialOrdered.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/serial.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/asynckit/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-object-atoms/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-errors/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-errors/eval.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-errors/range.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-errors/ref.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-errors/syntax.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-errors/type.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-errors/uri.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/abs.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/floor.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/max.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/min.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/pow.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/round.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/isNaN.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/math-intrinsics/sign.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/gopd/gOPD.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/gopd/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-define-property/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/has-symbols/shams.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/has-symbols/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/get-proto/Reflect.getPrototypeOf.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/get-proto/Object.getPrototypeOf.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/function-bind/implementation.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/function-bind/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/call-bind-apply-helpers/functionCall.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/call-bind-apply-helpers/functionApply.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/call-bind-apply-helpers/reflectApply.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/call-bind-apply-helpers/actualApply.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/call-bind-apply-helpers/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/dunder-proto/get.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/get-proto/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/hasown/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/get-intrinsic/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/has-tostringtag/shams.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/es-set-tostringtag/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/form-data/lib/populate.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/safe-buffer/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/form-data/lib/form_data.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/utils.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/response-base.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/response.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/methods/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/unzip.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/extend/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/mime/types.json", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/mime/mime.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/object-inspect/util.inspect.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/object-inspect/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/side-channel-list/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/call-bound/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/side-channel-map/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/side-channel-weakmap/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/side-channel/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/qs/lib/formats.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/qs/lib/utils.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/qs/lib/stringify.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/qs/lib/parse.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/qs/lib/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/package.json", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/is-object.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/request-base.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/cookiejar/cookiejar.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/agent-base.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/agent.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/parsers/urlencoded.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/parsers/json.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/parsers/text.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/parsers/image.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/parsers/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/superagent/lib/node/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/node_modules/@mailchimp/mailchimp_marketing/src/index.js", "../../../../../../Users/jalexander/Documents/10. Python Projects/joe-ai-insights-web-main/netlify/functions/mailchimp-subscribe.cjs"],
  "sourceRoot": "/var/folders/yx/bllgbjyx08n2w8lqytbzt9900000gn/T/tmp-9387-o02ye4Xf568F",
  "sourcesContent": ["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\"use strict\";\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = require('ms');\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n", "\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = require('./common')(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n", "'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n", "'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n", "\"use strict\";\n\n/**\n * Module dependencies.\n */\nvar tty = require('tty');\n\nvar util = require('util');\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  var supportsColor = require('supports-color');\n\n  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];\n  }\n} catch (error) {} // Swallow - we only care if `supports-color` is available; it doesn't have to be.\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // Camel-case\n  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {\n    return k.toUpperCase();\n  }); // Coerce string value into JS value\n\n  var val = process.env[key];\n\n  if (/^(yes|on|true|enabled)$/i.test(val)) {\n    val = true;\n  } else if (/^(no|off|false|disabled)$/i.test(val)) {\n    val = false;\n  } else if (val === 'null') {\n    val = null;\n  } else {\n    val = Number(val);\n  }\n\n  obj[prop] = val;\n  return obj;\n}, {});\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);\n}\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  var name = this.namespace,\n      useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var colorCode = \"\\x1B[3\" + (c < 8 ? c : '8;5;' + c);\n    var prefix = \"  \".concat(colorCode, \";1m\").concat(name, \" \\x1B[0m\");\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + \"\\x1B[0m\");\n  } else {\n    args[0] = getDate() + name + ' ' + args[0];\n  }\n}\n\nfunction getDate() {\n  if (exports.inspectOpts.hideDate) {\n    return '';\n  }\n\n  return new Date().toISOString() + ' ';\n}\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\n\nfunction log() {\n  return process.stderr.write(util.format.apply(util, arguments) + '\\n');\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  if (namespaces) {\n    process.env.DEBUG = namespaces;\n  } else {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  return process.env.DEBUG;\n}\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\n\nfunction init(debug) {\n  debug.inspectOpts = {};\n  var keys = Object.keys(exports.inspectOpts);\n\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\nmodule.exports = require('./common')(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts)\n    .split('\\n')\n    .map(function (str) { return str.trim(); })\n    .join(' ');\n};\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\n\nformatters.O = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n", "\"use strict\";\n\n/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n\n", "if (global.GENTLY) require = GENTLY.hijack(require);\n\nvar util = require('util'),\n    fs = require('fs'),\n    EventEmitter = require('events').EventEmitter,\n    crypto = require('crypto');\n\nfunction File(properties) {\n  EventEmitter.call(this);\n\n  this.size = 0;\n  this.path = null;\n  this.name = null;\n  this.type = null;\n  this.hash = null;\n  this.lastModifiedDate = null;\n\n  this._writeStream = null;\n  \n  for (var key in properties) {\n    this[key] = properties[key];\n  }\n\n  if(typeof this.hash === 'string') {\n    this.hash = crypto.createHash(properties.hash);\n  } else {\n    this.hash = null;\n  }\n}\nmodule.exports = File;\nutil.inherits(File, EventEmitter);\n\nFile.prototype.open = function() {\n  this._writeStream = new fs.WriteStream(this.path);\n};\n\nFile.prototype.toJSON = function() {\n  var json = {\n    size: this.size,\n    path: this.path,\n    name: this.name,\n    type: this.type,\n    mtime: this.lastModifiedDate,\n    length: this.length,\n    filename: this.filename,\n    mime: this.mime\n  };\n  if (this.hash && this.hash != \"\") {\n    json.hash = this.hash;\n  }\n  return json;\n};\n\nFile.prototype.write = function(buffer, cb) {\n  var self = this;\n  if (self.hash) {\n    self.hash.update(buffer);\n  }\n\n  if (this._writeStream.closed) {\n    return cb();\n  }\n\n  this._writeStream.write(buffer, function() {\n    self.lastModifiedDate = new Date();\n    self.size += buffer.length;\n    self.emit('progress', self.size);\n    cb();\n  });\n};\n\nFile.prototype.end = function(cb) {\n  var self = this;\n  if (self.hash) {\n    self.hash = self.hash.digest('hex');\n  }\n  this._writeStream.end(function() {\n    self.emit('end');\n    cb();\n  });\n};\n", "var Buffer = require('buffer').Buffer,\n    s = 0,\n    S =\n    { PARSER_UNINITIALIZED: s++,\n      START: s++,\n      START_BOUNDARY: s++,\n      HEADER_FIELD_START: s++,\n      HEADER_FIELD: s++,\n      HEADER_VALUE_START: s++,\n      HEADER_VALUE: s++,\n      HEADER_VALUE_ALMOST_DONE: s++,\n      HEADERS_ALMOST_DONE: s++,\n      PART_DATA_START: s++,\n      PART_DATA: s++,\n      PART_END: s++,\n      END: s++\n    },\n\n    f = 1,\n    F =\n    { PART_BOUNDARY: f,\n      LAST_BOUNDARY: f *= 2\n    },\n\n    LF = 10,\n    CR = 13,\n    SPACE = 32,\n    HYPHEN = 45,\n    COLON = 58,\n    A = 97,\n    Z = 122,\n\n    lower = function(c) {\n      return c | 0x20;\n    };\n\nfor (s in S) {\n  exports[s] = S[s];\n}\n\nfunction MultipartParser() {\n  this.boundary = null;\n  this.boundaryChars = null;\n  this.lookbehind = null;\n  this.state = S.PARSER_UNINITIALIZED;\n\n  this.index = null;\n  this.flags = 0;\n}\nexports.MultipartParser = MultipartParser;\n\nMultipartParser.stateToString = function(stateNumber) {\n  for (var state in S) {\n    var number = S[state];\n    if (number === stateNumber) return state;\n  }\n};\n\nMultipartParser.prototype.initWithBoundary = function(str) {\n  this.boundary = new Buffer(str.length+4);\n  this.boundary.write('\\r\\n--', 0);\n  this.boundary.write(str, 4);\n  this.lookbehind = new Buffer(this.boundary.length+8);\n  this.state = S.START;\n\n  this.boundaryChars = {};\n  for (var i = 0; i < this.boundary.length; i++) {\n    this.boundaryChars[this.boundary[i]] = true;\n  }\n};\n\nMultipartParser.prototype.write = function(buffer) {\n  var self = this,\n      i = 0,\n      len = buffer.length,\n      prevIndex = this.index,\n      index = this.index,\n      state = this.state,\n      flags = this.flags,\n      lookbehind = this.lookbehind,\n      boundary = this.boundary,\n      boundaryChars = this.boundaryChars,\n      boundaryLength = this.boundary.length,\n      boundaryEnd = boundaryLength - 1,\n      bufferLength = buffer.length,\n      c,\n      cl,\n\n      mark = function(name) {\n        self[name+'Mark'] = i;\n      },\n      clear = function(name) {\n        delete self[name+'Mark'];\n      },\n      callback = function(name, buffer, start, end) {\n        if (start !== undefined && start === end) {\n          return;\n        }\n\n        var callbackSymbol = 'on'+name.substr(0, 1).toUpperCase()+name.substr(1);\n        if (callbackSymbol in self) {\n          self[callbackSymbol](buffer, start, end);\n        }\n      },\n      dataCallback = function(name, clear) {\n        var markSymbol = name+'Mark';\n        if (!(markSymbol in self)) {\n          return;\n        }\n\n        if (!clear) {\n          callback(name, buffer, self[markSymbol], buffer.length);\n          self[markSymbol] = 0;\n        } else {\n          callback(name, buffer, self[markSymbol], i);\n          delete self[markSymbol];\n        }\n      };\n\n  for (i = 0; i < len; i++) {\n    c = buffer[i];\n    switch (state) {\n      case S.PARSER_UNINITIALIZED:\n        return i;\n      case S.START:\n        index = 0;\n        state = S.START_BOUNDARY;\n      case S.START_BOUNDARY:\n        if (index == boundary.length - 2) {\n          if (c == HYPHEN) {\n            flags |= F.LAST_BOUNDARY;\n          } else if (c != CR) {\n            return i;\n          }\n          index++;\n          break;\n        } else if (index - 1 == boundary.length - 2) {\n          if (flags & F.LAST_BOUNDARY && c == HYPHEN){\n            callback('end');\n            state = S.END;\n            flags = 0;\n          } else if (!(flags & F.LAST_BOUNDARY) && c == LF) {\n            index = 0;\n            callback('partBegin');\n            state = S.HEADER_FIELD_START;\n          } else {\n            return i;\n          }\n          break;\n        }\n\n        if (c != boundary[index+2]) {\n          index = -2;\n        }\n        if (c == boundary[index+2]) {\n          index++;\n        }\n        break;\n      case S.HEADER_FIELD_START:\n        state = S.HEADER_FIELD;\n        mark('headerField');\n        index = 0;\n      case S.HEADER_FIELD:\n        if (c == CR) {\n          clear('headerField');\n          state = S.HEADERS_ALMOST_DONE;\n          break;\n        }\n\n        index++;\n        if (c == HYPHEN) {\n          break;\n        }\n\n        if (c == COLON) {\n          if (index == 1) {\n            // empty header field\n            return i;\n          }\n          dataCallback('headerField', true);\n          state = S.HEADER_VALUE_START;\n          break;\n        }\n\n        cl = lower(c);\n        if (cl < A || cl > Z) {\n          return i;\n        }\n        break;\n      case S.HEADER_VALUE_START:\n        if (c == SPACE) {\n          break;\n        }\n\n        mark('headerValue');\n        state = S.HEADER_VALUE;\n      case S.HEADER_VALUE:\n        if (c == CR) {\n          dataCallback('headerValue', true);\n          callback('headerEnd');\n          state = S.HEADER_VALUE_ALMOST_DONE;\n        }\n        break;\n      case S.HEADER_VALUE_ALMOST_DONE:\n        if (c != LF) {\n          return i;\n        }\n        state = S.HEADER_FIELD_START;\n        break;\n      case S.HEADERS_ALMOST_DONE:\n        if (c != LF) {\n          return i;\n        }\n\n        callback('headersEnd');\n        state = S.PART_DATA_START;\n        break;\n      case S.PART_DATA_START:\n        state = S.PART_DATA;\n        mark('partData');\n      case S.PART_DATA:\n        prevIndex = index;\n\n        if (index === 0) {\n          // boyer-moore derrived algorithm to safely skip non-boundary data\n          i += boundaryEnd;\n          while (i < bufferLength && !(buffer[i] in boundaryChars)) {\n            i += boundaryLength;\n          }\n          i -= boundaryEnd;\n          c = buffer[i];\n        }\n\n        if (index < boundary.length) {\n          if (boundary[index] == c) {\n            if (index === 0) {\n              dataCallback('partData', true);\n            }\n            index++;\n          } else {\n            index = 0;\n          }\n        } else if (index == boundary.length) {\n          index++;\n          if (c == CR) {\n            // CR = part boundary\n            flags |= F.PART_BOUNDARY;\n          } else if (c == HYPHEN) {\n            // HYPHEN = end boundary\n            flags |= F.LAST_BOUNDARY;\n          } else {\n            index = 0;\n          }\n        } else if (index - 1 == boundary.length)  {\n          if (flags & F.PART_BOUNDARY) {\n            index = 0;\n            if (c == LF) {\n              // unset the PART_BOUNDARY flag\n              flags &= ~F.PART_BOUNDARY;\n              callback('partEnd');\n              callback('partBegin');\n              state = S.HEADER_FIELD_START;\n              break;\n            }\n          } else if (flags & F.LAST_BOUNDARY) {\n            if (c == HYPHEN) {\n              callback('partEnd');\n              callback('end');\n              state = S.END;\n              flags = 0;\n            } else {\n              index = 0;\n            }\n          } else {\n            index = 0;\n          }\n        }\n\n        if (index > 0) {\n          // when matching a possible boundary, keep a lookbehind reference\n          // in case it turns out to be a false lead\n          lookbehind[index-1] = c;\n        } else if (prevIndex > 0) {\n          // if our boundary turned out to be rubbish, the captured lookbehind\n          // belongs to partData\n          callback('partData', lookbehind, 0, prevIndex);\n          prevIndex = 0;\n          mark('partData');\n\n          // reconsider the current character even so it interrupted the sequence\n          // it could be the beginning of a new sequence\n          i--;\n        }\n\n        break;\n      case S.END:\n        break;\n      default:\n        return i;\n    }\n  }\n\n  dataCallback('headerField');\n  dataCallback('headerValue');\n  dataCallback('partData');\n\n  this.index = index;\n  this.state = state;\n  this.flags = flags;\n\n  return len;\n};\n\nMultipartParser.prototype.end = function() {\n  var callback = function(self, name) {\n    var callbackSymbol = 'on'+name.substr(0, 1).toUpperCase()+name.substr(1);\n    if (callbackSymbol in self) {\n      self[callbackSymbol]();\n    }\n  };\n  if ((this.state == S.HEADER_FIELD_START && this.index === 0) ||\n      (this.state == S.PART_DATA && this.index == this.boundary.length)) {\n    callback(this, 'partEnd');\n    callback(this, 'end');\n  } else if (this.state != S.END) {\n    return new Error('MultipartParser.end(): stream ended unexpectedly: ' + this.explain());\n  }\n};\n\nMultipartParser.prototype.explain = function() {\n  return 'state = ' + MultipartParser.stateToString(this.state);\n};\n", "if (global.GENTLY) require = GENTLY.hijack(require);\n\n// This is a buffering parser, not quite as nice as the multipart one.\n// If I find time I'll rewrite this to be fully streaming as well\nvar querystring = require('querystring');\n\nfunction QuerystringParser(maxKeys) {\n  this.maxKeys = maxKeys;\n  this.buffer = '';\n}\nexports.QuerystringParser = QuerystringParser;\n\nQuerystringParser.prototype.write = function(buffer) {\n  this.buffer += buffer.toString('ascii');\n  return buffer.length;\n};\n\nQuerystringParser.prototype.end = function() {\n  var fields = querystring.parse(this.buffer, '&', '=', { maxKeys: this.maxKeys });\n  for (var field in fields) {\n    this.onField(field, fields[field]);\n  }\n  this.buffer = '';\n\n  this.onEnd();\n};\n\n", "var EventEmitter = require('events').EventEmitter\n\t, util = require('util');\n\nfunction OctetParser(options){\n\tif(!(this instanceof OctetParser)) return new OctetParser(options);\n\tEventEmitter.call(this);\n}\n\nutil.inherits(OctetParser, EventEmitter);\n\nexports.OctetParser = OctetParser;\n\nOctetParser.prototype.write = function(buffer) {\n    this.emit('data', buffer);\n\treturn buffer.length;\n};\n\nOctetParser.prototype.end = function() {\n\tthis.emit('end');\n};\n", "if (global.GENTLY) require = GENTLY.hijack(require);\n\nvar Buffer = require('buffer').Buffer;\n\nfunction JSONParser(parent) {\n  this.parent = parent;\n  this.chunks = [];\n  this.bytesWritten = 0;\n}\nexports.JSONParser = JSONParser;\n\nJSONParser.prototype.write = function(buffer) {\n  this.bytesWritten += buffer.length;\n  this.chunks.push(buffer);\n  return buffer.length;\n};\n\nJSONParser.prototype.end = function() {\n  try {\n    var fields = JSON.parse(Buffer.concat(this.chunks));\n    for (var field in fields) {\n      this.onField(field, fields[field]);\n    }\n  } catch (e) {\n    this.parent.emit('error', e);\n  }\n  this.data = null;\n\n  this.onEnd();\n};\n", "if (global.GENTLY) require = GENTLY.hijack(require);\n\nvar crypto = require('crypto');\nvar fs = require('fs');\nvar util = require('util'),\n    path = require('path'),\n    File = require('./file'),\n    MultipartParser = require('./multipart_parser').MultipartParser,\n    QuerystringParser = require('./querystring_parser').QuerystringParser,\n    OctetParser       = require('./octet_parser').OctetParser,\n    JSONParser = require('./json_parser').JSONParser,\n    StringDecoder = require('string_decoder').StringDecoder,\n    EventEmitter = require('events').EventEmitter,\n    Stream = require('stream').Stream,\n    os = require('os');\n\nfunction IncomingForm(opts) {\n  if (!(this instanceof IncomingForm)) return new IncomingForm(opts);\n  EventEmitter.call(this);\n\n  opts=opts||{};\n\n  this.error = null;\n  this.ended = false;\n\n  this.maxFields = opts.maxFields || 1000;\n  this.maxFieldsSize = opts.maxFieldsSize || 20 * 1024 * 1024;\n  this.maxFileSize = opts.maxFileSize || 200 * 1024 * 1024;\n  this.keepExtensions = opts.keepExtensions || false;\n  this.uploadDir = opts.uploadDir || (os.tmpdir && os.tmpdir()) || os.tmpDir();\n  this.encoding = opts.encoding || 'utf-8';\n  this.headers = null;\n  this.type = null;\n  this.hash = opts.hash || false;\n  this.multiples = opts.multiples || false;\n\n  this.bytesReceived = null;\n  this.bytesExpected = null;\n\n  this._parser = null;\n  this._flushing = 0;\n  this._fieldsSize = 0;\n  this._fileSize = 0;\n  this.openedFiles = [];\n\n  return this;\n}\nutil.inherits(IncomingForm, EventEmitter);\nexports.IncomingForm = IncomingForm;\n\nIncomingForm.prototype.parse = function(req, cb) {\n  this.pause = function() {\n    try {\n      req.pause();\n    } catch (err) {\n      // the stream was destroyed\n      if (!this.ended) {\n        // before it was completed, crash & burn\n        this._error(err);\n      }\n      return false;\n    }\n    return true;\n  };\n\n  this.resume = function() {\n    try {\n      req.resume();\n    } catch (err) {\n      // the stream was destroyed\n      if (!this.ended) {\n        // before it was completed, crash & burn\n        this._error(err);\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  // Setup callback first, so we don't miss anything from data events emitted\n  // immediately.\n  if (cb) {\n    var fields = {}, files = {};\n    this\n      .on('field', function(name, value) {\n        fields[name] = value;\n      })\n      .on('file', function(name, file) {\n        if (this.multiples) {\n          if (files[name]) {\n            if (!Array.isArray(files[name])) {\n              files[name] = [files[name]];\n            }\n            files[name].push(file);\n          } else {\n            files[name] = file;\n          }\n        } else {\n          files[name] = file;\n        }\n      })\n      .on('error', function(err) {\n        cb(err, fields, files);\n      })\n      .on('end', function() {\n        cb(null, fields, files);\n      });\n  }\n\n  // Parse headers and setup the parser, ready to start listening for data.\n  this.writeHeaders(req.headers);\n\n  // Start listening for data.\n  var self = this;\n  req\n    .on('error', function(err) {\n      self._error(err);\n    })\n    .on('aborted', function() {\n      self.emit('aborted');\n      self._error(new Error('Request aborted'));\n    })\n    .on('data', function(buffer) {\n      self.write(buffer);\n    })\n    .on('end', function() {\n      if (self.error) {\n        return;\n      }\n\n      var err = self._parser.end();\n      if (err) {\n        self._error(err);\n      }\n    });\n\n  return this;\n};\n\nIncomingForm.prototype.writeHeaders = function(headers) {\n  this.headers = headers;\n  this._parseContentLength();\n  this._parseContentType();\n};\n\nIncomingForm.prototype.write = function(buffer) {\n  if (this.error) {\n    return;\n  }\n  if (!this._parser) {\n    this._error(new Error('uninitialized parser'));\n    return;\n  }\n  if (typeof this._parser.write !== 'function') {\n    this._error(new Error('did not expect data'));\n    return;\n  }\n\n  this.bytesReceived += buffer.length;\n  this.emit('progress', this.bytesReceived, this.bytesExpected);\n\n  var bytesParsed = this._parser.write(buffer);\n  if (bytesParsed !== buffer.length) {\n    this._error(new Error('parser error, '+bytesParsed+' of '+buffer.length+' bytes parsed'));\n  }\n\n  return bytesParsed;\n};\n\nIncomingForm.prototype.pause = function() {\n  // this does nothing, unless overwritten in IncomingForm.parse\n  return false;\n};\n\nIncomingForm.prototype.resume = function() {\n  // this does nothing, unless overwritten in IncomingForm.parse\n  return false;\n};\n\nIncomingForm.prototype.onPart = function(part) {\n  // this method can be overwritten by the user\n  this.handlePart(part);\n};\n\nIncomingForm.prototype.handlePart = function(part) {\n  var self = this;\n\n  // This MUST check exactly for undefined. You can not change it to !part.filename.\n  if (part.filename === undefined) {\n    var value = ''\n      , decoder = new StringDecoder(this.encoding);\n\n    part.on('data', function(buffer) {\n      self._fieldsSize += buffer.length;\n      if (self._fieldsSize > self.maxFieldsSize) {\n        self._error(new Error('maxFieldsSize exceeded, received '+self._fieldsSize+' bytes of field data'));\n        return;\n      }\n      value += decoder.write(buffer);\n    });\n\n    part.on('end', function() {\n      self.emit('field', part.name, value);\n    });\n    return;\n  }\n\n  this._flushing++;\n\n  var file = new File({\n    path: this._uploadPath(part.filename),\n    name: part.filename,\n    type: part.mime,\n    hash: self.hash\n  });\n\n  this.emit('fileBegin', part.name, file);\n\n  file.open();\n  this.openedFiles.push(file);\n\n  part.on('data', function(buffer) {\n    self._fileSize += buffer.length;\n    if (self._fileSize > self.maxFileSize) {\n      self._error(new Error('maxFileSize exceeded, received '+self._fileSize+' bytes of file data'));\n      return;\n    }\n    if (buffer.length == 0) {\n      return;\n    }\n    self.pause();\n    file.write(buffer, function() {\n      self.resume();\n    });\n  });\n\n  part.on('end', function() {\n    file.end(function() {\n      self._flushing--;\n      self.emit('file', part.name, file);\n      self._maybeEnd();\n    });\n  });\n};\n\nfunction dummyParser(self) {\n  return {\n    end: function () {\n      self.ended = true;\n      self._maybeEnd();\n      return null;\n    }\n  };\n}\n\nIncomingForm.prototype._parseContentType = function() {\n  if (this.bytesExpected === 0) {\n    this._parser = dummyParser(this);\n    return;\n  }\n\n  if (!this.headers['content-type']) {\n    this._error(new Error('bad content-type header, no content-type'));\n    return;\n  }\n\n  if (this.headers['content-type'].match(/octet-stream/i)) {\n    this._initOctetStream();\n    return;\n  }\n\n  if (this.headers['content-type'].match(/urlencoded/i)) {\n    this._initUrlencoded();\n    return;\n  }\n\n  if (this.headers['content-type'].match(/multipart/i)) {\n    var m = this.headers['content-type'].match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n    if (m) {\n      this._initMultipart(m[1] || m[2]);\n    } else {\n      this._error(new Error('bad content-type header, no multipart boundary'));\n    }\n    return;\n  }\n\n  if (this.headers['content-type'].match(/json/i)) {\n    this._initJSONencoded();\n    return;\n  }\n\n  this._error(new Error('bad content-type header, unknown content-type: '+this.headers['content-type']));\n};\n\nIncomingForm.prototype._error = function(err) {\n  if (this.error || this.ended) {\n    return;\n  }\n\n  this.error = err;\n  this.emit('error', err);\n\n  if (Array.isArray(this.openedFiles)) {\n    this.openedFiles.forEach(function(file) {\n      file._writeStream\n        .on('error', function() {})\n        .destroy();\n      setTimeout(fs.unlink, 0, file.path, function(error) { });\n    });\n  }\n};\n\nIncomingForm.prototype._parseContentLength = function() {\n  this.bytesReceived = 0;\n  if (this.headers['content-length']) {\n    this.bytesExpected = parseInt(this.headers['content-length'], 10);\n  } else if (this.headers['transfer-encoding'] === undefined) {\n    this.bytesExpected = 0;\n  }\n\n  if (this.bytesExpected !== null) {\n    this.emit('progress', this.bytesReceived, this.bytesExpected);\n  }\n};\n\nIncomingForm.prototype._newParser = function() {\n  return new MultipartParser();\n};\n\nIncomingForm.prototype._initMultipart = function(boundary) {\n  this.type = 'multipart';\n\n  var parser = new MultipartParser(),\n      self = this,\n      headerField,\n      headerValue,\n      part;\n\n  parser.initWithBoundary(boundary);\n\n  parser.onPartBegin = function() {\n    part = new Stream();\n    part.readable = true;\n    part.headers = {};\n    part.name = null;\n    part.filename = null;\n    part.mime = null;\n\n    part.transferEncoding = 'binary';\n    part.transferBuffer = '';\n\n    headerField = '';\n    headerValue = '';\n  };\n\n  parser.onHeaderField = function(b, start, end) {\n    headerField += b.toString(self.encoding, start, end);\n  };\n\n  parser.onHeaderValue = function(b, start, end) {\n    headerValue += b.toString(self.encoding, start, end);\n  };\n\n  parser.onHeaderEnd = function() {\n    headerField = headerField.toLowerCase();\n    part.headers[headerField] = headerValue;\n\n    // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n    var m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\s\\t/]+))/i);\n    if (headerField == 'content-disposition') {\n      if (m) {\n        part.name = m[2] || m[3] || '';\n      }\n\n      part.filename = self._fileName(headerValue);\n    } else if (headerField == 'content-type') {\n      part.mime = headerValue;\n    } else if (headerField == 'content-transfer-encoding') {\n      part.transferEncoding = headerValue.toLowerCase();\n    }\n\n    headerField = '';\n    headerValue = '';\n  };\n\n  parser.onHeadersEnd = function() {\n    switch(part.transferEncoding){\n      case 'binary':\n      case '7bit':\n      case '8bit':\n      parser.onPartData = function(b, start, end) {\n        part.emit('data', b.slice(start, end));\n      };\n\n      parser.onPartEnd = function() {\n        part.emit('end');\n      };\n      break;\n\n      case 'base64':\n      parser.onPartData = function(b, start, end) {\n        part.transferBuffer += b.slice(start, end).toString('ascii');\n\n        /*\n        four bytes (chars) in base64 converts to three bytes in binary\n        encoding. So we should always work with a number of bytes that\n        can be divided by 4, it will result in a number of buytes that\n        can be divided vy 3.\n        */\n        var offset = parseInt(part.transferBuffer.length / 4, 10) * 4;\n        part.emit('data', new Buffer(part.transferBuffer.substring(0, offset), 'base64'));\n        part.transferBuffer = part.transferBuffer.substring(offset);\n      };\n\n      parser.onPartEnd = function() {\n        part.emit('data', new Buffer(part.transferBuffer, 'base64'));\n        part.emit('end');\n      };\n      break;\n\n      default:\n      return self._error(new Error('unknown transfer-encoding'));\n    }\n\n    self.onPart(part);\n  };\n\n\n  parser.onEnd = function() {\n    self.ended = true;\n    self._maybeEnd();\n  };\n\n  this._parser = parser;\n};\n\nIncomingForm.prototype._fileName = function(headerValue) {\n  // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n  var m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\s\\t/]+))($|;\\s)/i);\n  if (!m) return;\n\n  var match = m[2] || m[3] || '';\n  var filename = match.substr(match.lastIndexOf('\\\\') + 1);\n  filename = filename.replace(/%22/g, '\"');\n  filename = filename.replace(/&#([\\d]{4});/g, function(m, code) {\n    return String.fromCharCode(code);\n  });\n  return filename;\n};\n\nIncomingForm.prototype._initUrlencoded = function() {\n  this.type = 'urlencoded';\n\n  var parser = new QuerystringParser(this.maxFields)\n    , self = this;\n\n  parser.onField = function(key, val) {\n    self.emit('field', key, val);\n  };\n\n  parser.onEnd = function() {\n    self.ended = true;\n    self._maybeEnd();\n  };\n\n  this._parser = parser;\n};\n\nIncomingForm.prototype._initOctetStream = function() {\n  this.type = 'octet-stream';\n  var filename = this.headers['x-file-name'];\n  var mime = this.headers['content-type'];\n\n  var file = new File({\n    path: this._uploadPath(filename),\n    name: filename,\n    type: mime\n  });\n\n  this.emit('fileBegin', filename, file);\n  file.open();\n  this.openedFiles.push(file);\n  this._flushing++;\n\n  var self = this;\n\n  self._parser = new OctetParser();\n\n  //Keep track of writes that haven't finished so we don't emit the file before it's done being written\n  var outstandingWrites = 0;\n\n  self._parser.on('data', function(buffer){\n    self.pause();\n    outstandingWrites++;\n\n    file.write(buffer, function() {\n      outstandingWrites--;\n      self.resume();\n\n      if(self.ended){\n        self._parser.emit('doneWritingFile');\n      }\n    });\n  });\n\n  self._parser.on('end', function(){\n    self._flushing--;\n    self.ended = true;\n\n    var done = function(){\n      file.end(function() {\n        self.emit('file', 'file', file);\n        self._maybeEnd();\n      });\n    };\n\n    if(outstandingWrites === 0){\n      done();\n    } else {\n      self._parser.once('doneWritingFile', done);\n    }\n  });\n};\n\nIncomingForm.prototype._initJSONencoded = function() {\n  this.type = 'json';\n\n  var parser = new JSONParser(this)\n    , self = this;\n\n  parser.onField = function(key, val) {\n    self.emit('field', key, val);\n  };\n\n  parser.onEnd = function() {\n    self.ended = true;\n    self._maybeEnd();\n  };\n\n  this._parser = parser;\n};\n\nIncomingForm.prototype._uploadPath = function(filename) {\n  var buf = crypto.randomBytes(16);\n  var name = 'upload_' + buf.toString('hex');\n\n  if (this.keepExtensions) {\n    var ext = path.extname(filename);\n    ext     = ext.replace(/(\\.[a-z0-9]+).*/i, '$1');\n\n    name += ext;\n  }\n\n  return path.join(this.uploadDir, name);\n};\n\nIncomingForm.prototype._maybeEnd = function() {\n  if (!this.ended || this._flushing || this.error) {\n    return;\n  }\n\n  this.emit('end');\n};\n", "var IncomingForm = require('./incoming_form').IncomingForm;\nIncomingForm.IncomingForm = IncomingForm;\nmodule.exports = IncomingForm;\n", "var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n", "var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\n\nCombinedStream.prototype._realGetNext = function() {\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n", "{\n  \"application/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/3gpdash-qoe-report+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/3gpp-ims+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/3gpphal+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/3gpphalforms+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/a2l\": {\n    \"source\": \"iana\"\n  },\n  \"application/ace+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/activemessage\": {\n    \"source\": \"iana\"\n  },\n  \"application/activity+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-costmap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-costmapfilter+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-directory+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointcost+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointcostparams+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointprop+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointpropparams+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-error+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-networkmap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-networkmapfilter+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-updatestreamcontrol+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-updatestreamparams+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/aml\": {\n    \"source\": \"iana\"\n  },\n  \"application/andrew-inset\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ez\"]\n  },\n  \"application/applefile\": {\n    \"source\": \"iana\"\n  },\n  \"application/applixware\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aw\"]\n  },\n  \"application/at+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/atf\": {\n    \"source\": \"iana\"\n  },\n  \"application/atfx\": {\n    \"source\": \"iana\"\n  },\n  \"application/atom+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atom\"]\n  },\n  \"application/atomcat+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atomcat\"]\n  },\n  \"application/atomdeleted+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atomdeleted\"]\n  },\n  \"application/atomicmail\": {\n    \"source\": \"iana\"\n  },\n  \"application/atomsvc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atomsvc\"]\n  },\n  \"application/atsc-dwd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dwd\"]\n  },\n  \"application/atsc-dynamic-event-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/atsc-held+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"held\"]\n  },\n  \"application/atsc-rdt+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/atsc-rsat+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rsat\"]\n  },\n  \"application/atxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/auth-policy+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/bacnet-xdd+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/batch-smtp\": {\n    \"source\": \"iana\"\n  },\n  \"application/bdoc\": {\n    \"compressible\": false,\n    \"extensions\": [\"bdoc\"]\n  },\n  \"application/beep+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/calendar+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/calendar+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xcs\"]\n  },\n  \"application/call-completion\": {\n    \"source\": \"iana\"\n  },\n  \"application/cals-1840\": {\n    \"source\": \"iana\"\n  },\n  \"application/captive+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/cbor-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/cccex\": {\n    \"source\": \"iana\"\n  },\n  \"application/ccmp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ccxml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ccxml\"]\n  },\n  \"application/cdfx+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"cdfx\"]\n  },\n  \"application/cdmi-capability\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmia\"]\n  },\n  \"application/cdmi-container\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmic\"]\n  },\n  \"application/cdmi-domain\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmid\"]\n  },\n  \"application/cdmi-object\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmio\"]\n  },\n  \"application/cdmi-queue\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmiq\"]\n  },\n  \"application/cdni\": {\n    \"source\": \"iana\"\n  },\n  \"application/cea\": {\n    \"source\": \"iana\"\n  },\n  \"application/cea-2018+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cellml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cfw\": {\n    \"source\": \"iana\"\n  },\n  \"application/city+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/clr\": {\n    \"source\": \"iana\"\n  },\n  \"application/clue+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/clue_info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cms\": {\n    \"source\": \"iana\"\n  },\n  \"application/cnrp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/coap-group+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/coap-payload\": {\n    \"source\": \"iana\"\n  },\n  \"application/commonground\": {\n    \"source\": \"iana\"\n  },\n  \"application/conference-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cose\": {\n    \"source\": \"iana\"\n  },\n  \"application/cose-key\": {\n    \"source\": \"iana\"\n  },\n  \"application/cose-key-set\": {\n    \"source\": \"iana\"\n  },\n  \"application/cpl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"cpl\"]\n  },\n  \"application/csrattrs\": {\n    \"source\": \"iana\"\n  },\n  \"application/csta+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cstadata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/csvm+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cu-seeme\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cu\"]\n  },\n  \"application/cwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/cybercash\": {\n    \"source\": \"iana\"\n  },\n  \"application/dart\": {\n    \"compressible\": true\n  },\n  \"application/dash+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpd\"]\n  },\n  \"application/dash-patch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpp\"]\n  },\n  \"application/dashdelta\": {\n    \"source\": \"iana\"\n  },\n  \"application/davmount+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"davmount\"]\n  },\n  \"application/dca-rft\": {\n    \"source\": \"iana\"\n  },\n  \"application/dcd\": {\n    \"source\": \"iana\"\n  },\n  \"application/dec-dx\": {\n    \"source\": \"iana\"\n  },\n  \"application/dialog-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dicom\": {\n    \"source\": \"iana\"\n  },\n  \"application/dicom+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dicom+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dii\": {\n    \"source\": \"iana\"\n  },\n  \"application/dit\": {\n    \"source\": \"iana\"\n  },\n  \"application/dns\": {\n    \"source\": \"iana\"\n  },\n  \"application/dns+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dns-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/docbook+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"dbk\"]\n  },\n  \"application/dots+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/dskpp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dssc+der\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dssc\"]\n  },\n  \"application/dssc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xdssc\"]\n  },\n  \"application/dvcs\": {\n    \"source\": \"iana\"\n  },\n  \"application/ecmascript\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"es\",\"ecma\"]\n  },\n  \"application/edi-consent\": {\n    \"source\": \"iana\"\n  },\n  \"application/edi-x12\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/edifact\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/efi\": {\n    \"source\": \"iana\"\n  },\n  \"application/elm+json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/elm+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.cap+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.comment+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.control+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.deviceinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.ecall.msd\": {\n    \"source\": \"iana\"\n  },\n  \"application/emergencycalldata.providerinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.serviceinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.subscriberinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.veds+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emma+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"emma\"]\n  },\n  \"application/emotionml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"emotionml\"]\n  },\n  \"application/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"application/epp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/epub+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"epub\"]\n  },\n  \"application/eshop\": {\n    \"source\": \"iana\"\n  },\n  \"application/exi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"exi\"]\n  },\n  \"application/expect-ct-report+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/express\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"exp\"]\n  },\n  \"application/fastinfoset\": {\n    \"source\": \"iana\"\n  },\n  \"application/fastsoap\": {\n    \"source\": \"iana\"\n  },\n  \"application/fdt+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"fdt\"]\n  },\n  \"application/fhir+json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/fhir+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/fido.trusted-apps+json\": {\n    \"compressible\": true\n  },\n  \"application/fits\": {\n    \"source\": \"iana\"\n  },\n  \"application/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/font-sfnt\": {\n    \"source\": \"iana\"\n  },\n  \"application/font-tdpfr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pfr\"]\n  },\n  \"application/font-woff\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/framework-attributes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/geo+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"geojson\"]\n  },\n  \"application/geo+json-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/geopackage+sqlite3\": {\n    \"source\": \"iana\"\n  },\n  \"application/geoxacml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/gltf-buffer\": {\n    \"source\": \"iana\"\n  },\n  \"application/gml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"gml\"]\n  },\n  \"application/gpx+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"gpx\"]\n  },\n  \"application/gxf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gxf\"]\n  },\n  \"application/gzip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"gz\"]\n  },\n  \"application/h224\": {\n    \"source\": \"iana\"\n  },\n  \"application/held+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/hjson\": {\n    \"extensions\": [\"hjson\"]\n  },\n  \"application/http\": {\n    \"source\": \"iana\"\n  },\n  \"application/hyperstudio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"stk\"]\n  },\n  \"application/ibe-key-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ibe-pkg-reply+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ibe-pp-data\": {\n    \"source\": \"iana\"\n  },\n  \"application/iges\": {\n    \"source\": \"iana\"\n  },\n  \"application/im-iscomposing+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/index\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.cmd\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.obj\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.response\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.vnd\": {\n    \"source\": \"iana\"\n  },\n  \"application/inkml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ink\",\"inkml\"]\n  },\n  \"application/iotp\": {\n    \"source\": \"iana\"\n  },\n  \"application/ipfix\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ipfix\"]\n  },\n  \"application/ipp\": {\n    \"source\": \"iana\"\n  },\n  \"application/isup\": {\n    \"source\": \"iana\"\n  },\n  \"application/its+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"its\"]\n  },\n  \"application/java-archive\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"jar\",\"war\",\"ear\"]\n  },\n  \"application/java-serialized-object\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"ser\"]\n  },\n  \"application/java-vm\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"class\"]\n  },\n  \"application/javascript\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"js\",\"mjs\"]\n  },\n  \"application/jf2feed+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jose\": {\n    \"source\": \"iana\"\n  },\n  \"application/jose+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jrd+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jscalendar+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"json\",\"map\"]\n  },\n  \"application/json-patch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/json-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/json5\": {\n    \"extensions\": [\"json5\"]\n  },\n  \"application/jsonml+json\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"jsonml\"]\n  },\n  \"application/jwk+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jwk-set+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/kpml-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/kpml-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ld+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"jsonld\"]\n  },\n  \"application/lgr+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lgr\"]\n  },\n  \"application/link-format\": {\n    \"source\": \"iana\"\n  },\n  \"application/load-control+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/lost+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lostxml\"]\n  },\n  \"application/lostsync+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/lpf+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/lxf\": {\n    \"source\": \"iana\"\n  },\n  \"application/mac-binhex40\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hqx\"]\n  },\n  \"application/mac-compactpro\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cpt\"]\n  },\n  \"application/macwriteii\": {\n    \"source\": \"iana\"\n  },\n  \"application/mads+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mads\"]\n  },\n  \"application/manifest+json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"webmanifest\"]\n  },\n  \"application/marc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mrc\"]\n  },\n  \"application/marcxml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mrcx\"]\n  },\n  \"application/mathematica\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ma\",\"nb\",\"mb\"]\n  },\n  \"application/mathml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mathml\"]\n  },\n  \"application/mathml-content+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mathml-presentation+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-associated-procedure-description+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-deregister+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-envelope+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-msk+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-msk-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-protection-description+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-reception-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-register+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-register-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-schedule+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-user-service-description+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbox\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mbox\"]\n  },\n  \"application/media-policy-dataset+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpf\"]\n  },\n  \"application/media_control+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mediaservercontrol+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mscml\"]\n  },\n  \"application/merge-patch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/metalink+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"metalink\"]\n  },\n  \"application/metalink4+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"meta4\"]\n  },\n  \"application/mets+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mets\"]\n  },\n  \"application/mf4\": {\n    \"source\": \"iana\"\n  },\n  \"application/mikey\": {\n    \"source\": \"iana\"\n  },\n  \"application/mipc\": {\n    \"source\": \"iana\"\n  },\n  \"application/missing-blocks+cbor-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/mmt-aei+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"maei\"]\n  },\n  \"application/mmt-usd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"musd\"]\n  },\n  \"application/mods+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mods\"]\n  },\n  \"application/moss-keys\": {\n    \"source\": \"iana\"\n  },\n  \"application/moss-signature\": {\n    \"source\": \"iana\"\n  },\n  \"application/mosskey-data\": {\n    \"source\": \"iana\"\n  },\n  \"application/mosskey-request\": {\n    \"source\": \"iana\"\n  },\n  \"application/mp21\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"m21\",\"mp21\"]\n  },\n  \"application/mp4\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mp4s\",\"m4p\"]\n  },\n  \"application/mpeg4-generic\": {\n    \"source\": \"iana\"\n  },\n  \"application/mpeg4-iod\": {\n    \"source\": \"iana\"\n  },\n  \"application/mpeg4-iod-xmt\": {\n    \"source\": \"iana\"\n  },\n  \"application/mrb-consumer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mrb-publish+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/msc-ivr+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/msc-mixer+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/msword\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"doc\",\"dot\"]\n  },\n  \"application/mud+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/multipart-core\": {\n    \"source\": \"iana\"\n  },\n  \"application/mxf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxf\"]\n  },\n  \"application/n-quads\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nq\"]\n  },\n  \"application/n-triples\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nt\"]\n  },\n  \"application/nasdata\": {\n    \"source\": \"iana\"\n  },\n  \"application/news-checkgroups\": {\n    \"source\": \"iana\",\n    \"charset\": \"US-ASCII\"\n  },\n  \"application/news-groupinfo\": {\n    \"source\": \"iana\",\n    \"charset\": \"US-ASCII\"\n  },\n  \"application/news-transmission\": {\n    \"source\": \"iana\"\n  },\n  \"application/nlsml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/node\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cjs\"]\n  },\n  \"application/nss\": {\n    \"source\": \"iana\"\n  },\n  \"application/oauth-authz-req+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/oblivious-dns-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/ocsp-request\": {\n    \"source\": \"iana\"\n  },\n  \"application/ocsp-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/octet-stream\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"]\n  },\n  \"application/oda\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oda\"]\n  },\n  \"application/odm+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/odx\": {\n    \"source\": \"iana\"\n  },\n  \"application/oebps-package+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"opf\"]\n  },\n  \"application/ogg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ogx\"]\n  },\n  \"application/omdoc+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"omdoc\"]\n  },\n  \"application/onenote\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"]\n  },\n  \"application/opc-nodeset+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/oscore\": {\n    \"source\": \"iana\"\n  },\n  \"application/oxps\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oxps\"]\n  },\n  \"application/p21\": {\n    \"source\": \"iana\"\n  },\n  \"application/p21+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/p2p-overlay+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"relo\"]\n  },\n  \"application/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/passport\": {\n    \"source\": \"iana\"\n  },\n  \"application/patch-ops-error+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xer\"]\n  },\n  \"application/pdf\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"pdf\"]\n  },\n  \"application/pdx\": {\n    \"source\": \"iana\"\n  },\n  \"application/pem-certificate-chain\": {\n    \"source\": \"iana\"\n  },\n  \"application/pgp-encrypted\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"pgp\"]\n  },\n  \"application/pgp-keys\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"asc\"]\n  },\n  \"application/pgp-signature\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"asc\",\"sig\"]\n  },\n  \"application/pics-rules\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"prf\"]\n  },\n  \"application/pidf+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/pidf-diff+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/pkcs10\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p10\"]\n  },\n  \"application/pkcs12\": {\n    \"source\": \"iana\"\n  },\n  \"application/pkcs7-mime\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p7m\",\"p7c\"]\n  },\n  \"application/pkcs7-signature\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p7s\"]\n  },\n  \"application/pkcs8\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p8\"]\n  },\n  \"application/pkcs8-encrypted\": {\n    \"source\": \"iana\"\n  },\n  \"application/pkix-attr-cert\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ac\"]\n  },\n  \"application/pkix-cert\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cer\"]\n  },\n  \"application/pkix-crl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"crl\"]\n  },\n  \"application/pkix-pkipath\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pkipath\"]\n  },\n  \"application/pkixcmp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pki\"]\n  },\n  \"application/pls+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"pls\"]\n  },\n  \"application/poc-settings+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/postscript\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ai\",\"eps\",\"ps\"]\n  },\n  \"application/ppsp-tracker+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/problem+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/problem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/provenance+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"provx\"]\n  },\n  \"application/prs.alvestrand.titrax-sheet\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.cww\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cww\"]\n  },\n  \"application/prs.cyn\": {\n    \"source\": \"iana\",\n    \"charset\": \"7-BIT\"\n  },\n  \"application/prs.hpub+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/prs.nprend\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.plucker\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.rdf-xml-crypt\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.xsf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/pskc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"pskcxml\"]\n  },\n  \"application/pvd+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/qsig\": {\n    \"source\": \"iana\"\n  },\n  \"application/raml+yaml\": {\n    \"compressible\": true,\n    \"extensions\": [\"raml\"]\n  },\n  \"application/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/rdap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/rdf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rdf\",\"owl\"]\n  },\n  \"application/reginfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rif\"]\n  },\n  \"application/relax-ng-compact-syntax\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rnc\"]\n  },\n  \"application/remote-printing\": {\n    \"source\": \"iana\"\n  },\n  \"application/reputon+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/resource-lists+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rl\"]\n  },\n  \"application/resource-lists-diff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rld\"]\n  },\n  \"application/rfc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/riscos\": {\n    \"source\": \"iana\"\n  },\n  \"application/rlmi+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/rls-services+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rs\"]\n  },\n  \"application/route-apd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rapd\"]\n  },\n  \"application/route-s-tsid+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sls\"]\n  },\n  \"application/route-usd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rusd\"]\n  },\n  \"application/rpki-ghostbusters\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gbr\"]\n  },\n  \"application/rpki-manifest\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mft\"]\n  },\n  \"application/rpki-publication\": {\n    \"source\": \"iana\"\n  },\n  \"application/rpki-roa\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"roa\"]\n  },\n  \"application/rpki-updown\": {\n    \"source\": \"iana\"\n  },\n  \"application/rsd+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"rsd\"]\n  },\n  \"application/rss+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"rss\"]\n  },\n  \"application/rtf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rtf\"]\n  },\n  \"application/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"application/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"application/samlassertion+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/samlmetadata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sarif+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sarif-external-properties+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sbe\": {\n    \"source\": \"iana\"\n  },\n  \"application/sbml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sbml\"]\n  },\n  \"application/scaip+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/scim+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/scvp-cv-request\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"scq\"]\n  },\n  \"application/scvp-cv-response\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"scs\"]\n  },\n  \"application/scvp-vp-request\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spq\"]\n  },\n  \"application/scvp-vp-response\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spp\"]\n  },\n  \"application/sdp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sdp\"]\n  },\n  \"application/secevent+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/senml+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/senml+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/senml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"senmlx\"]\n  },\n  \"application/senml-etch+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/senml-etch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/senml-exi\": {\n    \"source\": \"iana\"\n  },\n  \"application/sensml+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/sensml+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sensml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sensmlx\"]\n  },\n  \"application/sensml-exi\": {\n    \"source\": \"iana\"\n  },\n  \"application/sep+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sep-exi\": {\n    \"source\": \"iana\"\n  },\n  \"application/session-info\": {\n    \"source\": \"iana\"\n  },\n  \"application/set-payment\": {\n    \"source\": \"iana\"\n  },\n  \"application/set-payment-initiation\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"setpay\"]\n  },\n  \"application/set-registration\": {\n    \"source\": \"iana\"\n  },\n  \"application/set-registration-initiation\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"setreg\"]\n  },\n  \"application/sgml\": {\n    \"source\": \"iana\"\n  },\n  \"application/sgml-open-catalog\": {\n    \"source\": \"iana\"\n  },\n  \"application/shf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"shf\"]\n  },\n  \"application/sieve\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"siv\",\"sieve\"]\n  },\n  \"application/simple-filter+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/simple-message-summary\": {\n    \"source\": \"iana\"\n  },\n  \"application/simplesymbolcontainer\": {\n    \"source\": \"iana\"\n  },\n  \"application/sipc\": {\n    \"source\": \"iana\"\n  },\n  \"application/slate\": {\n    \"source\": \"iana\"\n  },\n  \"application/smil\": {\n    \"source\": \"iana\"\n  },\n  \"application/smil+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"smi\",\"smil\"]\n  },\n  \"application/smpte336m\": {\n    \"source\": \"iana\"\n  },\n  \"application/soap+fastinfoset\": {\n    \"source\": \"iana\"\n  },\n  \"application/soap+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sparql-query\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rq\"]\n  },\n  \"application/sparql-results+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"srx\"]\n  },\n  \"application/spdx+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/spirits-event+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sql\": {\n    \"source\": \"iana\"\n  },\n  \"application/srgs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gram\"]\n  },\n  \"application/srgs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"grxml\"]\n  },\n  \"application/sru+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sru\"]\n  },\n  \"application/ssdl+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"ssdl\"]\n  },\n  \"application/ssml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ssml\"]\n  },\n  \"application/stix+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/swid+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"swidtag\"]\n  },\n  \"application/tamp-apex-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-apex-update-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-community-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-community-update-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-error\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-sequence-adjust\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-sequence-adjust-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-status-query\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-status-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-update-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tar\": {\n    \"compressible\": true\n  },\n  \"application/taxii+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/td+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/tei+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"tei\",\"teicorpus\"]\n  },\n  \"application/tetra_isi\": {\n    \"source\": \"iana\"\n  },\n  \"application/thraud+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"tfi\"]\n  },\n  \"application/timestamp-query\": {\n    \"source\": \"iana\"\n  },\n  \"application/timestamp-reply\": {\n    \"source\": \"iana\"\n  },\n  \"application/timestamped-data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tsd\"]\n  },\n  \"application/tlsrpt+gzip\": {\n    \"source\": \"iana\"\n  },\n  \"application/tlsrpt+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/tnauthlist\": {\n    \"source\": \"iana\"\n  },\n  \"application/token-introspection+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/toml\": {\n    \"compressible\": true,\n    \"extensions\": [\"toml\"]\n  },\n  \"application/trickle-ice-sdpfrag\": {\n    \"source\": \"iana\"\n  },\n  \"application/trig\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"trig\"]\n  },\n  \"application/ttml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ttml\"]\n  },\n  \"application/tve-trigger\": {\n    \"source\": \"iana\"\n  },\n  \"application/tzif\": {\n    \"source\": \"iana\"\n  },\n  \"application/tzif-leap\": {\n    \"source\": \"iana\"\n  },\n  \"application/ubjson\": {\n    \"compressible\": false,\n    \"extensions\": [\"ubj\"]\n  },\n  \"application/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/urc-grpsheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/urc-ressheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rsheet\"]\n  },\n  \"application/urc-targetdesc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"td\"]\n  },\n  \"application/urc-uisocketdesc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vcard+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vcard+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vemmi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vividence.scriptfile\": {\n    \"source\": \"apache\"\n  },\n  \"application/vnd.1000minds.decision-model+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"1km\"]\n  },\n  \"application/vnd.3gpp-prose+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp-prose-pc3ch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp-v2x-local-service-information\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.5gnas\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.access-transfer-events+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.bsf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.gmop+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.gtpc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.interworking-data\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.lpp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mc-signalling-ear\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mcdata-affiliation-command+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-payload\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mcdata-service-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-signalling\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mcdata-ue-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-user-profile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-affiliation-command+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-floor-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-location-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-mbms-usage-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-service-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-signed+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-ue-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-ue-init-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-user-profile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-affiliation-command+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-affiliation-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-location-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-service-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-transmission-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-ue-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-user-profile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mid-call+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.ngap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.pfcp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.pic-bw-large\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"plb\"]\n  },\n  \"application/vnd.3gpp.pic-bw-small\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"psb\"]\n  },\n  \"application/vnd.3gpp.pic-bw-var\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pvb\"]\n  },\n  \"application/vnd.3gpp.s1ap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.sms\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.sms+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.srvcc-ext+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.srvcc-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.state-and-event-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.ussd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp2.bcmcsinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp2.sms\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp2.tcap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tcap\"]\n  },\n  \"application/vnd.3lightssoftware.imagescal\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3m.post-it-notes\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pwn\"]\n  },\n  \"application/vnd.accpac.simply.aso\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"aso\"]\n  },\n  \"application/vnd.accpac.simply.imp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"imp\"]\n  },\n  \"application/vnd.acucobol\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"acu\"]\n  },\n  \"application/vnd.acucorp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"atc\",\"acutc\"]\n  },\n  \"application/vnd.adobe.air-application-installer-package+zip\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"air\"]\n  },\n  \"application/vnd.adobe.flash.movie\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.adobe.formscentral.fcdt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fcdt\"]\n  },\n  \"application/vnd.adobe.fxp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fxp\",\"fxpl\"]\n  },\n  \"application/vnd.adobe.partial-upload\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.adobe.xdp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xdp\"]\n  },\n  \"application/vnd.adobe.xfdf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xfdf\"]\n  },\n  \"application/vnd.aether.imp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.afplinedata\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.afplinedata-pagedef\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.cmoca-cmresource\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.foca-charset\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.foca-codedfont\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.foca-codepage\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-cmtable\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-formdef\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-mediummap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-objectcontainer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-overlay\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-pagesegment\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.age\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"age\"]\n  },\n  \"application/vnd.ah-barcode\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ahead.space\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ahead\"]\n  },\n  \"application/vnd.airzip.filesecure.azf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"azf\"]\n  },\n  \"application/vnd.airzip.filesecure.azs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"azs\"]\n  },\n  \"application/vnd.amadeus+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.amazon.ebook\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"azw\"]\n  },\n  \"application/vnd.amazon.mobi8-ebook\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.americandynamics.acc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"acc\"]\n  },\n  \"application/vnd.amiga.ami\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ami\"]\n  },\n  \"application/vnd.amundsen.maze+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.android.ota\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.android.package-archive\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"apk\"]\n  },\n  \"application/vnd.anki\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.anser-web-certificate-issue-initiation\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cii\"]\n  },\n  \"application/vnd.anser-web-funds-transfer-initiation\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fti\"]\n  },\n  \"application/vnd.antix.game-component\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"atx\"]\n  },\n  \"application/vnd.apache.arrow.file\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.arrow.stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.thrift.binary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.thrift.compact\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.thrift.json\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.api+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.aplextor.warrp+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.apothekende.reservation+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.apple.installer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpkg\"]\n  },\n  \"application/vnd.apple.keynote\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"key\"]\n  },\n  \"application/vnd.apple.mpegurl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"m3u8\"]\n  },\n  \"application/vnd.apple.numbers\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"numbers\"]\n  },\n  \"application/vnd.apple.pages\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pages\"]\n  },\n  \"application/vnd.apple.pkpass\": {\n    \"compressible\": false,\n    \"extensions\": [\"pkpass\"]\n  },\n  \"application/vnd.arastra.swi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.aristanetworks.swi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"swi\"]\n  },\n  \"application/vnd.artisan+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.artsquare\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.astraea-software.iota\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"iota\"]\n  },\n  \"application/vnd.audiograph\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"aep\"]\n  },\n  \"application/vnd.autopackage\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.avalon+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.avistar+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.balsamiq.bmml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"bmml\"]\n  },\n  \"application/vnd.balsamiq.bmpr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.banana-accounting\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bbf.usp.error\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bbf.usp.msg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bbf.usp.msg+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.bekitzur-stech+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.bint.med-content\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.biopax.rdf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.blink-idb-value-wrapper\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.blueice.multipass\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpm\"]\n  },\n  \"application/vnd.bluetooth.ep.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bluetooth.le.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bmi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bmi\"]\n  },\n  \"application/vnd.bpf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bpf3\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.businessobjects\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rep\"]\n  },\n  \"application/vnd.byu.uapi+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cab-jscript\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.canon-cpdl\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.canon-lips\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.capasystems-pg+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cendio.thinlinc.clientconf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.century-systems.tcp_stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.chemdraw+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"cdxml\"]\n  },\n  \"application/vnd.chess-pgn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.chipnuts.karaoke-mmd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mmd\"]\n  },\n  \"application/vnd.ciedi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cinderella\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdy\"]\n  },\n  \"application/vnd.cirpack.isdn-ext\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.citationstyles.style+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"csl\"]\n  },\n  \"application/vnd.claymore\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cla\"]\n  },\n  \"application/vnd.cloanto.rp9\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rp9\"]\n  },\n  \"application/vnd.clonk.c4group\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"]\n  },\n  \"application/vnd.cluetrust.cartomobile-config\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"c11amc\"]\n  },\n  \"application/vnd.cluetrust.cartomobile-config-pkg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"c11amz\"]\n  },\n  \"application/vnd.coffeescript\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.document\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.document-template\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.presentation\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.presentation-template\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.spreadsheet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.spreadsheet-template\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collection+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.collection.doc+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.collection.next+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.comicbook+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.comicbook-rar\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.commerce-battelle\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.commonspace\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"csp\"]\n  },\n  \"application/vnd.contact.cmsg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdbcmsg\"]\n  },\n  \"application/vnd.coreos.ignition+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cosmocaller\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cmc\"]\n  },\n  \"application/vnd.crick.clicker\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkx\"]\n  },\n  \"application/vnd.crick.clicker.keyboard\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkk\"]\n  },\n  \"application/vnd.crick.clicker.palette\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkp\"]\n  },\n  \"application/vnd.crick.clicker.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkt\"]\n  },\n  \"application/vnd.crick.clicker.wordbank\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkw\"]\n  },\n  \"application/vnd.criticaltools.wbs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wbs\"]\n  },\n  \"application/vnd.cryptii.pipe+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.crypto-shade-file\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cryptomator.encrypted\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cryptomator.vault\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ctc-posml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pml\"]\n  },\n  \"application/vnd.ctct.ws+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cups-pdf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cups-postscript\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cups-ppd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppd\"]\n  },\n  \"application/vnd.cups-raster\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cups-raw\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.curl\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.curl.car\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"car\"]\n  },\n  \"application/vnd.curl.pcurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pcurl\"]\n  },\n  \"application/vnd.cyan.dean.root+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cybank\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cyclonedx+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cyclonedx+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.d2l.coursepackage1p0+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.d3m-dataset\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.d3m-problem\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dart\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dart\"]\n  },\n  \"application/vnd.data-vision.rdz\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rdz\"]\n  },\n  \"application/vnd.datapackage+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dataresource+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dbf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dbf\"]\n  },\n  \"application/vnd.debian.binary-package\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dece.data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"]\n  },\n  \"application/vnd.dece.ttml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"uvt\",\"uvvt\"]\n  },\n  \"application/vnd.dece.unspecified\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvx\",\"uvvx\"]\n  },\n  \"application/vnd.dece.zip\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvz\",\"uvvz\"]\n  },\n  \"application/vnd.denovo.fcselayout-link\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fe_launch\"]\n  },\n  \"application/vnd.desmume.movie\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dir-bi.plate-dl-nosuffix\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dm.delegation+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dna\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dna\"]\n  },\n  \"application/vnd.document+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dolby.mlp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mlp\"]\n  },\n  \"application/vnd.dolby.mobile.1\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dolby.mobile.2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.doremir.scorecloud-binary-document\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dpgraph\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dpg\"]\n  },\n  \"application/vnd.dreamfactory\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dfac\"]\n  },\n  \"application/vnd.drive+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ds-keypoint\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"kpxx\"]\n  },\n  \"application/vnd.dtg.local\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dtg.local.flash\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dtg.local.html\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ait\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ait\"]\n  },\n  \"application/vnd.dvb.dvbisl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.dvbj\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.esgcontainer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcdftnotifaccess\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcesgaccess\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcesgaccess2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcesgpdd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcroaming\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.iptv.alfec-base\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.iptv.alfec-enhancement\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.notif-aggregate-root+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-container+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-generic+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-ia-msglist+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-ia-registration-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-ia-registration-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-init+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.pfr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.service\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"svc\"]\n  },\n  \"application/vnd.dxr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dynageo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"geo\"]\n  },\n  \"application/vnd.dzr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.easykaraoke.cdgdownload\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecdis-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecip.rlp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.eclipse.ditto+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ecowin.chart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mag\"]\n  },\n  \"application/vnd.ecowin.filerequest\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.fileupdate\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.series\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.seriesrequest\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.seriesupdate\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.efi.img\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.efi.iso\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.emclient.accessrequest+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.enliven\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nml\"]\n  },\n  \"application/vnd.enphase.envoy\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.eprints.data+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.epson.esf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"esf\"]\n  },\n  \"application/vnd.epson.msf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"msf\"]\n  },\n  \"application/vnd.epson.quickanime\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qam\"]\n  },\n  \"application/vnd.epson.salt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"slt\"]\n  },\n  \"application/vnd.epson.ssf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ssf\"]\n  },\n  \"application/vnd.ericsson.quickcall\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.espass-espass+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.eszigno3+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"es3\",\"et3\"]\n  },\n  \"application/vnd.etsi.aoc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.asic-e+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.etsi.asic-s+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.etsi.cug+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvcommand+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvdiscovery+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsad-bc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsad-cod+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsad-npvr+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvservice+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsync+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvueprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.mcid+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.mheg5\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.etsi.overload-control-policy-dataset+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.pstn+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.sci+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.simservs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.timestamp-token\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.etsi.tsl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.tsl.der\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.eu.kasparian.car+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.eudora.data\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.evolv.ecig.profile\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.evolv.ecig.settings\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.evolv.ecig.theme\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.exstream-empower+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.exstream-package\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ezpix-album\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ez2\"]\n  },\n  \"application/vnd.ezpix-package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ez3\"]\n  },\n  \"application/vnd.f-secure.mobile\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.familysearch.gedcom+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.fastcopy-disk-image\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fdf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fdf\"]\n  },\n  \"application/vnd.fdsn.mseed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mseed\"]\n  },\n  \"application/vnd.fdsn.seed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"seed\",\"dataless\"]\n  },\n  \"application/vnd.ffsns\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ficlab.flb+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.filmit.zfc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fints\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.firemonkeys.cloudcell\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.flographit\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gph\"]\n  },\n  \"application/vnd.fluxtime.clip\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ftc\"]\n  },\n  \"application/vnd.font-fontforge-sfd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.framemaker\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fm\",\"frame\",\"maker\",\"book\"]\n  },\n  \"application/vnd.frogans.fnc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fnc\"]\n  },\n  \"application/vnd.frogans.ltf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ltf\"]\n  },\n  \"application/vnd.fsc.weblaunch\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fsc\"]\n  },\n  \"application/vnd.fujifilm.fb.docuworks\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujifilm.fb.docuworks.binder\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujifilm.fb.docuworks.container\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujifilm.fb.jfi+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.fujitsu.oasys\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oas\"]\n  },\n  \"application/vnd.fujitsu.oasys2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oa2\"]\n  },\n  \"application/vnd.fujitsu.oasys3\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oa3\"]\n  },\n  \"application/vnd.fujitsu.oasysgp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fg5\"]\n  },\n  \"application/vnd.fujitsu.oasysprs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bh2\"]\n  },\n  \"application/vnd.fujixerox.art-ex\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujixerox.art4\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujixerox.ddd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ddd\"]\n  },\n  \"application/vnd.fujixerox.docuworks\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xdw\"]\n  },\n  \"application/vnd.fujixerox.docuworks.binder\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xbd\"]\n  },\n  \"application/vnd.fujixerox.docuworks.container\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujixerox.hbpl\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fut-misnet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.futoin+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.futoin+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.fuzzysheet\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fzs\"]\n  },\n  \"application/vnd.genomatix.tuxedo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"txd\"]\n  },\n  \"application/vnd.gentics.grd+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.geo+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.geocube+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.geogebra.file\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ggb\"]\n  },\n  \"application/vnd.geogebra.slides\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.geogebra.tool\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ggt\"]\n  },\n  \"application/vnd.geometry-explorer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gex\",\"gre\"]\n  },\n  \"application/vnd.geonext\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gxt\"]\n  },\n  \"application/vnd.geoplan\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"g2w\"]\n  },\n  \"application/vnd.geospace\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"g3w\"]\n  },\n  \"application/vnd.gerber\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.globalplatform.card-content-mgt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.globalplatform.card-content-mgt-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.gmx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gmx\"]\n  },\n  \"application/vnd.google-apps.document\": {\n    \"compressible\": false,\n    \"extensions\": [\"gdoc\"]\n  },\n  \"application/vnd.google-apps.presentation\": {\n    \"compressible\": false,\n    \"extensions\": [\"gslides\"]\n  },\n  \"application/vnd.google-apps.spreadsheet\": {\n    \"compressible\": false,\n    \"extensions\": [\"gsheet\"]\n  },\n  \"application/vnd.google-earth.kml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"kml\"]\n  },\n  \"application/vnd.google-earth.kmz\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"kmz\"]\n  },\n  \"application/vnd.gov.sk.e-form+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.gov.sk.e-form+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.gov.sk.xmldatacontainer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.grafeq\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gqf\",\"gqs\"]\n  },\n  \"application/vnd.gridmp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.groove-account\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gac\"]\n  },\n  \"application/vnd.groove-help\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ghf\"]\n  },\n  \"application/vnd.groove-identity-message\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gim\"]\n  },\n  \"application/vnd.groove-injector\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"grv\"]\n  },\n  \"application/vnd.groove-tool-message\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gtm\"]\n  },\n  \"application/vnd.groove-tool-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tpl\"]\n  },\n  \"application/vnd.groove-vcard\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vcg\"]\n  },\n  \"application/vnd.hal+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hal+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"hal\"]\n  },\n  \"application/vnd.handheld-entertainment+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"zmm\"]\n  },\n  \"application/vnd.hbci\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hbci\"]\n  },\n  \"application/vnd.hc+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hcl-bireports\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.hdt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.heroku+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hhe.lesson-player\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"les\"]\n  },\n  \"application/vnd.hl7cda+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.hl7v2+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.hp-hpgl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hpgl\"]\n  },\n  \"application/vnd.hp-hpid\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hpid\"]\n  },\n  \"application/vnd.hp-hps\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hps\"]\n  },\n  \"application/vnd.hp-jlyt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jlt\"]\n  },\n  \"application/vnd.hp-pcl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pcl\"]\n  },\n  \"application/vnd.hp-pclxl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pclxl\"]\n  },\n  \"application/vnd.httphone\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.hydrostatix.sof-data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sfd-hdstx\"]\n  },\n  \"application/vnd.hyper+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hyper-item+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hyperdrive+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hzn-3d-crossword\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ibm.afplinedata\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ibm.electronic-media\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ibm.minipay\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpy\"]\n  },\n  \"application/vnd.ibm.modcap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"afp\",\"listafp\",\"list3820\"]\n  },\n  \"application/vnd.ibm.rights-management\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"irm\"]\n  },\n  \"application/vnd.ibm.secure-container\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sc\"]\n  },\n  \"application/vnd.iccprofile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"icc\",\"icm\"]\n  },\n  \"application/vnd.ieee.1905\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.igloader\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"igl\"]\n  },\n  \"application/vnd.imagemeter.folder+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.imagemeter.image+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.immervision-ivp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ivp\"]\n  },\n  \"application/vnd.immervision-ivu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ivu\"]\n  },\n  \"application/vnd.ims.imsccv1p1\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ims.imsccv1p2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ims.imsccv1p3\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ims.lis.v2.result+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolconsumerprofile+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolproxy+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolproxy.id+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolsettings+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolsettings.simple+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.informedcontrol.rms+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.informix-visionary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.infotech.project\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.infotech.project+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.innopath.wamp.notification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.insors.igm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"igm\"]\n  },\n  \"application/vnd.intercon.formnet\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xpw\",\"xpx\"]\n  },\n  \"application/vnd.intergeo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"i2g\"]\n  },\n  \"application/vnd.intertrust.digibox\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.intertrust.nncp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.intu.qbo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qbo\"]\n  },\n  \"application/vnd.intu.qfx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qfx\"]\n  },\n  \"application/vnd.iptc.g2.catalogitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.conceptitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.knowledgeitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.newsitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.newsmessage+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.packageitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.planningitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ipunplugged.rcprofile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rcprofile\"]\n  },\n  \"application/vnd.irepository.package+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"irp\"]\n  },\n  \"application/vnd.is-xpr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xpr\"]\n  },\n  \"application/vnd.isac.fcs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fcs\"]\n  },\n  \"application/vnd.iso11783-10+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.jam\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jam\"]\n  },\n  \"application/vnd.japannet-directory-service\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-jpnstore-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-payment-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-registration\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-registration-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-setstore-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-verification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-verification-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.jcp.javame.midlet-rms\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rms\"]\n  },\n  \"application/vnd.jisp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jisp\"]\n  },\n  \"application/vnd.joost.joda-archive\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"joda\"]\n  },\n  \"application/vnd.jsk.isdn-ngn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.kahootz\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ktz\",\"ktr\"]\n  },\n  \"application/vnd.kde.karbon\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"karbon\"]\n  },\n  \"application/vnd.kde.kchart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"chrt\"]\n  },\n  \"application/vnd.kde.kformula\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kfo\"]\n  },\n  \"application/vnd.kde.kivio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"flw\"]\n  },\n  \"application/vnd.kde.kontour\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kon\"]\n  },\n  \"application/vnd.kde.kpresenter\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kpr\",\"kpt\"]\n  },\n  \"application/vnd.kde.kspread\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ksp\"]\n  },\n  \"application/vnd.kde.kword\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kwd\",\"kwt\"]\n  },\n  \"application/vnd.kenameaapp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"htke\"]\n  },\n  \"application/vnd.kidspiration\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kia\"]\n  },\n  \"application/vnd.kinar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kne\",\"knp\"]\n  },\n  \"application/vnd.koan\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"skp\",\"skd\",\"skt\",\"skm\"]\n  },\n  \"application/vnd.kodak-descriptor\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sse\"]\n  },\n  \"application/vnd.las\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.las.las+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.las.las+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lasxml\"]\n  },\n  \"application/vnd.laszip\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.leap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.liberty-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.llamagraphics.life-balance.desktop\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lbd\"]\n  },\n  \"application/vnd.llamagraphics.life-balance.exchange+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lbe\"]\n  },\n  \"application/vnd.logipipe.circuit+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.loom\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.lotus-1-2-3\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"123\"]\n  },\n  \"application/vnd.lotus-approach\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"apr\"]\n  },\n  \"application/vnd.lotus-freelance\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pre\"]\n  },\n  \"application/vnd.lotus-notes\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nsf\"]\n  },\n  \"application/vnd.lotus-organizer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"org\"]\n  },\n  \"application/vnd.lotus-screencam\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"scm\"]\n  },\n  \"application/vnd.lotus-wordpro\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lwp\"]\n  },\n  \"application/vnd.macports.portpkg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"portpkg\"]\n  },\n  \"application/vnd.mapbox-vector-tile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mvt\"]\n  },\n  \"application/vnd.marlin.drm.actiontoken+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.marlin.drm.conftoken+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.marlin.drm.license+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.marlin.drm.mdcf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mason+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.maxar.archive.3tz+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.maxmind.maxmind-db\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mcd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mcd\"]\n  },\n  \"application/vnd.medcalcdata\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mc1\"]\n  },\n  \"application/vnd.mediastation.cdkey\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdkey\"]\n  },\n  \"application/vnd.meridian-slingshot\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mfer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mwf\"]\n  },\n  \"application/vnd.mfmp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mfm\"]\n  },\n  \"application/vnd.micro+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.micrografx.flo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"flo\"]\n  },\n  \"application/vnd.micrografx.igx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"igx\"]\n  },\n  \"application/vnd.microsoft.portable-executable\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.microsoft.windows.thumbnail-cache\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.miele+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.mif\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mif\"]\n  },\n  \"application/vnd.minisoft-hp3000-save\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mitsubishi.misty-guard.trustweb\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mobius.daf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"daf\"]\n  },\n  \"application/vnd.mobius.dis\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dis\"]\n  },\n  \"application/vnd.mobius.mbk\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mbk\"]\n  },\n  \"application/vnd.mobius.mqy\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mqy\"]\n  },\n  \"application/vnd.mobius.msl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"msl\"]\n  },\n  \"application/vnd.mobius.plc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"plc\"]\n  },\n  \"application/vnd.mobius.txf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"txf\"]\n  },\n  \"application/vnd.mophun.application\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpn\"]\n  },\n  \"application/vnd.mophun.certificate\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpc\"]\n  },\n  \"application/vnd.motorola.flexsuite\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.adsi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.fis\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.gotap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.kmr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.ttc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.wem\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.iprm\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mozilla.xul+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xul\"]\n  },\n  \"application/vnd.ms-3mfdocument\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-artgalry\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cil\"]\n  },\n  \"application/vnd.ms-asf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-cab-compressed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cab\"]\n  },\n  \"application/vnd.ms-color.iccprofile\": {\n    \"source\": \"apache\"\n  },\n  \"application/vnd.ms-excel\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"]\n  },\n  \"application/vnd.ms-excel.addin.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xlam\"]\n  },\n  \"application/vnd.ms-excel.sheet.binary.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xlsb\"]\n  },\n  \"application/vnd.ms-excel.sheet.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xlsm\"]\n  },\n  \"application/vnd.ms-excel.template.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xltm\"]\n  },\n  \"application/vnd.ms-fontobject\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"eot\"]\n  },\n  \"application/vnd.ms-htmlhelp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"chm\"]\n  },\n  \"application/vnd.ms-ims\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ims\"]\n  },\n  \"application/vnd.ms-lrm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lrm\"]\n  },\n  \"application/vnd.ms-office.activex+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-officetheme\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"thmx\"]\n  },\n  \"application/vnd.ms-opentype\": {\n    \"source\": \"apache\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-outlook\": {\n    \"compressible\": false,\n    \"extensions\": [\"msg\"]\n  },\n  \"application/vnd.ms-package.obfuscated-opentype\": {\n    \"source\": \"apache\"\n  },\n  \"application/vnd.ms-pki.seccat\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cat\"]\n  },\n  \"application/vnd.ms-pki.stl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"stl\"]\n  },\n  \"application/vnd.ms-playready.initiator+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-powerpoint\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ppt\",\"pps\",\"pot\"]\n  },\n  \"application/vnd.ms-powerpoint.addin.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppam\"]\n  },\n  \"application/vnd.ms-powerpoint.presentation.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pptm\"]\n  },\n  \"application/vnd.ms-powerpoint.slide.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sldm\"]\n  },\n  \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppsm\"]\n  },\n  \"application/vnd.ms-powerpoint.template.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"potm\"]\n  },\n  \"application/vnd.ms-printdevicecapabilities+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-printing.printticket+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-printschematicket+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-project\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpp\",\"mpt\"]\n  },\n  \"application/vnd.ms-tnef\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.devicepairing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.nwprinting.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.printerpairing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.wsd.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.lic-chlg-req\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.lic-resp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.meter-chlg-req\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.meter-resp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-word.document.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"docm\"]\n  },\n  \"application/vnd.ms-word.template.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dotm\"]\n  },\n  \"application/vnd.ms-works\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wps\",\"wks\",\"wcm\",\"wdb\"]\n  },\n  \"application/vnd.ms-wpl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wpl\"]\n  },\n  \"application/vnd.ms-xpsdocument\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"xps\"]\n  },\n  \"application/vnd.msa-disk-image\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mseq\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mseq\"]\n  },\n  \"application/vnd.msign\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.multiad.creator\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.multiad.creator.cif\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.music-niff\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.musician\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mus\"]\n  },\n  \"application/vnd.muvee.style\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"msty\"]\n  },\n  \"application/vnd.mynfc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"taglet\"]\n  },\n  \"application/vnd.nacamar.ybrid+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ncd.control\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ncd.reference\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nearst.inv+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nebumind.line\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nervana\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.netfpx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.neurolanguage.nlu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nlu\"]\n  },\n  \"application/vnd.nimn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nintendo.nitro.rom\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nintendo.snes.rom\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nitf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ntf\",\"nitf\"]\n  },\n  \"application/vnd.noblenet-directory\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nnd\"]\n  },\n  \"application/vnd.noblenet-sealer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nns\"]\n  },\n  \"application/vnd.noblenet-web\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nnw\"]\n  },\n  \"application/vnd.nokia.catalogs\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.conml+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.conml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.iptv.config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.isds-radio-presets\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.landmark+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.landmark+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.landmarkcollection+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.n-gage.ac+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ac\"]\n  },\n  \"application/vnd.nokia.n-gage.data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ngdat\"]\n  },\n  \"application/vnd.nokia.n-gage.symbian.install\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"n-gage\"]\n  },\n  \"application/vnd.nokia.ncd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.pcd+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.pcd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.radio-preset\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rpst\"]\n  },\n  \"application/vnd.nokia.radio-presets\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rpss\"]\n  },\n  \"application/vnd.novadigm.edm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"edm\"]\n  },\n  \"application/vnd.novadigm.edx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"edx\"]\n  },\n  \"application/vnd.novadigm.ext\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ext\"]\n  },\n  \"application/vnd.ntt-local.content-share\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.file-transfer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.ogw_remote-access\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.sip-ta_remote\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oasis.opendocument.chart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odc\"]\n  },\n  \"application/vnd.oasis.opendocument.chart-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"otc\"]\n  },\n  \"application/vnd.oasis.opendocument.database\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odb\"]\n  },\n  \"application/vnd.oasis.opendocument.formula\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odf\"]\n  },\n  \"application/vnd.oasis.opendocument.formula-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odft\"]\n  },\n  \"application/vnd.oasis.opendocument.graphics\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"odg\"]\n  },\n  \"application/vnd.oasis.opendocument.graphics-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"otg\"]\n  },\n  \"application/vnd.oasis.opendocument.image\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odi\"]\n  },\n  \"application/vnd.oasis.opendocument.image-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oti\"]\n  },\n  \"application/vnd.oasis.opendocument.presentation\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"odp\"]\n  },\n  \"application/vnd.oasis.opendocument.presentation-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"otp\"]\n  },\n  \"application/vnd.oasis.opendocument.spreadsheet\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ods\"]\n  },\n  \"application/vnd.oasis.opendocument.spreadsheet-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ots\"]\n  },\n  \"application/vnd.oasis.opendocument.text\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"odt\"]\n  },\n  \"application/vnd.oasis.opendocument.text-master\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odm\"]\n  },\n  \"application/vnd.oasis.opendocument.text-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ott\"]\n  },\n  \"application/vnd.oasis.opendocument.text-web\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oth\"]\n  },\n  \"application/vnd.obn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ocf+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oci.image.manifest.v1+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oftn.l10n+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.contentaccessdownload+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.contentaccessstreaming+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.cspg-hexbinary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oipf.dae.svg+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.dae.xhtml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.mippvcontrolmessage+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.pae.gem\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oipf.spdiscovery+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.spdlist+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.ueprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.userprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.olpc-sugar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xo\"]\n  },\n  \"application/vnd.oma-scws-config\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma-scws-http-request\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma-scws-http-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.associated-procedure-parameter+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.drm-trigger+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.imd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.ltkm\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.notification+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.provisioningtrigger\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.sgboot\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.sgdd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.sgdu\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.simple-symbol-container\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.smartcard-trigger+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.sprov+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.stkm\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.cab-address-book+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-feature-handler+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-pcc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-subs-invite+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-user-prefs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.dcd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.dcdc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.dd2+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dd2\"]\n  },\n  \"application/vnd.oma.drm.risd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.group-usage-list+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.lwm2m+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.lwm2m+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.lwm2m+tlv\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.pal+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.detailed-progress-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.final-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.groups+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.invocation-descriptor+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.optimized-progress-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.push\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.scidm.messages+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.xcap-directory+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.omads-email+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.omads-file+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.omads-folder+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.omaloc-supl-init\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepager\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertamp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertamx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertat\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertatp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertatx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openblox.game+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"obgx\"]\n  },\n  \"application/vnd.openblox.game-binary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openeye.oeb\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openofficeorg.extension\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"oxt\"]\n  },\n  \"application/vnd.openstreetmap.data+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"osm\"]\n  },\n  \"application/vnd.opentimestamps.ots\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openxmlformats-officedocument.custom-properties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawing+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.extended-properties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"pptx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slide\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sldx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppsx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"potx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"xlsx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xltx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.theme+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.themeoverride+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.vmldrawing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"docx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dotx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-package.core-properties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-package.relationships+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oracle.resource+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.orange.indata\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.osa.netdeploy\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.osgeo.mapguide.package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mgp\"]\n  },\n  \"application/vnd.osgi.bundle\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.osgi.dp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dp\"]\n  },\n  \"application/vnd.osgi.subsystem\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"esa\"]\n  },\n  \"application/vnd.otps.ct-kip+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oxli.countgraph\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pagerduty+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.palm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pdb\",\"pqa\",\"oprc\"]\n  },\n  \"application/vnd.panoply\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.paos.xml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.patentdive\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.patientecommsdoc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pawaafile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"paw\"]\n  },\n  \"application/vnd.pcos\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pg.format\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"str\"]\n  },\n  \"application/vnd.pg.osasli\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ei6\"]\n  },\n  \"application/vnd.piaccess.application-licence\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.picsel\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"efif\"]\n  },\n  \"application/vnd.pmi.widget\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wg\"]\n  },\n  \"application/vnd.poc.group-advertisement+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.pocketlearn\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"plf\"]\n  },\n  \"application/vnd.powerbuilder6\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pbd\"]\n  },\n  \"application/vnd.powerbuilder6-s\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder7\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder7-s\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder75\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder75-s\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.preminet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.previewsystems.box\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"box\"]\n  },\n  \"application/vnd.proteus.magazine\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mgz\"]\n  },\n  \"application/vnd.psfs\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.publishare-delta-tree\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qps\"]\n  },\n  \"application/vnd.pvi.ptid1\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ptid\"]\n  },\n  \"application/vnd.pwg-multiplexed\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pwg-xhtml-print+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.qualcomm.brew-app-res\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.quarantainenet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.quark.quarkxpress\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"]\n  },\n  \"application/vnd.quobject-quoxdocument\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.radisys.moml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-conf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-conn+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-dialog+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-stream+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-conf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-base+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-fax-detect+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-group+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-speech+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-transform+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.rainstor.data\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.rapid\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.rar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rar\"]\n  },\n  \"application/vnd.realvnc.bed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bed\"]\n  },\n  \"application/vnd.recordare.musicxml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxl\"]\n  },\n  \"application/vnd.recordare.musicxml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"musicxml\"]\n  },\n  \"application/vnd.renlearn.rlprint\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.resilient.logic\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.restful+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.rig.cryptonote\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cryptonote\"]\n  },\n  \"application/vnd.rim.cod\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cod\"]\n  },\n  \"application/vnd.rn-realmedia\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rm\"]\n  },\n  \"application/vnd.rn-realmedia-vbr\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rmvb\"]\n  },\n  \"application/vnd.route66.link66+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"link66\"]\n  },\n  \"application/vnd.rs-274x\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ruckus.download\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.s3sms\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sailingtracker.track\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"st\"]\n  },\n  \"application/vnd.sar\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sbm.cid\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sbm.mid2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.scribus\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.3df\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.csf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.doc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.eml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.mht\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.net\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.ppt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.tiff\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.xls\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealedmedia.softseal.html\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealedmedia.softseal.pdf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.seemail\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"see\"]\n  },\n  \"application/vnd.seis+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.sema\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sema\"]\n  },\n  \"application/vnd.semd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"semd\"]\n  },\n  \"application/vnd.semf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"semf\"]\n  },\n  \"application/vnd.shade-save-file\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.shana.informed.formdata\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ifm\"]\n  },\n  \"application/vnd.shana.informed.formtemplate\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"itp\"]\n  },\n  \"application/vnd.shana.informed.interchange\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"iif\"]\n  },\n  \"application/vnd.shana.informed.package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ipk\"]\n  },\n  \"application/vnd.shootproof+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.shopkick+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.shp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.shx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sigrok.session\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.simtech-mindmapper\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"twd\",\"twds\"]\n  },\n  \"application/vnd.siren+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.smaf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mmf\"]\n  },\n  \"application/vnd.smart.notebook\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.smart.teacher\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"teacher\"]\n  },\n  \"application/vnd.snesdev-page-table\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.software602.filler.form+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"fo\"]\n  },\n  \"application/vnd.software602.filler.form-xml-zip\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.solent.sdkm+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sdkm\",\"sdkd\"]\n  },\n  \"application/vnd.spotfire.dxp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dxp\"]\n  },\n  \"application/vnd.spotfire.sfs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sfs\"]\n  },\n  \"application/vnd.sqlite3\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sss-cod\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sss-dtf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sss-ntf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.stardivision.calc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sdc\"]\n  },\n  \"application/vnd.stardivision.draw\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sda\"]\n  },\n  \"application/vnd.stardivision.impress\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sdd\"]\n  },\n  \"application/vnd.stardivision.math\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"smf\"]\n  },\n  \"application/vnd.stardivision.writer\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sdw\",\"vor\"]\n  },\n  \"application/vnd.stardivision.writer-global\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sgl\"]\n  },\n  \"application/vnd.stepmania.package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"smzip\"]\n  },\n  \"application/vnd.stepmania.stepchart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sm\"]\n  },\n  \"application/vnd.street-stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sun.wadl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wadl\"]\n  },\n  \"application/vnd.sun.xml.calc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxc\"]\n  },\n  \"application/vnd.sun.xml.calc.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"stc\"]\n  },\n  \"application/vnd.sun.xml.draw\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxd\"]\n  },\n  \"application/vnd.sun.xml.draw.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"std\"]\n  },\n  \"application/vnd.sun.xml.impress\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxi\"]\n  },\n  \"application/vnd.sun.xml.impress.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sti\"]\n  },\n  \"application/vnd.sun.xml.math\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxm\"]\n  },\n  \"application/vnd.sun.xml.writer\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxw\"]\n  },\n  \"application/vnd.sun.xml.writer.global\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxg\"]\n  },\n  \"application/vnd.sun.xml.writer.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"stw\"]\n  },\n  \"application/vnd.sus-calendar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sus\",\"susp\"]\n  },\n  \"application/vnd.svd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"svd\"]\n  },\n  \"application/vnd.swiftview-ics\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sycle+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.syft+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.symbian.install\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sis\",\"sisx\"]\n  },\n  \"application/vnd.syncml+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"xsm\"]\n  },\n  \"application/vnd.syncml.dm+wbxml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"bdm\"]\n  },\n  \"application/vnd.syncml.dm+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"xdm\"]\n  },\n  \"application/vnd.syncml.dm.notification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.syncml.dmddf+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.syncml.dmddf+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"ddf\"]\n  },\n  \"application/vnd.syncml.dmtnds+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.syncml.dmtnds+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.syncml.ds.notification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.tableschema+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.tao.intent-module-archive\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tao\"]\n  },\n  \"application/vnd.tcpdump.pcap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pcap\",\"cap\",\"dmp\"]\n  },\n  \"application/vnd.think-cell.ppttc+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.tmd.mediaflex.api+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.tml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.tmobile-livetv\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tmo\"]\n  },\n  \"application/vnd.tri.onesource\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.trid.tpt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tpt\"]\n  },\n  \"application/vnd.triscape.mxs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxs\"]\n  },\n  \"application/vnd.trueapp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tra\"]\n  },\n  \"application/vnd.truedoc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ubisoft.webplayer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ufdl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ufd\",\"ufdl\"]\n  },\n  \"application/vnd.uiq.theme\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"utz\"]\n  },\n  \"application/vnd.umajin\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"umj\"]\n  },\n  \"application/vnd.unity\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"unityweb\"]\n  },\n  \"application/vnd.uoml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"uoml\"]\n  },\n  \"application/vnd.uplanet.alert\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.alert-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.bearer-choice\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.bearer-choice-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.cacheop\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.cacheop-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.channel\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.channel-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.list\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.list-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.listcmd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.listcmd-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.signal\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uri-map\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.valve.source.material\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vcx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vcx\"]\n  },\n  \"application/vnd.vd-study\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vectorworks\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vel+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.verimatrix.vcas\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.veritone.aion+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.veryant.thin\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ves.encrypted\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vidsoft.vidconference\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.visio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vsd\",\"vst\",\"vss\",\"vsw\"]\n  },\n  \"application/vnd.visionary\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vis\"]\n  },\n  \"application/vnd.vividence.scriptfile\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vsf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vsf\"]\n  },\n  \"application/vnd.wap.sic\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wap.slc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wap.wbxml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"wbxml\"]\n  },\n  \"application/vnd.wap.wmlc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmlc\"]\n  },\n  \"application/vnd.wap.wmlscriptc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmlsc\"]\n  },\n  \"application/vnd.webturbo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wtb\"]\n  },\n  \"application/vnd.wfa.dpp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wfa.p2p\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wfa.wsc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.windows.devicepairing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wmc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wmf.bootstrap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wolfram.mathematica\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wolfram.mathematica.package\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wolfram.player\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nbp\"]\n  },\n  \"application/vnd.wordperfect\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wpd\"]\n  },\n  \"application/vnd.wqd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wqd\"]\n  },\n  \"application/vnd.wrq-hp3000-labelled\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wt.stf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"stf\"]\n  },\n  \"application/vnd.wv.csp+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wv.csp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.wv.ssp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.xacml+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.xara\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xar\"]\n  },\n  \"application/vnd.xfdl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xfdl\"]\n  },\n  \"application/vnd.xfdl.webform\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmi+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.xmpie.cpkg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.dpkg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.plan\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.ppkg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.xlim\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yamaha.hv-dic\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hvd\"]\n  },\n  \"application/vnd.yamaha.hv-script\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hvs\"]\n  },\n  \"application/vnd.yamaha.hv-voice\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hvp\"]\n  },\n  \"application/vnd.yamaha.openscoreformat\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"osf\"]\n  },\n  \"application/vnd.yamaha.openscoreformat.osfpvg+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"osfpvg\"]\n  },\n  \"application/vnd.yamaha.remote-setup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yamaha.smaf-audio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"saf\"]\n  },\n  \"application/vnd.yamaha.smaf-phrase\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spf\"]\n  },\n  \"application/vnd.yamaha.through-ngn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yamaha.tunnel-udpencap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yaoweme\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yellowriver-custom-menu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cmp\"]\n  },\n  \"application/vnd.youtube.yt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.zul\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"zir\",\"zirz\"]\n  },\n  \"application/vnd.zzazz.deck+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"zaz\"]\n  },\n  \"application/voicexml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"vxml\"]\n  },\n  \"application/voucher-cms+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vq-rtcpxr\": {\n    \"source\": \"iana\"\n  },\n  \"application/wasm\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wasm\"]\n  },\n  \"application/watcherinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wif\"]\n  },\n  \"application/webpush-options+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/whoispp-query\": {\n    \"source\": \"iana\"\n  },\n  \"application/whoispp-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/widget\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wgt\"]\n  },\n  \"application/winhlp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"hlp\"]\n  },\n  \"application/wita\": {\n    \"source\": \"iana\"\n  },\n  \"application/wordperfect5.1\": {\n    \"source\": \"iana\"\n  },\n  \"application/wsdl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wsdl\"]\n  },\n  \"application/wspolicy+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wspolicy\"]\n  },\n  \"application/x-7z-compressed\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"7z\"]\n  },\n  \"application/x-abiword\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"abw\"]\n  },\n  \"application/x-ace-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ace\"]\n  },\n  \"application/x-amf\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-apple-diskimage\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dmg\"]\n  },\n  \"application/x-arj\": {\n    \"compressible\": false,\n    \"extensions\": [\"arj\"]\n  },\n  \"application/x-authorware-bin\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aab\",\"x32\",\"u32\",\"vox\"]\n  },\n  \"application/x-authorware-map\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aam\"]\n  },\n  \"application/x-authorware-seg\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aas\"]\n  },\n  \"application/x-bcpio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"bcpio\"]\n  },\n  \"application/x-bdoc\": {\n    \"compressible\": false,\n    \"extensions\": [\"bdoc\"]\n  },\n  \"application/x-bittorrent\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"torrent\"]\n  },\n  \"application/x-blorb\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"blb\",\"blorb\"]\n  },\n  \"application/x-bzip\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"bz\"]\n  },\n  \"application/x-bzip2\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"bz2\",\"boz\"]\n  },\n  \"application/x-cbr\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"]\n  },\n  \"application/x-cdlink\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vcd\"]\n  },\n  \"application/x-cfs-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cfs\"]\n  },\n  \"application/x-chat\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"chat\"]\n  },\n  \"application/x-chess-pgn\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pgn\"]\n  },\n  \"application/x-chrome-extension\": {\n    \"extensions\": [\"crx\"]\n  },\n  \"application/x-cocoa\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"cco\"]\n  },\n  \"application/x-compress\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-conference\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nsc\"]\n  },\n  \"application/x-cpio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cpio\"]\n  },\n  \"application/x-csh\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"csh\"]\n  },\n  \"application/x-deb\": {\n    \"compressible\": false\n  },\n  \"application/x-debian-package\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"deb\",\"udeb\"]\n  },\n  \"application/x-dgc-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dgc\"]\n  },\n  \"application/x-director\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"]\n  },\n  \"application/x-doom\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wad\"]\n  },\n  \"application/x-dtbncx+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"ncx\"]\n  },\n  \"application/x-dtbook+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"dtb\"]\n  },\n  \"application/x-dtbresource+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"res\"]\n  },\n  \"application/x-dvi\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"dvi\"]\n  },\n  \"application/x-envoy\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"evy\"]\n  },\n  \"application/x-eva\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"eva\"]\n  },\n  \"application/x-font-bdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"bdf\"]\n  },\n  \"application/x-font-dos\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-framemaker\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-ghostscript\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gsf\"]\n  },\n  \"application/x-font-libgrx\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-linux-psf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"psf\"]\n  },\n  \"application/x-font-pcf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pcf\"]\n  },\n  \"application/x-font-snf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"snf\"]\n  },\n  \"application/x-font-speedo\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-sunos-news\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-type1\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pfa\",\"pfb\",\"pfm\",\"afm\"]\n  },\n  \"application/x-font-vfont\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-freearc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"arc\"]\n  },\n  \"application/x-futuresplash\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"spl\"]\n  },\n  \"application/x-gca-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gca\"]\n  },\n  \"application/x-glulx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ulx\"]\n  },\n  \"application/x-gnumeric\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gnumeric\"]\n  },\n  \"application/x-gramps-xml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gramps\"]\n  },\n  \"application/x-gtar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gtar\"]\n  },\n  \"application/x-gzip\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-hdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"hdf\"]\n  },\n  \"application/x-httpd-php\": {\n    \"compressible\": true,\n    \"extensions\": [\"php\"]\n  },\n  \"application/x-install-instructions\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"install\"]\n  },\n  \"application/x-iso9660-image\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"iso\"]\n  },\n  \"application/x-iwork-keynote-sffkey\": {\n    \"extensions\": [\"key\"]\n  },\n  \"application/x-iwork-numbers-sffnumbers\": {\n    \"extensions\": [\"numbers\"]\n  },\n  \"application/x-iwork-pages-sffpages\": {\n    \"extensions\": [\"pages\"]\n  },\n  \"application/x-java-archive-diff\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"jardiff\"]\n  },\n  \"application/x-java-jnlp-file\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"jnlp\"]\n  },\n  \"application/x-javascript\": {\n    \"compressible\": true\n  },\n  \"application/x-keepass2\": {\n    \"extensions\": [\"kdbx\"]\n  },\n  \"application/x-latex\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"latex\"]\n  },\n  \"application/x-lua-bytecode\": {\n    \"extensions\": [\"luac\"]\n  },\n  \"application/x-lzh-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"lzh\",\"lha\"]\n  },\n  \"application/x-makeself\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"run\"]\n  },\n  \"application/x-mie\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mie\"]\n  },\n  \"application/x-mobipocket-ebook\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"prc\",\"mobi\"]\n  },\n  \"application/x-mpegurl\": {\n    \"compressible\": false\n  },\n  \"application/x-ms-application\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"application\"]\n  },\n  \"application/x-ms-shortcut\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"lnk\"]\n  },\n  \"application/x-ms-wmd\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmd\"]\n  },\n  \"application/x-ms-wmz\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmz\"]\n  },\n  \"application/x-ms-xbap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xbap\"]\n  },\n  \"application/x-msaccess\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mdb\"]\n  },\n  \"application/x-msbinder\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"obd\"]\n  },\n  \"application/x-mscardfile\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"crd\"]\n  },\n  \"application/x-msclip\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"clp\"]\n  },\n  \"application/x-msdos-program\": {\n    \"extensions\": [\"exe\"]\n  },\n  \"application/x-msdownload\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"exe\",\"dll\",\"com\",\"bat\",\"msi\"]\n  },\n  \"application/x-msmediaview\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mvb\",\"m13\",\"m14\"]\n  },\n  \"application/x-msmetafile\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmf\",\"wmz\",\"emf\",\"emz\"]\n  },\n  \"application/x-msmoney\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mny\"]\n  },\n  \"application/x-mspublisher\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pub\"]\n  },\n  \"application/x-msschedule\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"scd\"]\n  },\n  \"application/x-msterminal\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"trm\"]\n  },\n  \"application/x-mswrite\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wri\"]\n  },\n  \"application/x-netcdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nc\",\"cdf\"]\n  },\n  \"application/x-ns-proxy-autoconfig\": {\n    \"compressible\": true,\n    \"extensions\": [\"pac\"]\n  },\n  \"application/x-nzb\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nzb\"]\n  },\n  \"application/x-perl\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"pl\",\"pm\"]\n  },\n  \"application/x-pilot\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"prc\",\"pdb\"]\n  },\n  \"application/x-pkcs12\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"p12\",\"pfx\"]\n  },\n  \"application/x-pkcs7-certificates\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"p7b\",\"spc\"]\n  },\n  \"application/x-pkcs7-certreqresp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"p7r\"]\n  },\n  \"application/x-pki-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/x-rar-compressed\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"rar\"]\n  },\n  \"application/x-redhat-package-manager\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"rpm\"]\n  },\n  \"application/x-research-info-systems\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ris\"]\n  },\n  \"application/x-sea\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"sea\"]\n  },\n  \"application/x-sh\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"sh\"]\n  },\n  \"application/x-shar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"shar\"]\n  },\n  \"application/x-shockwave-flash\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"swf\"]\n  },\n  \"application/x-silverlight-app\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xap\"]\n  },\n  \"application/x-sql\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sql\"]\n  },\n  \"application/x-stuffit\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"sit\"]\n  },\n  \"application/x-stuffitx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sitx\"]\n  },\n  \"application/x-subrip\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"srt\"]\n  },\n  \"application/x-sv4cpio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sv4cpio\"]\n  },\n  \"application/x-sv4crc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sv4crc\"]\n  },\n  \"application/x-t3vm-image\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"t3\"]\n  },\n  \"application/x-tads\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gam\"]\n  },\n  \"application/x-tar\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"tar\"]\n  },\n  \"application/x-tcl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tcl\",\"tk\"]\n  },\n  \"application/x-tex\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tex\"]\n  },\n  \"application/x-tex-tfm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tfm\"]\n  },\n  \"application/x-texinfo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"texinfo\",\"texi\"]\n  },\n  \"application/x-tgif\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"obj\"]\n  },\n  \"application/x-ustar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ustar\"]\n  },\n  \"application/x-virtualbox-hdd\": {\n    \"compressible\": true,\n    \"extensions\": [\"hdd\"]\n  },\n  \"application/x-virtualbox-ova\": {\n    \"compressible\": true,\n    \"extensions\": [\"ova\"]\n  },\n  \"application/x-virtualbox-ovf\": {\n    \"compressible\": true,\n    \"extensions\": [\"ovf\"]\n  },\n  \"application/x-virtualbox-vbox\": {\n    \"compressible\": true,\n    \"extensions\": [\"vbox\"]\n  },\n  \"application/x-virtualbox-vbox-extpack\": {\n    \"compressible\": false,\n    \"extensions\": [\"vbox-extpack\"]\n  },\n  \"application/x-virtualbox-vdi\": {\n    \"compressible\": true,\n    \"extensions\": [\"vdi\"]\n  },\n  \"application/x-virtualbox-vhd\": {\n    \"compressible\": true,\n    \"extensions\": [\"vhd\"]\n  },\n  \"application/x-virtualbox-vmdk\": {\n    \"compressible\": true,\n    \"extensions\": [\"vmdk\"]\n  },\n  \"application/x-wais-source\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"src\"]\n  },\n  \"application/x-web-app-manifest+json\": {\n    \"compressible\": true,\n    \"extensions\": [\"webapp\"]\n  },\n  \"application/x-www-form-urlencoded\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/x-x509-ca-cert\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"der\",\"crt\",\"pem\"]\n  },\n  \"application/x-x509-ca-ra-cert\": {\n    \"source\": \"iana\"\n  },\n  \"application/x-x509-next-ca-cert\": {\n    \"source\": \"iana\"\n  },\n  \"application/x-xfig\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fig\"]\n  },\n  \"application/x-xliff+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xlf\"]\n  },\n  \"application/x-xpinstall\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"xpi\"]\n  },\n  \"application/x-xz\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xz\"]\n  },\n  \"application/x-zmachine\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"]\n  },\n  \"application/x400-bp\": {\n    \"source\": \"iana\"\n  },\n  \"application/xacml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xaml+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xaml\"]\n  },\n  \"application/xcap-att+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xav\"]\n  },\n  \"application/xcap-caps+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xca\"]\n  },\n  \"application/xcap-diff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xdf\"]\n  },\n  \"application/xcap-el+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xel\"]\n  },\n  \"application/xcap-error+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xcap-ns+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xns\"]\n  },\n  \"application/xcon-conference-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xcon-conference-info-diff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xenc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xenc\"]\n  },\n  \"application/xhtml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xhtml\",\"xht\"]\n  },\n  \"application/xhtml-voice+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true\n  },\n  \"application/xliff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xlf\"]\n  },\n  \"application/xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xml\",\"xsl\",\"xsd\",\"rng\"]\n  },\n  \"application/xml-dtd\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dtd\"]\n  },\n  \"application/xml-external-parsed-entity\": {\n    \"source\": \"iana\"\n  },\n  \"application/xml-patch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xmpp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xop+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xop\"]\n  },\n  \"application/xproc+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xpl\"]\n  },\n  \"application/xslt+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xsl\",\"xslt\"]\n  },\n  \"application/xspf+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xspf\"]\n  },\n  \"application/xv+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mxml\",\"xhvml\",\"xvml\",\"xvm\"]\n  },\n  \"application/yang\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"yang\"]\n  },\n  \"application/yang-data+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yang-data+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yang-patch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yang-patch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yin+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"yin\"]\n  },\n  \"application/zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"zip\"]\n  },\n  \"application/zlib\": {\n    \"source\": \"iana\"\n  },\n  \"application/zstd\": {\n    \"source\": \"iana\"\n  },\n  \"audio/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/32kadpcm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/3gpp\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"3gpp\"]\n  },\n  \"audio/3gpp2\": {\n    \"source\": \"iana\"\n  },\n  \"audio/aac\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ac3\": {\n    \"source\": \"iana\"\n  },\n  \"audio/adpcm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"adp\"]\n  },\n  \"audio/amr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"amr\"]\n  },\n  \"audio/amr-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/amr-wb+\": {\n    \"source\": \"iana\"\n  },\n  \"audio/aptx\": {\n    \"source\": \"iana\"\n  },\n  \"audio/asc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/atrac-advanced-lossless\": {\n    \"source\": \"iana\"\n  },\n  \"audio/atrac-x\": {\n    \"source\": \"iana\"\n  },\n  \"audio/atrac3\": {\n    \"source\": \"iana\"\n  },\n  \"audio/basic\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"au\",\"snd\"]\n  },\n  \"audio/bv16\": {\n    \"source\": \"iana\"\n  },\n  \"audio/bv32\": {\n    \"source\": \"iana\"\n  },\n  \"audio/clearmode\": {\n    \"source\": \"iana\"\n  },\n  \"audio/cn\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dat12\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dls\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es201108\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es202050\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es202211\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es202212\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dv\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dvi4\": {\n    \"source\": \"iana\"\n  },\n  \"audio/eac3\": {\n    \"source\": \"iana\"\n  },\n  \"audio/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc-qcp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcb0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcb1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcnw\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcnw0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcnw1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcwb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcwb0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcwb1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evs\": {\n    \"source\": \"iana\"\n  },\n  \"audio/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/fwdred\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g711-0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g719\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g722\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g7221\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g723\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-16\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-24\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-32\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-40\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g728\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g729\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g7291\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g729d\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g729e\": {\n    \"source\": \"iana\"\n  },\n  \"audio/gsm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/gsm-efr\": {\n    \"source\": \"iana\"\n  },\n  \"audio/gsm-hr-08\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ilbc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ip-mr_v2.5\": {\n    \"source\": \"iana\"\n  },\n  \"audio/isac\": {\n    \"source\": \"apache\"\n  },\n  \"audio/l16\": {\n    \"source\": \"iana\"\n  },\n  \"audio/l20\": {\n    \"source\": \"iana\"\n  },\n  \"audio/l24\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"audio/l8\": {\n    \"source\": \"iana\"\n  },\n  \"audio/lpc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp1200\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp2400\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp600\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mhas\": {\n    \"source\": \"iana\"\n  },\n  \"audio/midi\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mid\",\"midi\",\"kar\",\"rmi\"]\n  },\n  \"audio/mobile-xmf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxmf\"]\n  },\n  \"audio/mp3\": {\n    \"compressible\": false,\n    \"extensions\": [\"mp3\"]\n  },\n  \"audio/mp4\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"m4a\",\"mp4a\"]\n  },\n  \"audio/mp4a-latm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mpa\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mpa-robust\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mpeg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"]\n  },\n  \"audio/mpeg4-generic\": {\n    \"source\": \"iana\"\n  },\n  \"audio/musepack\": {\n    \"source\": \"apache\"\n  },\n  \"audio/ogg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"oga\",\"ogg\",\"spx\",\"opus\"]\n  },\n  \"audio/opus\": {\n    \"source\": \"iana\"\n  },\n  \"audio/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcma\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcma-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcmu\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcmu-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/prs.sid\": {\n    \"source\": \"iana\"\n  },\n  \"audio/qcelp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/red\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtp-enc-aescm128\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtp-midi\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"audio/s3m\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"s3m\"]\n  },\n  \"audio/scip\": {\n    \"source\": \"iana\"\n  },\n  \"audio/silk\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sil\"]\n  },\n  \"audio/smv\": {\n    \"source\": \"iana\"\n  },\n  \"audio/smv-qcp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/smv0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/sofa\": {\n    \"source\": \"iana\"\n  },\n  \"audio/sp-midi\": {\n    \"source\": \"iana\"\n  },\n  \"audio/speex\": {\n    \"source\": \"iana\"\n  },\n  \"audio/t140c\": {\n    \"source\": \"iana\"\n  },\n  \"audio/t38\": {\n    \"source\": \"iana\"\n  },\n  \"audio/telephone-event\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tetra_acelp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tetra_acelp_bb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tone\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tsvcis\": {\n    \"source\": \"iana\"\n  },\n  \"audio/uemclip\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/usac\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vdvi\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vmr-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.3gpp.iufp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.4sb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.audiokoz\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.celp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cisco.nse\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cmles.radio-events\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cns.anp1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cns.inf1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dece.audio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uva\",\"uvva\"]\n  },\n  \"audio/vnd.digital-winds\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"eol\"]\n  },\n  \"audio/vnd.dlna.adts\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.heaac.1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.heaac.2\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.mlp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.mps\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pl2\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pl2x\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pl2z\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pulse.1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dra\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dra\"]\n  },\n  \"audio/vnd.dts\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dts\"]\n  },\n  \"audio/vnd.dts.hd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dtshd\"]\n  },\n  \"audio/vnd.dts.uhd\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dvb.file\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.everad.plj\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.hns.audio\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.lucent.voice\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lvp\"]\n  },\n  \"audio/vnd.ms-playready.media.pya\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pya\"]\n  },\n  \"audio/vnd.nokia.mobile-xmf\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.nortel.vbk\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.nuera.ecelp4800\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ecelp4800\"]\n  },\n  \"audio/vnd.nuera.ecelp7470\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ecelp7470\"]\n  },\n  \"audio/vnd.nuera.ecelp9600\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ecelp9600\"]\n  },\n  \"audio/vnd.octel.sbc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.presonus.multitrack\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.qcelp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.rhetorex.32kadpcm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.rip\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rip\"]\n  },\n  \"audio/vnd.rn-realaudio\": {\n    \"compressible\": false\n  },\n  \"audio/vnd.sealedmedia.softseal.mpeg\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.vmx.cvsd\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.wave\": {\n    \"compressible\": false\n  },\n  \"audio/vorbis\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"audio/vorbis-config\": {\n    \"source\": \"iana\"\n  },\n  \"audio/wav\": {\n    \"compressible\": false,\n    \"extensions\": [\"wav\"]\n  },\n  \"audio/wave\": {\n    \"compressible\": false,\n    \"extensions\": [\"wav\"]\n  },\n  \"audio/webm\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"weba\"]\n  },\n  \"audio/x-aac\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"aac\"]\n  },\n  \"audio/x-aiff\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aif\",\"aiff\",\"aifc\"]\n  },\n  \"audio/x-caf\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"caf\"]\n  },\n  \"audio/x-flac\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"flac\"]\n  },\n  \"audio/x-m4a\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"m4a\"]\n  },\n  \"audio/x-matroska\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mka\"]\n  },\n  \"audio/x-mpegurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"m3u\"]\n  },\n  \"audio/x-ms-wax\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wax\"]\n  },\n  \"audio/x-ms-wma\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wma\"]\n  },\n  \"audio/x-pn-realaudio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ram\",\"ra\"]\n  },\n  \"audio/x-pn-realaudio-plugin\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rmp\"]\n  },\n  \"audio/x-realaudio\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"ra\"]\n  },\n  \"audio/x-tta\": {\n    \"source\": \"apache\"\n  },\n  \"audio/x-wav\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wav\"]\n  },\n  \"audio/xm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xm\"]\n  },\n  \"chemical/x-cdx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cdx\"]\n  },\n  \"chemical/x-cif\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cif\"]\n  },\n  \"chemical/x-cmdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cmdf\"]\n  },\n  \"chemical/x-cml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cml\"]\n  },\n  \"chemical/x-csml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"csml\"]\n  },\n  \"chemical/x-pdb\": {\n    \"source\": \"apache\"\n  },\n  \"chemical/x-xyz\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xyz\"]\n  },\n  \"font/collection\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ttc\"]\n  },\n  \"font/otf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"otf\"]\n  },\n  \"font/sfnt\": {\n    \"source\": \"iana\"\n  },\n  \"font/ttf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ttf\"]\n  },\n  \"font/woff\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"woff\"]\n  },\n  \"font/woff2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"woff2\"]\n  },\n  \"image/aces\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"exr\"]\n  },\n  \"image/apng\": {\n    \"compressible\": false,\n    \"extensions\": [\"apng\"]\n  },\n  \"image/avci\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"avci\"]\n  },\n  \"image/avcs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"avcs\"]\n  },\n  \"image/avif\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"avif\"]\n  },\n  \"image/bmp\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"bmp\"]\n  },\n  \"image/cgm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cgm\"]\n  },\n  \"image/dicom-rle\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"drle\"]\n  },\n  \"image/emf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"emf\"]\n  },\n  \"image/fits\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fits\"]\n  },\n  \"image/g3fax\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"g3\"]\n  },\n  \"image/gif\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"gif\"]\n  },\n  \"image/heic\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heic\"]\n  },\n  \"image/heic-sequence\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heics\"]\n  },\n  \"image/heif\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heif\"]\n  },\n  \"image/heif-sequence\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heifs\"]\n  },\n  \"image/hej2k\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hej2\"]\n  },\n  \"image/hsj2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hsj2\"]\n  },\n  \"image/ief\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ief\"]\n  },\n  \"image/jls\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jls\"]\n  },\n  \"image/jp2\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jp2\",\"jpg2\"]\n  },\n  \"image/jpeg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jpeg\",\"jpg\",\"jpe\"]\n  },\n  \"image/jph\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jph\"]\n  },\n  \"image/jphc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jhc\"]\n  },\n  \"image/jpm\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jpm\"]\n  },\n  \"image/jpx\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jpx\",\"jpf\"]\n  },\n  \"image/jxr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxr\"]\n  },\n  \"image/jxra\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxra\"]\n  },\n  \"image/jxrs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxrs\"]\n  },\n  \"image/jxs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxs\"]\n  },\n  \"image/jxsc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxsc\"]\n  },\n  \"image/jxsi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxsi\"]\n  },\n  \"image/jxss\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxss\"]\n  },\n  \"image/ktx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ktx\"]\n  },\n  \"image/ktx2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ktx2\"]\n  },\n  \"image/naplps\": {\n    \"source\": \"iana\"\n  },\n  \"image/pjpeg\": {\n    \"compressible\": false\n  },\n  \"image/png\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"png\"]\n  },\n  \"image/prs.btif\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"btif\"]\n  },\n  \"image/prs.pti\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pti\"]\n  },\n  \"image/pwg-raster\": {\n    \"source\": \"iana\"\n  },\n  \"image/sgi\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sgi\"]\n  },\n  \"image/svg+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"svg\",\"svgz\"]\n  },\n  \"image/t38\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"t38\"]\n  },\n  \"image/tiff\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"tif\",\"tiff\"]\n  },\n  \"image/tiff-fx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tfx\"]\n  },\n  \"image/vnd.adobe.photoshop\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"psd\"]\n  },\n  \"image/vnd.airzip.accelerator.azv\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"azv\"]\n  },\n  \"image/vnd.cns.inf2\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.dece.graphic\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"]\n  },\n  \"image/vnd.djvu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"djvu\",\"djv\"]\n  },\n  \"image/vnd.dvb.subtitle\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sub\"]\n  },\n  \"image/vnd.dwg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dwg\"]\n  },\n  \"image/vnd.dxf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dxf\"]\n  },\n  \"image/vnd.fastbidsheet\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fbs\"]\n  },\n  \"image/vnd.fpx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fpx\"]\n  },\n  \"image/vnd.fst\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fst\"]\n  },\n  \"image/vnd.fujixerox.edmics-mmr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mmr\"]\n  },\n  \"image/vnd.fujixerox.edmics-rlc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rlc\"]\n  },\n  \"image/vnd.globalgraphics.pgb\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.microsoft.icon\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ico\"]\n  },\n  \"image/vnd.mix\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.mozilla.apng\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.ms-dds\": {\n    \"compressible\": true,\n    \"extensions\": [\"dds\"]\n  },\n  \"image/vnd.ms-modi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mdi\"]\n  },\n  \"image/vnd.ms-photo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wdp\"]\n  },\n  \"image/vnd.net-fpx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"npx\"]\n  },\n  \"image/vnd.pco.b16\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"b16\"]\n  },\n  \"image/vnd.radiance\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.sealed.png\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.sealedmedia.softseal.gif\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.sealedmedia.softseal.jpg\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.svf\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.tencent.tap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tap\"]\n  },\n  \"image/vnd.valve.source.texture\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vtf\"]\n  },\n  \"image/vnd.wap.wbmp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wbmp\"]\n  },\n  \"image/vnd.xiff\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xif\"]\n  },\n  \"image/vnd.zbrush.pcx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pcx\"]\n  },\n  \"image/webp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"webp\"]\n  },\n  \"image/wmf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmf\"]\n  },\n  \"image/x-3ds\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"3ds\"]\n  },\n  \"image/x-cmu-raster\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ras\"]\n  },\n  \"image/x-cmx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cmx\"]\n  },\n  \"image/x-freehand\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"]\n  },\n  \"image/x-icon\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"ico\"]\n  },\n  \"image/x-jng\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"jng\"]\n  },\n  \"image/x-mrsid-image\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sid\"]\n  },\n  \"image/x-ms-bmp\": {\n    \"source\": \"nginx\",\n    \"compressible\": true,\n    \"extensions\": [\"bmp\"]\n  },\n  \"image/x-pcx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pcx\"]\n  },\n  \"image/x-pict\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pic\",\"pct\"]\n  },\n  \"image/x-portable-anymap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pnm\"]\n  },\n  \"image/x-portable-bitmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pbm\"]\n  },\n  \"image/x-portable-graymap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pgm\"]\n  },\n  \"image/x-portable-pixmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ppm\"]\n  },\n  \"image/x-rgb\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rgb\"]\n  },\n  \"image/x-tga\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tga\"]\n  },\n  \"image/x-xbitmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xbm\"]\n  },\n  \"image/x-xcf\": {\n    \"compressible\": false\n  },\n  \"image/x-xpixmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xpm\"]\n  },\n  \"image/x-xwindowdump\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xwd\"]\n  },\n  \"message/cpim\": {\n    \"source\": \"iana\"\n  },\n  \"message/delivery-status\": {\n    \"source\": \"iana\"\n  },\n  \"message/disposition-notification\": {\n    \"source\": \"iana\",\n    \"extensions\": [\n      \"disposition-notification\"\n    ]\n  },\n  \"message/external-body\": {\n    \"source\": \"iana\"\n  },\n  \"message/feedback-report\": {\n    \"source\": \"iana\"\n  },\n  \"message/global\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8msg\"]\n  },\n  \"message/global-delivery-status\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8dsn\"]\n  },\n  \"message/global-disposition-notification\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8mdn\"]\n  },\n  \"message/global-headers\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8hdr\"]\n  },\n  \"message/http\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"message/imdn+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"message/news\": {\n    \"source\": \"iana\"\n  },\n  \"message/partial\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"message/rfc822\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"eml\",\"mime\"]\n  },\n  \"message/s-http\": {\n    \"source\": \"iana\"\n  },\n  \"message/sip\": {\n    \"source\": \"iana\"\n  },\n  \"message/sipfrag\": {\n    \"source\": \"iana\"\n  },\n  \"message/tracking-status\": {\n    \"source\": \"iana\"\n  },\n  \"message/vnd.si.simp\": {\n    \"source\": \"iana\"\n  },\n  \"message/vnd.wfa.wsc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wsc\"]\n  },\n  \"model/3mf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3mf\"]\n  },\n  \"model/e57\": {\n    \"source\": \"iana\"\n  },\n  \"model/gltf+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"gltf\"]\n  },\n  \"model/gltf-binary\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"glb\"]\n  },\n  \"model/iges\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"igs\",\"iges\"]\n  },\n  \"model/mesh\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"msh\",\"mesh\",\"silo\"]\n  },\n  \"model/mtl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mtl\"]\n  },\n  \"model/obj\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"obj\"]\n  },\n  \"model/step\": {\n    \"source\": \"iana\"\n  },\n  \"model/step+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"stpx\"]\n  },\n  \"model/step+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"stpz\"]\n  },\n  \"model/step-xml+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"stpxz\"]\n  },\n  \"model/stl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"stl\"]\n  },\n  \"model/vnd.collada+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dae\"]\n  },\n  \"model/vnd.dwf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dwf\"]\n  },\n  \"model/vnd.flatland.3dml\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.gdl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gdl\"]\n  },\n  \"model/vnd.gs-gdl\": {\n    \"source\": \"apache\"\n  },\n  \"model/vnd.gs.gdl\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.gtw\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gtw\"]\n  },\n  \"model/vnd.moml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"model/vnd.mts\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mts\"]\n  },\n  \"model/vnd.opengex\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ogex\"]\n  },\n  \"model/vnd.parasolid.transmit.binary\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x_b\"]\n  },\n  \"model/vnd.parasolid.transmit.text\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x_t\"]\n  },\n  \"model/vnd.pytha.pyox\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.rosette.annotated-data-model\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.sap.vds\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vds\"]\n  },\n  \"model/vnd.usdz+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"usdz\"]\n  },\n  \"model/vnd.valve.source.compiled-map\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bsp\"]\n  },\n  \"model/vnd.vtu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vtu\"]\n  },\n  \"model/vrml\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"wrl\",\"vrml\"]\n  },\n  \"model/x3d+binary\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"x3db\",\"x3dbz\"]\n  },\n  \"model/x3d+fastinfoset\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x3db\"]\n  },\n  \"model/x3d+vrml\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"x3dv\",\"x3dvz\"]\n  },\n  \"model/x3d+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"x3d\",\"x3dz\"]\n  },\n  \"model/x3d-vrml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x3dv\"]\n  },\n  \"multipart/alternative\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/appledouble\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/byteranges\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/digest\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/encrypted\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/form-data\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/header-set\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/mixed\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/multilingual\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/parallel\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/related\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/report\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/signed\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/vnd.bint.med-plus\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/voice-message\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/x-mixed-replace\": {\n    \"source\": \"iana\"\n  },\n  \"text/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/cache-manifest\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"appcache\",\"manifest\"]\n  },\n  \"text/calendar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ics\",\"ifb\"]\n  },\n  \"text/calender\": {\n    \"compressible\": true\n  },\n  \"text/cmd\": {\n    \"compressible\": true\n  },\n  \"text/coffeescript\": {\n    \"extensions\": [\"coffee\",\"litcoffee\"]\n  },\n  \"text/cql\": {\n    \"source\": \"iana\"\n  },\n  \"text/cql-expression\": {\n    \"source\": \"iana\"\n  },\n  \"text/cql-identifier\": {\n    \"source\": \"iana\"\n  },\n  \"text/css\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"css\"]\n  },\n  \"text/csv\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"csv\"]\n  },\n  \"text/csv-schema\": {\n    \"source\": \"iana\"\n  },\n  \"text/directory\": {\n    \"source\": \"iana\"\n  },\n  \"text/dns\": {\n    \"source\": \"iana\"\n  },\n  \"text/ecmascript\": {\n    \"source\": \"iana\"\n  },\n  \"text/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"text/enriched\": {\n    \"source\": \"iana\"\n  },\n  \"text/fhirpath\": {\n    \"source\": \"iana\"\n  },\n  \"text/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/fwdred\": {\n    \"source\": \"iana\"\n  },\n  \"text/gff3\": {\n    \"source\": \"iana\"\n  },\n  \"text/grammar-ref-list\": {\n    \"source\": \"iana\"\n  },\n  \"text/html\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"html\",\"htm\",\"shtml\"]\n  },\n  \"text/jade\": {\n    \"extensions\": [\"jade\"]\n  },\n  \"text/javascript\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"text/jcr-cnd\": {\n    \"source\": \"iana\"\n  },\n  \"text/jsx\": {\n    \"compressible\": true,\n    \"extensions\": [\"jsx\"]\n  },\n  \"text/less\": {\n    \"compressible\": true,\n    \"extensions\": [\"less\"]\n  },\n  \"text/markdown\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"markdown\",\"md\"]\n  },\n  \"text/mathml\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"mml\"]\n  },\n  \"text/mdx\": {\n    \"compressible\": true,\n    \"extensions\": [\"mdx\"]\n  },\n  \"text/mizar\": {\n    \"source\": \"iana\"\n  },\n  \"text/n3\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"n3\"]\n  },\n  \"text/parameters\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/plain\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"]\n  },\n  \"text/provenance-notation\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/prs.fallenstein.rst\": {\n    \"source\": \"iana\"\n  },\n  \"text/prs.lines.tag\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dsc\"]\n  },\n  \"text/prs.prop.logic\": {\n    \"source\": \"iana\"\n  },\n  \"text/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/red\": {\n    \"source\": \"iana\"\n  },\n  \"text/rfc822-headers\": {\n    \"source\": \"iana\"\n  },\n  \"text/richtext\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rtx\"]\n  },\n  \"text/rtf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rtf\"]\n  },\n  \"text/rtp-enc-aescm128\": {\n    \"source\": \"iana\"\n  },\n  \"text/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"text/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"text/sgml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sgml\",\"sgm\"]\n  },\n  \"text/shaclc\": {\n    \"source\": \"iana\"\n  },\n  \"text/shex\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"shex\"]\n  },\n  \"text/slim\": {\n    \"extensions\": [\"slim\",\"slm\"]\n  },\n  \"text/spdx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spdx\"]\n  },\n  \"text/strings\": {\n    \"source\": \"iana\"\n  },\n  \"text/stylus\": {\n    \"extensions\": [\"stylus\",\"styl\"]\n  },\n  \"text/t140\": {\n    \"source\": \"iana\"\n  },\n  \"text/tab-separated-values\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"tsv\"]\n  },\n  \"text/troff\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"]\n  },\n  \"text/turtle\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"ttl\"]\n  },\n  \"text/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/uri-list\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"uri\",\"uris\",\"urls\"]\n  },\n  \"text/vcard\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"vcard\"]\n  },\n  \"text/vnd.a\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.abc\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.ascii-art\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.curl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"curl\"]\n  },\n  \"text/vnd.curl.dcurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dcurl\"]\n  },\n  \"text/vnd.curl.mcurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mcurl\"]\n  },\n  \"text/vnd.curl.scurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"scurl\"]\n  },\n  \"text/vnd.debian.copyright\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/vnd.dmclientscript\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.dvb.subtitle\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sub\"]\n  },\n  \"text/vnd.esmertec.theme-descriptor\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/vnd.familysearch.gedcom\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ged\"]\n  },\n  \"text/vnd.ficlab.flt\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.fly\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fly\"]\n  },\n  \"text/vnd.fmi.flexstor\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"flx\"]\n  },\n  \"text/vnd.gml\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.graphviz\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gv\"]\n  },\n  \"text/vnd.hans\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.hgl\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.in3d.3dml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3dml\"]\n  },\n  \"text/vnd.in3d.spot\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spot\"]\n  },\n  \"text/vnd.iptc.newsml\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.iptc.nitf\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.latex-z\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.motorola.reflex\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.ms-mediapackage\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.net2phone.commcenter.command\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.radisys.msml-basic-layout\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.senx.warpscript\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.si.uricatalogue\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.sosi\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.sun.j2me.app-descriptor\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"jad\"]\n  },\n  \"text/vnd.trolltech.linguist\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/vnd.wap.si\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.wap.sl\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.wap.wml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wml\"]\n  },\n  \"text/vnd.wap.wmlscript\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmls\"]\n  },\n  \"text/vtt\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"vtt\"]\n  },\n  \"text/x-asm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"s\",\"asm\"]\n  },\n  \"text/x-c\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"]\n  },\n  \"text/x-component\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"htc\"]\n  },\n  \"text/x-fortran\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"f\",\"for\",\"f77\",\"f90\"]\n  },\n  \"text/x-gwt-rpc\": {\n    \"compressible\": true\n  },\n  \"text/x-handlebars-template\": {\n    \"extensions\": [\"hbs\"]\n  },\n  \"text/x-java-source\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"java\"]\n  },\n  \"text/x-jquery-tmpl\": {\n    \"compressible\": true\n  },\n  \"text/x-lua\": {\n    \"extensions\": [\"lua\"]\n  },\n  \"text/x-markdown\": {\n    \"compressible\": true,\n    \"extensions\": [\"mkd\"]\n  },\n  \"text/x-nfo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nfo\"]\n  },\n  \"text/x-opml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"opml\"]\n  },\n  \"text/x-org\": {\n    \"compressible\": true,\n    \"extensions\": [\"org\"]\n  },\n  \"text/x-pascal\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"p\",\"pas\"]\n  },\n  \"text/x-processing\": {\n    \"compressible\": true,\n    \"extensions\": [\"pde\"]\n  },\n  \"text/x-sass\": {\n    \"extensions\": [\"sass\"]\n  },\n  \"text/x-scss\": {\n    \"extensions\": [\"scss\"]\n  },\n  \"text/x-setext\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"etx\"]\n  },\n  \"text/x-sfv\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sfv\"]\n  },\n  \"text/x-suse-ymp\": {\n    \"compressible\": true,\n    \"extensions\": [\"ymp\"]\n  },\n  \"text/x-uuencode\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"uu\"]\n  },\n  \"text/x-vcalendar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vcs\"]\n  },\n  \"text/x-vcard\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vcf\"]\n  },\n  \"text/xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xml\"]\n  },\n  \"text/xml-external-parsed-entity\": {\n    \"source\": \"iana\"\n  },\n  \"text/yaml\": {\n    \"compressible\": true,\n    \"extensions\": [\"yaml\",\"yml\"]\n  },\n  \"video/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/3gpp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3gp\",\"3gpp\"]\n  },\n  \"video/3gpp-tt\": {\n    \"source\": \"iana\"\n  },\n  \"video/3gpp2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3g2\"]\n  },\n  \"video/av1\": {\n    \"source\": \"iana\"\n  },\n  \"video/bmpeg\": {\n    \"source\": \"iana\"\n  },\n  \"video/bt656\": {\n    \"source\": \"iana\"\n  },\n  \"video/celb\": {\n    \"source\": \"iana\"\n  },\n  \"video/dv\": {\n    \"source\": \"iana\"\n  },\n  \"video/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"video/ffv1\": {\n    \"source\": \"iana\"\n  },\n  \"video/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/h261\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"h261\"]\n  },\n  \"video/h263\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"h263\"]\n  },\n  \"video/h263-1998\": {\n    \"source\": \"iana\"\n  },\n  \"video/h263-2000\": {\n    \"source\": \"iana\"\n  },\n  \"video/h264\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"h264\"]\n  },\n  \"video/h264-rcdo\": {\n    \"source\": \"iana\"\n  },\n  \"video/h264-svc\": {\n    \"source\": \"iana\"\n  },\n  \"video/h265\": {\n    \"source\": \"iana\"\n  },\n  \"video/iso.segment\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"m4s\"]\n  },\n  \"video/jpeg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jpgv\"]\n  },\n  \"video/jpeg2000\": {\n    \"source\": \"iana\"\n  },\n  \"video/jpm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"jpm\",\"jpgm\"]\n  },\n  \"video/jxsv\": {\n    \"source\": \"iana\"\n  },\n  \"video/mj2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mj2\",\"mjp2\"]\n  },\n  \"video/mp1s\": {\n    \"source\": \"iana\"\n  },\n  \"video/mp2p\": {\n    \"source\": \"iana\"\n  },\n  \"video/mp2t\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ts\"]\n  },\n  \"video/mp4\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"mp4\",\"mp4v\",\"mpg4\"]\n  },\n  \"video/mp4v-es\": {\n    \"source\": \"iana\"\n  },\n  \"video/mpeg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"]\n  },\n  \"video/mpeg4-generic\": {\n    \"source\": \"iana\"\n  },\n  \"video/mpv\": {\n    \"source\": \"iana\"\n  },\n  \"video/nv\": {\n    \"source\": \"iana\"\n  },\n  \"video/ogg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ogv\"]\n  },\n  \"video/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/pointer\": {\n    \"source\": \"iana\"\n  },\n  \"video/quicktime\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"qt\",\"mov\"]\n  },\n  \"video/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/raw\": {\n    \"source\": \"iana\"\n  },\n  \"video/rtp-enc-aescm128\": {\n    \"source\": \"iana\"\n  },\n  \"video/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"video/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"video/scip\": {\n    \"source\": \"iana\"\n  },\n  \"video/smpte291\": {\n    \"source\": \"iana\"\n  },\n  \"video/smpte292m\": {\n    \"source\": \"iana\"\n  },\n  \"video/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/vc1\": {\n    \"source\": \"iana\"\n  },\n  \"video/vc2\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.cctv\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dece.hd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvh\",\"uvvh\"]\n  },\n  \"video/vnd.dece.mobile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvm\",\"uvvm\"]\n  },\n  \"video/vnd.dece.mp4\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dece.pd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvp\",\"uvvp\"]\n  },\n  \"video/vnd.dece.sd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvs\",\"uvvs\"]\n  },\n  \"video/vnd.dece.video\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvv\",\"uvvv\"]\n  },\n  \"video/vnd.directv.mpeg\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.directv.mpeg-tts\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dlna.mpeg-tts\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dvb.file\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dvb\"]\n  },\n  \"video/vnd.fvt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fvt\"]\n  },\n  \"video/vnd.hns.video\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.1dparityfec-1010\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.1dparityfec-2005\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.2dparityfec-1010\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.2dparityfec-2005\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.ttsavc\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.ttsmpeg2\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.motorola.video\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.motorola.videop\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.mpegurl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxu\",\"m4u\"]\n  },\n  \"video/vnd.ms-playready.media.pyv\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pyv\"]\n  },\n  \"video/vnd.nokia.interleaved-multimedia\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.nokia.mp4vr\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.nokia.videovoip\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.objectvideo\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.radgamettools.bink\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.radgamettools.smacker\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealed.mpeg1\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealed.mpeg4\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealed.swf\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealedmedia.softseal.mov\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.uvvu.mp4\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvu\",\"uvvu\"]\n  },\n  \"video/vnd.vivo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"viv\"]\n  },\n  \"video/vnd.youtube.yt\": {\n    \"source\": \"iana\"\n  },\n  \"video/vp8\": {\n    \"source\": \"iana\"\n  },\n  \"video/vp9\": {\n    \"source\": \"iana\"\n  },\n  \"video/webm\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"webm\"]\n  },\n  \"video/x-f4v\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"f4v\"]\n  },\n  \"video/x-fli\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fli\"]\n  },\n  \"video/x-flv\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"flv\"]\n  },\n  \"video/x-m4v\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"m4v\"]\n  },\n  \"video/x-matroska\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"mkv\",\"mk3d\",\"mks\"]\n  },\n  \"video/x-mng\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mng\"]\n  },\n  \"video/x-ms-asf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"asf\",\"asx\"]\n  },\n  \"video/x-ms-vob\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vob\"]\n  },\n  \"video/x-ms-wm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wm\"]\n  },\n  \"video/x-ms-wmv\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"wmv\"]\n  },\n  \"video/x-ms-wmx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmx\"]\n  },\n  \"video/x-ms-wvx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wvx\"]\n  },\n  \"video/x-msvideo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"avi\"]\n  },\n  \"video/x-sgi-movie\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"movie\"]\n  },\n  \"video/x-smv\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"smv\"]\n  },\n  \"x-conference/x-cooltalk\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ice\"]\n  },\n  \"x-shader/x-fragment\": {\n    \"compressible\": true\n  },\n  \"x-shader/x-vertex\": {\n    \"compressible\": true\n  }\n}\n", "/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n", "/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n", "module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n", "var defer = require('./defer.js');\n\n// API\nmodule.exports = async;\n\n/**\n * Runs provided callback asynchronously\n * even if callback itself is not\n *\n * @param   {function} callback - callback to invoke\n * @returns {function} - augmented callback\n */\nfunction async(callback)\n{\n  var isAsync = false;\n\n  // check if async happened\n  defer(function() { isAsync = true; });\n\n  return function async_callback(err, result)\n  {\n    if (isAsync)\n    {\n      callback(err, result);\n    }\n    else\n    {\n      defer(function nextTick_callback()\n      {\n        callback(err, result);\n      });\n    }\n  };\n}\n", "// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n", "var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n", "// API\nmodule.exports = state;\n\n/**\n * Creates initial state object\n * for iteration over list\n *\n * @param   {array|object} list - list to iterate over\n * @param   {function|null} sortMethod - function to use for keys sort,\n *                                     or `null` to keep them as is\n * @returns {object} - initial state object\n */\nfunction state(list, sortMethod)\n{\n  var isNamedList = !Array.isArray(list)\n    , initState =\n    {\n      index    : 0,\n      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,\n      jobs     : {},\n      results  : isNamedList ? {} : [],\n      size     : isNamedList ? Object.keys(list).length : list.length\n    }\n    ;\n\n  if (sortMethod)\n  {\n    // sort array keys based on it's values\n    // sort object's keys just on own merit\n    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)\n    {\n      return sortMethod(list[a], list[b]);\n    });\n  }\n\n  return initState;\n}\n", "var abort = require('./abort.js')\n  , async = require('./async.js')\n  ;\n\n// API\nmodule.exports = terminator;\n\n/**\n * Terminates jobs in the attached state context\n *\n * @this  AsyncKitState#\n * @param {function} callback - final callback to invoke after termination\n */\nfunction terminator(callback)\n{\n  if (!Object.keys(this.jobs).length)\n  {\n    return;\n  }\n\n  // fast forward iteration index\n  this.index = this.size;\n\n  // abort jobs\n  abort(this);\n\n  // send back results we have so far\n  async(callback)(null, this.results);\n}\n", "var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n", "var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n", "var serialOrdered = require('./serialOrdered.js');\n\n// Public API\nmodule.exports = serial;\n\n/**\n * Runs iterator over provided array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serial(list, iterator, callback)\n{\n  return serialOrdered(list, iterator, null, callback);\n}\n", "module.exports =\n{\n  parallel      : require('./parallel.js'),\n  serial        : require('./serial.js'),\n  serialOrdered : require('./serialOrdered.js')\n};\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Object;\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Error;\n", "'use strict';\n\n/** @type {import('./eval')} */\nmodule.exports = EvalError;\n", "'use strict';\n\n/** @type {import('./range')} */\nmodule.exports = RangeError;\n", "'use strict';\n\n/** @type {import('./ref')} */\nmodule.exports = ReferenceError;\n", "'use strict';\n\n/** @type {import('./syntax')} */\nmodule.exports = SyntaxError;\n", "'use strict';\n\n/** @type {import('./type')} */\nmodule.exports = TypeError;\n", "'use strict';\n\n/** @type {import('./uri')} */\nmodule.exports = URIError;\n", "'use strict';\n\n/** @type {import('./abs')} */\nmodule.exports = Math.abs;\n", "'use strict';\n\n/** @type {import('./floor')} */\nmodule.exports = Math.floor;\n", "'use strict';\n\n/** @type {import('./max')} */\nmodule.exports = Math.max;\n", "'use strict';\n\n/** @type {import('./min')} */\nmodule.exports = Math.min;\n", "'use strict';\n\n/** @type {import('./pow')} */\nmodule.exports = Math.pow;\n", "'use strict';\n\n/** @type {import('./round')} */\nmodule.exports = Math.round;\n", "'use strict';\n\n/** @type {import('./isNaN')} */\nmodule.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n", "'use strict';\n\nvar $isNaN = require('./isNaN');\n\n/** @type {import('./sign')} */\nmodule.exports = function sign(number) {\n\tif ($isNaN(number) || number === 0) {\n\t\treturn number;\n\t}\n\treturn number < 0 ? -1 : +1;\n};\n", "'use strict';\n\n/** @type {import('./gOPD')} */\nmodule.exports = Object.getOwnPropertyDescriptor;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $gOPD = require('./gOPD');\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $defineProperty = Object.defineProperty || false;\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = false;\n\t}\n}\n\nmodule.exports = $defineProperty;\n", "'use strict';\n\n/** @type {import('./shams')} */\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\t/** @type {{ [k in symbol]?: unknown }} */\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n", "'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n", "'use strict';\n\n/** @type {import('./Reflect.getPrototypeOf')} */\nmodule.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;\n", "'use strict';\n\nvar $Object = require('es-object-atoms');\n\n/** @type {import('./Object.getPrototypeOf')} */\nmodule.exports = $Object.getPrototypeOf || null;\n", "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n", "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n", "'use strict';\n\n/** @type {import('./functionCall')} */\nmodule.exports = Function.prototype.call;\n", "'use strict';\n\n/** @type {import('./functionApply')} */\nmodule.exports = Function.prototype.apply;\n", "'use strict';\n\n/** @type {import('./reflectApply')} */\nmodule.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;\n", "'use strict';\n\nvar bind = require('function-bind');\n\nvar $apply = require('./functionApply');\nvar $call = require('./functionCall');\nvar $reflectApply = require('./reflectApply');\n\n/** @type {import('./actualApply')} */\nmodule.exports = $reflectApply || bind.call($call, $apply);\n", "'use strict';\n\nvar bind = require('function-bind');\nvar $TypeError = require('es-errors/type');\n\nvar $call = require('./functionCall');\nvar $actualApply = require('./actualApply');\n\n/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */\nmodule.exports = function callBindBasic(args) {\n\tif (args.length < 1 || typeof args[0] !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\treturn $actualApply(bind, $call, args);\n};\n", "'use strict';\n\nvar callBind = require('call-bind-apply-helpers');\nvar gOPD = require('gopd');\n\nvar hasProtoAccessor;\ntry {\n\t// eslint-disable-next-line no-extra-parens, no-proto\n\thasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;\n} catch (e) {\n\tif (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {\n\t\tthrow e;\n\t}\n}\n\n// eslint-disable-next-line no-extra-parens\nvar desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));\n\nvar $Object = Object;\nvar $getPrototypeOf = $Object.getPrototypeOf;\n\n/** @type {import('./get')} */\nmodule.exports = desc && typeof desc.get === 'function'\n\t? callBind([desc.get])\n\t: typeof $getPrototypeOf === 'function'\n\t\t? /** @type {import('./get')} */ function getDunder(value) {\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\treturn $getPrototypeOf(value == null ? value : $Object(value));\n\t\t}\n\t\t: false;\n", "'use strict';\n\nvar reflectGetProto = require('./Reflect.getPrototypeOf');\nvar originalGetProto = require('./Object.getPrototypeOf');\n\nvar getDunderProto = require('dunder-proto/get');\n\n/** @type {import('.')} */\nmodule.exports = reflectGetProto\n\t? function getProto(O) {\n\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\treturn reflectGetProto(O);\n\t}\n\t: originalGetProto\n\t\t? function getProto(O) {\n\t\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\t\tthrow new TypeError('getProto: not an object');\n\t\t\t}\n\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\treturn originalGetProto(O);\n\t\t}\n\t\t: getDunderProto\n\t\t\t? function getProto(O) {\n\t\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\t\treturn getDunderProto(O);\n\t\t\t}\n\t\t\t: null;\n", "'use strict';\n\nvar call = Function.prototype.call;\nvar $hasOwn = Object.prototype.hasOwnProperty;\nvar bind = require('function-bind');\n\n/** @type {import('.')} */\nmodule.exports = bind.call(call, $hasOwn);\n", "'use strict';\n\nvar undefined;\n\nvar $Object = require('es-object-atoms');\n\nvar $Error = require('es-errors');\nvar $EvalError = require('es-errors/eval');\nvar $RangeError = require('es-errors/range');\nvar $ReferenceError = require('es-errors/ref');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $URIError = require('es-errors/uri');\n\nvar abs = require('math-intrinsics/abs');\nvar floor = require('math-intrinsics/floor');\nvar max = require('math-intrinsics/max');\nvar min = require('math-intrinsics/min');\nvar pow = require('math-intrinsics/pow');\nvar round = require('math-intrinsics/round');\nvar sign = require('math-intrinsics/sign');\n\nvar $Function = Function;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = require('gopd');\nvar $defineProperty = require('es-define-property');\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = require('get-proto');\nvar $ObjectGPO = require('get-proto/Object.getPrototypeOf');\nvar $ReflectGPO = require('get-proto/Reflect.getPrototypeOf');\n\nvar $apply = require('call-bind-apply-helpers/functionApply');\nvar $call = require('call-bind-apply-helpers/functionCall');\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t__proto__: null,\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': $Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': $EvalError,\n\t'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': $Object,\n\t'%Object.getOwnPropertyDescriptor%': $gOPD,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': $RangeError,\n\t'%ReferenceError%': $ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': $URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\n\t'%Function.prototype.call%': $call,\n\t'%Function.prototype.apply%': $apply,\n\t'%Object.defineProperty%': $defineProperty,\n\t'%Object.getPrototypeOf%': $ObjectGPO,\n\t'%Math.abs%': abs,\n\t'%Math.floor%': floor,\n\t'%Math.max%': max,\n\t'%Math.min%': min,\n\t'%Math.pow%': pow,\n\t'%Math.round%': round,\n\t'%Math.sign%': sign,\n\t'%Reflect.getPrototypeOf%': $ReflectGPO\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t__proto__: null,\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call($call, Array.prototype.concat);\nvar $spliceApply = bind.call($apply, Array.prototype.splice);\nvar $replace = bind.call($call, String.prototype.replace);\nvar $strSlice = bind.call($call, String.prototype.slice);\nvar $exec = bind.call($call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n", "'use strict';\n\nvar hasSymbols = require('has-symbols/shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\n\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar hasOwn = require('hasown');\nvar $TypeError = require('es-errors/type');\n\nvar toStringTag = hasToStringTag ? Symbol.toStringTag : null;\n\n/** @type {import('.')} */\nmodule.exports = function setToStringTag(object, value) {\n\tvar overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;\n\tvar nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;\n\tif (\n\t\t(typeof overrideIfSet !== 'undefined' && typeof overrideIfSet !== 'boolean')\n\t\t|| (typeof nonConfigurable !== 'undefined' && typeof nonConfigurable !== 'boolean')\n\t) {\n\t\tthrow new $TypeError('if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans');\n\t}\n\tif (toStringTag && (overrideIfSet || !hasOwn(object, toStringTag))) {\n\t\tif ($defineProperty) {\n\t\t\t$defineProperty(object, toStringTag, {\n\t\t\t\tconfigurable: !nonConfigurable,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: value,\n\t\t\t\twritable: false\n\t\t\t});\n\t\t} else {\n\t\t\tobject[toStringTag] = value; // eslint-disable-line no-param-reassign\n\t\t}\n\t}\n};\n", "// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n", "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar mime = require('mime-types');\nvar asynckit = require('asynckit');\nvar setToStringTag = require('es-set-tostringtag');\nvar populate = require('./populate.js');\nvar Buffer = require('safe-buffer').Buffer; // eslint-disable-line no-shadow\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData();\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (Array.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response\n  if (!value || ( !value.path && !(value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) )) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n  if (Object.prototype.hasOwnProperty.call(value, 'fd')) {\n\n    // take read range into a account\n    // `end` = Infinity \u2013> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (Object.prototype.hasOwnProperty.call(value, 'httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, prop)) {\n      header = headers[prop];\n\n      // skip nullish headers.\n      if (header == null) {\n        continue;\n      }\n\n      // convert all headers to arrays.\n      if (!Array.isArray(header)) {\n        header = [header];\n      }\n\n      // add non-empty headers.\n      if (header.length) {\n        contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n      }\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (Object.prototype.hasOwnProperty.call(userHeaders, header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc(0);\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err) {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    request.setHeader('Content-Length', length);\n\n    this.pipe(request);\n    if (cb) {\n      request.on('error', cb);\n      request.on('response', cb.bind(this, null));\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\nsetToStringTag(FormData, 'FormData');\n", "'use strict';\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, changesOrigin){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  // secuirty\n  if (changesOrigin) {\n    delete header['authorization'];\n    delete header['cookie'];\n  }\n  return header;\n};\n", "'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n};\n", "'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst util = require('util');\nconst Stream = require('stream');\nconst ResponseBase = require('../response-base');\n\n/**\n * Expose `Response`.\n */\n\nmodule.exports = Response;\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * @param {Request} req\n * @param {Object} options\n * @constructor\n * @extends {Stream}\n * @implements {ReadableStream}\n * @api private\n */\n\nfunction Response(req) {\n  Stream.call(this);\n  const res = (this.res = req.res);\n  this.request = req;\n  this.req = req.req;\n  this.text = res.text;\n  this.body = res.body !== undefined ? res.body : {};\n  this.files = res.files || {};\n  this.buffered = 'string' == typeof this.text;\n  this.header = this.headers = res.headers;\n  this._setStatusProperties(res.statusCode);\n  this._setHeaderProperties(this.header);\n  this.setEncoding = res.setEncoding.bind(res);\n  res.on('data', this.emit.bind(this, 'data'));\n  res.on('end', this.emit.bind(this, 'end'));\n  res.on('close', this.emit.bind(this, 'close'));\n  res.on('error', this.emit.bind(this, 'error'));\n}\n\n/**\n * Inherit from `Stream`.\n */\n\nutil.inherits(Response, Stream);\nResponseBase(Response.prototype);\n\n/**\n * Implements methods of a `ReadableStream`\n */\n\nResponse.prototype.destroy = function(err){\n  this.res.destroy(err);\n};\n\n/**\n * Pause.\n */\n\nResponse.prototype.pause = function(){\n  this.res.pause();\n};\n\n/**\n * Resume.\n */\n\nResponse.prototype.resume = function(){\n  this.res.resume();\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function() {\n  const req = this.req;\n  const method = req.method;\n  const path = req.path;\n\n  const msg = `cannot ${method} ${path} (${this.status})`;\n  const err = new Error(msg);\n  err.status = this.status;\n  err.text = this.text;\n  err.method = method;\n  err.path = path;\n\n  return err;\n};\n\n\nResponse.prototype.setStatusProperties = function(status){\n  console.warn(\"In superagent 2.x setStatusProperties is a private method\");\n  return this._setStatusProperties(status);\n};\n\n/**\n * To json.\n *\n * @return {Object}\n * @api public\n */\n\nResponse.prototype.toJSON = function() {\n  return {\n    req: this.request.toJSON(),\n    header: this.header,\n    status: this.status,\n    text: this.text,\n  };\n};\n", "/*!\n * methods\n * Copyright(c) 2013-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar http = require('http');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = getCurrentNodeMethods() || getBasicNodeMethods();\n\n/**\n * Get the current Node.js methods.\n * @private\n */\n\nfunction getCurrentNodeMethods() {\n  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {\n    return method.toLowerCase();\n  });\n}\n\n/**\n * Get the \"basic\" Node.js methods, a snapshot from Node.js 0.10.\n * @private\n */\n\nfunction getBasicNodeMethods() {\n  return [\n    'get',\n    'post',\n    'put',\n    'head',\n    'delete',\n    'options',\n    'trace',\n    'copy',\n    'lock',\n    'mkcol',\n    'move',\n    'purge',\n    'propfind',\n    'proppatch',\n    'unlock',\n    'report',\n    'mkactivity',\n    'checkout',\n    'merge',\n    'm-search',\n    'notify',\n    'subscribe',\n    'unsubscribe',\n    'patch',\n    'search',\n    'connect'\n  ];\n}\n", "'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst StringDecoder = require('string_decoder').StringDecoder;\nconst Stream = require('stream');\nconst zlib = require('zlib');\n\n/**\n * Buffers response data events and re-emits when they're unzipped.\n *\n * @param {Request} req\n * @param {Response} res\n * @api private\n */\n\nexports.unzip = (req, res) => {\n  const unzip = zlib.createUnzip();\n  const stream = new Stream();\n  let decoder;\n\n  // make node responseOnEnd() happy\n  stream.req = req;\n\n  unzip.on('error', err => {\n    if (err && err.code === 'Z_BUF_ERROR') {\n      // unexpected end of file is ignored by browsers and curl\n      stream.emit('end');\n      return;\n    }\n    stream.emit('error', err);\n  });\n\n  // pipe to unzip\n  res.pipe(unzip);\n\n  // override `setEncoding` to capture encoding\n  res.setEncoding = type => {\n    decoder = new StringDecoder(type);\n  };\n\n  // decode upon decompressing with captured encoding\n  unzip.on('data', buf => {\n    if (decoder) {\n      const str = decoder.write(buf);\n      if (str.length) stream.emit('data', str);\n    } else {\n      stream.emit('data', buf);\n    }\n  });\n\n  unzip.on('end', () => {\n    stream.emit('end');\n  });\n\n  // override `on` to capture data listeners\n  const _on = res.on;\n  res.on = function(type, fn) {\n    if ('data' == type || 'end' == type) {\n      stream.on(type, fn);\n    } else if ('error' == type) {\n      stream.on(type, fn);\n      _on.call(res, type, fn);\n    } else {\n      _on.call(res, type, fn);\n    }\n    return this;\n  };\n};\n", "'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n", "{\"application/andrew-inset\":[\"ez\"],\"application/applixware\":[\"aw\"],\"application/atom+xml\":[\"atom\"],\"application/atomcat+xml\":[\"atomcat\"],\"application/atomsvc+xml\":[\"atomsvc\"],\"application/bdoc\":[\"bdoc\"],\"application/ccxml+xml\":[\"ccxml\"],\"application/cdmi-capability\":[\"cdmia\"],\"application/cdmi-container\":[\"cdmic\"],\"application/cdmi-domain\":[\"cdmid\"],\"application/cdmi-object\":[\"cdmio\"],\"application/cdmi-queue\":[\"cdmiq\"],\"application/cu-seeme\":[\"cu\"],\"application/dash+xml\":[\"mpd\"],\"application/davmount+xml\":[\"davmount\"],\"application/docbook+xml\":[\"dbk\"],\"application/dssc+der\":[\"dssc\"],\"application/dssc+xml\":[\"xdssc\"],\"application/ecmascript\":[\"ecma\"],\"application/emma+xml\":[\"emma\"],\"application/epub+zip\":[\"epub\"],\"application/exi\":[\"exi\"],\"application/font-tdpfr\":[\"pfr\"],\"application/font-woff\":[],\"application/font-woff2\":[],\"application/geo+json\":[\"geojson\"],\"application/gml+xml\":[\"gml\"],\"application/gpx+xml\":[\"gpx\"],\"application/gxf\":[\"gxf\"],\"application/gzip\":[\"gz\"],\"application/hyperstudio\":[\"stk\"],\"application/inkml+xml\":[\"ink\",\"inkml\"],\"application/ipfix\":[\"ipfix\"],\"application/java-archive\":[\"jar\",\"war\",\"ear\"],\"application/java-serialized-object\":[\"ser\"],\"application/java-vm\":[\"class\"],\"application/javascript\":[\"js\",\"mjs\"],\"application/json\":[\"json\",\"map\"],\"application/json5\":[\"json5\"],\"application/jsonml+json\":[\"jsonml\"],\"application/ld+json\":[\"jsonld\"],\"application/lost+xml\":[\"lostxml\"],\"application/mac-binhex40\":[\"hqx\"],\"application/mac-compactpro\":[\"cpt\"],\"application/mads+xml\":[\"mads\"],\"application/manifest+json\":[\"webmanifest\"],\"application/marc\":[\"mrc\"],\"application/marcxml+xml\":[\"mrcx\"],\"application/mathematica\":[\"ma\",\"nb\",\"mb\"],\"application/mathml+xml\":[\"mathml\"],\"application/mbox\":[\"mbox\"],\"application/mediaservercontrol+xml\":[\"mscml\"],\"application/metalink+xml\":[\"metalink\"],\"application/metalink4+xml\":[\"meta4\"],\"application/mets+xml\":[\"mets\"],\"application/mods+xml\":[\"mods\"],\"application/mp21\":[\"m21\",\"mp21\"],\"application/mp4\":[\"mp4s\",\"m4p\"],\"application/msword\":[\"doc\",\"dot\"],\"application/mxf\":[\"mxf\"],\"application/octet-stream\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"],\"application/oda\":[\"oda\"],\"application/oebps-package+xml\":[\"opf\"],\"application/ogg\":[\"ogx\"],\"application/omdoc+xml\":[\"omdoc\"],\"application/onenote\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"],\"application/oxps\":[\"oxps\"],\"application/patch-ops-error+xml\":[\"xer\"],\"application/pdf\":[\"pdf\"],\"application/pgp-encrypted\":[\"pgp\"],\"application/pgp-signature\":[\"asc\",\"sig\"],\"application/pics-rules\":[\"prf\"],\"application/pkcs10\":[\"p10\"],\"application/pkcs7-mime\":[\"p7m\",\"p7c\"],\"application/pkcs7-signature\":[\"p7s\"],\"application/pkcs8\":[\"p8\"],\"application/pkix-attr-cert\":[\"ac\"],\"application/pkix-cert\":[\"cer\"],\"application/pkix-crl\":[\"crl\"],\"application/pkix-pkipath\":[\"pkipath\"],\"application/pkixcmp\":[\"pki\"],\"application/pls+xml\":[\"pls\"],\"application/postscript\":[\"ai\",\"eps\",\"ps\"],\"application/prs.cww\":[\"cww\"],\"application/pskc+xml\":[\"pskcxml\"],\"application/raml+yaml\":[\"raml\"],\"application/rdf+xml\":[\"rdf\"],\"application/reginfo+xml\":[\"rif\"],\"application/relax-ng-compact-syntax\":[\"rnc\"],\"application/resource-lists+xml\":[\"rl\"],\"application/resource-lists-diff+xml\":[\"rld\"],\"application/rls-services+xml\":[\"rs\"],\"application/rpki-ghostbusters\":[\"gbr\"],\"application/rpki-manifest\":[\"mft\"],\"application/rpki-roa\":[\"roa\"],\"application/rsd+xml\":[\"rsd\"],\"application/rss+xml\":[\"rss\"],\"application/rtf\":[\"rtf\"],\"application/sbml+xml\":[\"sbml\"],\"application/scvp-cv-request\":[\"scq\"],\"application/scvp-cv-response\":[\"scs\"],\"application/scvp-vp-request\":[\"spq\"],\"application/scvp-vp-response\":[\"spp\"],\"application/sdp\":[\"sdp\"],\"application/set-payment-initiation\":[\"setpay\"],\"application/set-registration-initiation\":[\"setreg\"],\"application/shf+xml\":[\"shf\"],\"application/smil+xml\":[\"smi\",\"smil\"],\"application/sparql-query\":[\"rq\"],\"application/sparql-results+xml\":[\"srx\"],\"application/srgs\":[\"gram\"],\"application/srgs+xml\":[\"grxml\"],\"application/sru+xml\":[\"sru\"],\"application/ssdl+xml\":[\"ssdl\"],\"application/ssml+xml\":[\"ssml\"],\"application/tei+xml\":[\"tei\",\"teicorpus\"],\"application/thraud+xml\":[\"tfi\"],\"application/timestamped-data\":[\"tsd\"],\"application/vnd.3gpp.pic-bw-large\":[\"plb\"],\"application/vnd.3gpp.pic-bw-small\":[\"psb\"],\"application/vnd.3gpp.pic-bw-var\":[\"pvb\"],\"application/vnd.3gpp2.tcap\":[\"tcap\"],\"application/vnd.3m.post-it-notes\":[\"pwn\"],\"application/vnd.accpac.simply.aso\":[\"aso\"],\"application/vnd.accpac.simply.imp\":[\"imp\"],\"application/vnd.acucobol\":[\"acu\"],\"application/vnd.acucorp\":[\"atc\",\"acutc\"],\"application/vnd.adobe.air-application-installer-package+zip\":[\"air\"],\"application/vnd.adobe.formscentral.fcdt\":[\"fcdt\"],\"application/vnd.adobe.fxp\":[\"fxp\",\"fxpl\"],\"application/vnd.adobe.xdp+xml\":[\"xdp\"],\"application/vnd.adobe.xfdf\":[\"xfdf\"],\"application/vnd.ahead.space\":[\"ahead\"],\"application/vnd.airzip.filesecure.azf\":[\"azf\"],\"application/vnd.airzip.filesecure.azs\":[\"azs\"],\"application/vnd.amazon.ebook\":[\"azw\"],\"application/vnd.americandynamics.acc\":[\"acc\"],\"application/vnd.amiga.ami\":[\"ami\"],\"application/vnd.android.package-archive\":[\"apk\"],\"application/vnd.anser-web-certificate-issue-initiation\":[\"cii\"],\"application/vnd.anser-web-funds-transfer-initiation\":[\"fti\"],\"application/vnd.antix.game-component\":[\"atx\"],\"application/vnd.apple.installer+xml\":[\"mpkg\"],\"application/vnd.apple.mpegurl\":[\"m3u8\"],\"application/vnd.apple.pkpass\":[\"pkpass\"],\"application/vnd.aristanetworks.swi\":[\"swi\"],\"application/vnd.astraea-software.iota\":[\"iota\"],\"application/vnd.audiograph\":[\"aep\"],\"application/vnd.blueice.multipass\":[\"mpm\"],\"application/vnd.bmi\":[\"bmi\"],\"application/vnd.businessobjects\":[\"rep\"],\"application/vnd.chemdraw+xml\":[\"cdxml\"],\"application/vnd.chipnuts.karaoke-mmd\":[\"mmd\"],\"application/vnd.cinderella\":[\"cdy\"],\"application/vnd.claymore\":[\"cla\"],\"application/vnd.cloanto.rp9\":[\"rp9\"],\"application/vnd.clonk.c4group\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"],\"application/vnd.cluetrust.cartomobile-config\":[\"c11amc\"],\"application/vnd.cluetrust.cartomobile-config-pkg\":[\"c11amz\"],\"application/vnd.commonspace\":[\"csp\"],\"application/vnd.contact.cmsg\":[\"cdbcmsg\"],\"application/vnd.cosmocaller\":[\"cmc\"],\"application/vnd.crick.clicker\":[\"clkx\"],\"application/vnd.crick.clicker.keyboard\":[\"clkk\"],\"application/vnd.crick.clicker.palette\":[\"clkp\"],\"application/vnd.crick.clicker.template\":[\"clkt\"],\"application/vnd.crick.clicker.wordbank\":[\"clkw\"],\"application/vnd.criticaltools.wbs+xml\":[\"wbs\"],\"application/vnd.ctc-posml\":[\"pml\"],\"application/vnd.cups-ppd\":[\"ppd\"],\"application/vnd.curl.car\":[\"car\"],\"application/vnd.curl.pcurl\":[\"pcurl\"],\"application/vnd.dart\":[\"dart\"],\"application/vnd.data-vision.rdz\":[\"rdz\"],\"application/vnd.dece.data\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"],\"application/vnd.dece.ttml+xml\":[\"uvt\",\"uvvt\"],\"application/vnd.dece.unspecified\":[\"uvx\",\"uvvx\"],\"application/vnd.dece.zip\":[\"uvz\",\"uvvz\"],\"application/vnd.denovo.fcselayout-link\":[\"fe_launch\"],\"application/vnd.dna\":[\"dna\"],\"application/vnd.dolby.mlp\":[\"mlp\"],\"application/vnd.dpgraph\":[\"dpg\"],\"application/vnd.dreamfactory\":[\"dfac\"],\"application/vnd.ds-keypoint\":[\"kpxx\"],\"application/vnd.dvb.ait\":[\"ait\"],\"application/vnd.dvb.service\":[\"svc\"],\"application/vnd.dynageo\":[\"geo\"],\"application/vnd.ecowin.chart\":[\"mag\"],\"application/vnd.enliven\":[\"nml\"],\"application/vnd.epson.esf\":[\"esf\"],\"application/vnd.epson.msf\":[\"msf\"],\"application/vnd.epson.quickanime\":[\"qam\"],\"application/vnd.epson.salt\":[\"slt\"],\"application/vnd.epson.ssf\":[\"ssf\"],\"application/vnd.eszigno3+xml\":[\"es3\",\"et3\"],\"application/vnd.ezpix-album\":[\"ez2\"],\"application/vnd.ezpix-package\":[\"ez3\"],\"application/vnd.fdf\":[\"fdf\"],\"application/vnd.fdsn.mseed\":[\"mseed\"],\"application/vnd.fdsn.seed\":[\"seed\",\"dataless\"],\"application/vnd.flographit\":[\"gph\"],\"application/vnd.fluxtime.clip\":[\"ftc\"],\"application/vnd.framemaker\":[\"fm\",\"frame\",\"maker\",\"book\"],\"application/vnd.frogans.fnc\":[\"fnc\"],\"application/vnd.frogans.ltf\":[\"ltf\"],\"application/vnd.fsc.weblaunch\":[\"fsc\"],\"application/vnd.fujitsu.oasys\":[\"oas\"],\"application/vnd.fujitsu.oasys2\":[\"oa2\"],\"application/vnd.fujitsu.oasys3\":[\"oa3\"],\"application/vnd.fujitsu.oasysgp\":[\"fg5\"],\"application/vnd.fujitsu.oasysprs\":[\"bh2\"],\"application/vnd.fujixerox.ddd\":[\"ddd\"],\"application/vnd.fujixerox.docuworks\":[\"xdw\"],\"application/vnd.fujixerox.docuworks.binder\":[\"xbd\"],\"application/vnd.fuzzysheet\":[\"fzs\"],\"application/vnd.genomatix.tuxedo\":[\"txd\"],\"application/vnd.geogebra.file\":[\"ggb\"],\"application/vnd.geogebra.tool\":[\"ggt\"],\"application/vnd.geometry-explorer\":[\"gex\",\"gre\"],\"application/vnd.geonext\":[\"gxt\"],\"application/vnd.geoplan\":[\"g2w\"],\"application/vnd.geospace\":[\"g3w\"],\"application/vnd.gmx\":[\"gmx\"],\"application/vnd.google-apps.document\":[\"gdoc\"],\"application/vnd.google-apps.presentation\":[\"gslides\"],\"application/vnd.google-apps.spreadsheet\":[\"gsheet\"],\"application/vnd.google-earth.kml+xml\":[\"kml\"],\"application/vnd.google-earth.kmz\":[\"kmz\"],\"application/vnd.grafeq\":[\"gqf\",\"gqs\"],\"application/vnd.groove-account\":[\"gac\"],\"application/vnd.groove-help\":[\"ghf\"],\"application/vnd.groove-identity-message\":[\"gim\"],\"application/vnd.groove-injector\":[\"grv\"],\"application/vnd.groove-tool-message\":[\"gtm\"],\"application/vnd.groove-tool-template\":[\"tpl\"],\"application/vnd.groove-vcard\":[\"vcg\"],\"application/vnd.hal+xml\":[\"hal\"],\"application/vnd.handheld-entertainment+xml\":[\"zmm\"],\"application/vnd.hbci\":[\"hbci\"],\"application/vnd.hhe.lesson-player\":[\"les\"],\"application/vnd.hp-hpgl\":[\"hpgl\"],\"application/vnd.hp-hpid\":[\"hpid\"],\"application/vnd.hp-hps\":[\"hps\"],\"application/vnd.hp-jlyt\":[\"jlt\"],\"application/vnd.hp-pcl\":[\"pcl\"],\"application/vnd.hp-pclxl\":[\"pclxl\"],\"application/vnd.hydrostatix.sof-data\":[\"sfd-hdstx\"],\"application/vnd.ibm.minipay\":[\"mpy\"],\"application/vnd.ibm.modcap\":[\"afp\",\"listafp\",\"list3820\"],\"application/vnd.ibm.rights-management\":[\"irm\"],\"application/vnd.ibm.secure-container\":[\"sc\"],\"application/vnd.iccprofile\":[\"icc\",\"icm\"],\"application/vnd.igloader\":[\"igl\"],\"application/vnd.immervision-ivp\":[\"ivp\"],\"application/vnd.immervision-ivu\":[\"ivu\"],\"application/vnd.insors.igm\":[\"igm\"],\"application/vnd.intercon.formnet\":[\"xpw\",\"xpx\"],\"application/vnd.intergeo\":[\"i2g\"],\"application/vnd.intu.qbo\":[\"qbo\"],\"application/vnd.intu.qfx\":[\"qfx\"],\"application/vnd.ipunplugged.rcprofile\":[\"rcprofile\"],\"application/vnd.irepository.package+xml\":[\"irp\"],\"application/vnd.is-xpr\":[\"xpr\"],\"application/vnd.isac.fcs\":[\"fcs\"],\"application/vnd.jam\":[\"jam\"],\"application/vnd.jcp.javame.midlet-rms\":[\"rms\"],\"application/vnd.jisp\":[\"jisp\"],\"application/vnd.joost.joda-archive\":[\"joda\"],\"application/vnd.kahootz\":[\"ktz\",\"ktr\"],\"application/vnd.kde.karbon\":[\"karbon\"],\"application/vnd.kde.kchart\":[\"chrt\"],\"application/vnd.kde.kformula\":[\"kfo\"],\"application/vnd.kde.kivio\":[\"flw\"],\"application/vnd.kde.kontour\":[\"kon\"],\"application/vnd.kde.kpresenter\":[\"kpr\",\"kpt\"],\"application/vnd.kde.kspread\":[\"ksp\"],\"application/vnd.kde.kword\":[\"kwd\",\"kwt\"],\"application/vnd.kenameaapp\":[\"htke\"],\"application/vnd.kidspiration\":[\"kia\"],\"application/vnd.kinar\":[\"kne\",\"knp\"],\"application/vnd.koan\":[\"skp\",\"skd\",\"skt\",\"skm\"],\"application/vnd.kodak-descriptor\":[\"sse\"],\"application/vnd.las.las+xml\":[\"lasxml\"],\"application/vnd.llamagraphics.life-balance.desktop\":[\"lbd\"],\"application/vnd.llamagraphics.life-balance.exchange+xml\":[\"lbe\"],\"application/vnd.lotus-1-2-3\":[\"123\"],\"application/vnd.lotus-approach\":[\"apr\"],\"application/vnd.lotus-freelance\":[\"pre\"],\"application/vnd.lotus-notes\":[\"nsf\"],\"application/vnd.lotus-organizer\":[\"org\"],\"application/vnd.lotus-screencam\":[\"scm\"],\"application/vnd.lotus-wordpro\":[\"lwp\"],\"application/vnd.macports.portpkg\":[\"portpkg\"],\"application/vnd.mcd\":[\"mcd\"],\"application/vnd.medcalcdata\":[\"mc1\"],\"application/vnd.mediastation.cdkey\":[\"cdkey\"],\"application/vnd.mfer\":[\"mwf\"],\"application/vnd.mfmp\":[\"mfm\"],\"application/vnd.micrografx.flo\":[\"flo\"],\"application/vnd.micrografx.igx\":[\"igx\"],\"application/vnd.mif\":[\"mif\"],\"application/vnd.mobius.daf\":[\"daf\"],\"application/vnd.mobius.dis\":[\"dis\"],\"application/vnd.mobius.mbk\":[\"mbk\"],\"application/vnd.mobius.mqy\":[\"mqy\"],\"application/vnd.mobius.msl\":[\"msl\"],\"application/vnd.mobius.plc\":[\"plc\"],\"application/vnd.mobius.txf\":[\"txf\"],\"application/vnd.mophun.application\":[\"mpn\"],\"application/vnd.mophun.certificate\":[\"mpc\"],\"application/vnd.mozilla.xul+xml\":[\"xul\"],\"application/vnd.ms-artgalry\":[\"cil\"],\"application/vnd.ms-cab-compressed\":[\"cab\"],\"application/vnd.ms-excel\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"],\"application/vnd.ms-excel.addin.macroenabled.12\":[\"xlam\"],\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":[\"xlsb\"],\"application/vnd.ms-excel.sheet.macroenabled.12\":[\"xlsm\"],\"application/vnd.ms-excel.template.macroenabled.12\":[\"xltm\"],\"application/vnd.ms-fontobject\":[\"eot\"],\"application/vnd.ms-htmlhelp\":[\"chm\"],\"application/vnd.ms-ims\":[\"ims\"],\"application/vnd.ms-lrm\":[\"lrm\"],\"application/vnd.ms-officetheme\":[\"thmx\"],\"application/vnd.ms-outlook\":[\"msg\"],\"application/vnd.ms-pki.seccat\":[\"cat\"],\"application/vnd.ms-pki.stl\":[\"stl\"],\"application/vnd.ms-powerpoint\":[\"ppt\",\"pps\",\"pot\"],\"application/vnd.ms-powerpoint.addin.macroenabled.12\":[\"ppam\"],\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":[\"pptm\"],\"application/vnd.ms-powerpoint.slide.macroenabled.12\":[\"sldm\"],\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":[\"ppsm\"],\"application/vnd.ms-powerpoint.template.macroenabled.12\":[\"potm\"],\"application/vnd.ms-project\":[\"mpp\",\"mpt\"],\"application/vnd.ms-word.document.macroenabled.12\":[\"docm\"],\"application/vnd.ms-word.template.macroenabled.12\":[\"dotm\"],\"application/vnd.ms-works\":[\"wps\",\"wks\",\"wcm\",\"wdb\"],\"application/vnd.ms-wpl\":[\"wpl\"],\"application/vnd.ms-xpsdocument\":[\"xps\"],\"application/vnd.mseq\":[\"mseq\"],\"application/vnd.musician\":[\"mus\"],\"application/vnd.muvee.style\":[\"msty\"],\"application/vnd.mynfc\":[\"taglet\"],\"application/vnd.neurolanguage.nlu\":[\"nlu\"],\"application/vnd.nitf\":[\"ntf\",\"nitf\"],\"application/vnd.noblenet-directory\":[\"nnd\"],\"application/vnd.noblenet-sealer\":[\"nns\"],\"application/vnd.noblenet-web\":[\"nnw\"],\"application/vnd.nokia.n-gage.data\":[\"ngdat\"],\"application/vnd.nokia.n-gage.symbian.install\":[\"n-gage\"],\"application/vnd.nokia.radio-preset\":[\"rpst\"],\"application/vnd.nokia.radio-presets\":[\"rpss\"],\"application/vnd.novadigm.edm\":[\"edm\"],\"application/vnd.novadigm.edx\":[\"edx\"],\"application/vnd.novadigm.ext\":[\"ext\"],\"application/vnd.oasis.opendocument.chart\":[\"odc\"],\"application/vnd.oasis.opendocument.chart-template\":[\"otc\"],\"application/vnd.oasis.opendocument.database\":[\"odb\"],\"application/vnd.oasis.opendocument.formula\":[\"odf\"],\"application/vnd.oasis.opendocument.formula-template\":[\"odft\"],\"application/vnd.oasis.opendocument.graphics\":[\"odg\"],\"application/vnd.oasis.opendocument.graphics-template\":[\"otg\"],\"application/vnd.oasis.opendocument.image\":[\"odi\"],\"application/vnd.oasis.opendocument.image-template\":[\"oti\"],\"application/vnd.oasis.opendocument.presentation\":[\"odp\"],\"application/vnd.oasis.opendocument.presentation-template\":[\"otp\"],\"application/vnd.oasis.opendocument.spreadsheet\":[\"ods\"],\"application/vnd.oasis.opendocument.spreadsheet-template\":[\"ots\"],\"application/vnd.oasis.opendocument.text\":[\"odt\"],\"application/vnd.oasis.opendocument.text-master\":[\"odm\"],\"application/vnd.oasis.opendocument.text-template\":[\"ott\"],\"application/vnd.oasis.opendocument.text-web\":[\"oth\"],\"application/vnd.olpc-sugar\":[\"xo\"],\"application/vnd.oma.dd2+xml\":[\"dd2\"],\"application/vnd.openofficeorg.extension\":[\"oxt\"],\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":[\"pptx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slide\":[\"sldx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":[\"ppsx\"],\"application/vnd.openxmlformats-officedocument.presentationml.template\":[\"potx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":[\"xlsx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":[\"xltx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":[\"docx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":[\"dotx\"],\"application/vnd.osgeo.mapguide.package\":[\"mgp\"],\"application/vnd.osgi.dp\":[\"dp\"],\"application/vnd.osgi.subsystem\":[\"esa\"],\"application/vnd.palm\":[\"pdb\",\"pqa\",\"oprc\"],\"application/vnd.pawaafile\":[\"paw\"],\"application/vnd.pg.format\":[\"str\"],\"application/vnd.pg.osasli\":[\"ei6\"],\"application/vnd.picsel\":[\"efif\"],\"application/vnd.pmi.widget\":[\"wg\"],\"application/vnd.pocketlearn\":[\"plf\"],\"application/vnd.powerbuilder6\":[\"pbd\"],\"application/vnd.previewsystems.box\":[\"box\"],\"application/vnd.proteus.magazine\":[\"mgz\"],\"application/vnd.publishare-delta-tree\":[\"qps\"],\"application/vnd.pvi.ptid1\":[\"ptid\"],\"application/vnd.quark.quarkxpress\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"],\"application/vnd.realvnc.bed\":[\"bed\"],\"application/vnd.recordare.musicxml\":[\"mxl\"],\"application/vnd.recordare.musicxml+xml\":[\"musicxml\"],\"application/vnd.rig.cryptonote\":[\"cryptonote\"],\"application/vnd.rim.cod\":[\"cod\"],\"application/vnd.rn-realmedia\":[\"rm\"],\"application/vnd.rn-realmedia-vbr\":[\"rmvb\"],\"application/vnd.route66.link66+xml\":[\"link66\"],\"application/vnd.sailingtracker.track\":[\"st\"],\"application/vnd.seemail\":[\"see\"],\"application/vnd.sema\":[\"sema\"],\"application/vnd.semd\":[\"semd\"],\"application/vnd.semf\":[\"semf\"],\"application/vnd.shana.informed.formdata\":[\"ifm\"],\"application/vnd.shana.informed.formtemplate\":[\"itp\"],\"application/vnd.shana.informed.interchange\":[\"iif\"],\"application/vnd.shana.informed.package\":[\"ipk\"],\"application/vnd.simtech-mindmapper\":[\"twd\",\"twds\"],\"application/vnd.smaf\":[\"mmf\"],\"application/vnd.smart.teacher\":[\"teacher\"],\"application/vnd.solent.sdkm+xml\":[\"sdkm\",\"sdkd\"],\"application/vnd.spotfire.dxp\":[\"dxp\"],\"application/vnd.spotfire.sfs\":[\"sfs\"],\"application/vnd.stardivision.calc\":[\"sdc\"],\"application/vnd.stardivision.draw\":[\"sda\"],\"application/vnd.stardivision.impress\":[\"sdd\"],\"application/vnd.stardivision.math\":[\"smf\"],\"application/vnd.stardivision.writer\":[\"sdw\",\"vor\"],\"application/vnd.stardivision.writer-global\":[\"sgl\"],\"application/vnd.stepmania.package\":[\"smzip\"],\"application/vnd.stepmania.stepchart\":[\"sm\"],\"application/vnd.sun.wadl+xml\":[\"wadl\"],\"application/vnd.sun.xml.calc\":[\"sxc\"],\"application/vnd.sun.xml.calc.template\":[\"stc\"],\"application/vnd.sun.xml.draw\":[\"sxd\"],\"application/vnd.sun.xml.draw.template\":[\"std\"],\"application/vnd.sun.xml.impress\":[\"sxi\"],\"application/vnd.sun.xml.impress.template\":[\"sti\"],\"application/vnd.sun.xml.math\":[\"sxm\"],\"application/vnd.sun.xml.writer\":[\"sxw\"],\"application/vnd.sun.xml.writer.global\":[\"sxg\"],\"application/vnd.sun.xml.writer.template\":[\"stw\"],\"application/vnd.sus-calendar\":[\"sus\",\"susp\"],\"application/vnd.svd\":[\"svd\"],\"application/vnd.symbian.install\":[\"sis\",\"sisx\"],\"application/vnd.syncml+xml\":[\"xsm\"],\"application/vnd.syncml.dm+wbxml\":[\"bdm\"],\"application/vnd.syncml.dm+xml\":[\"xdm\"],\"application/vnd.tao.intent-module-archive\":[\"tao\"],\"application/vnd.tcpdump.pcap\":[\"pcap\",\"cap\",\"dmp\"],\"application/vnd.tmobile-livetv\":[\"tmo\"],\"application/vnd.trid.tpt\":[\"tpt\"],\"application/vnd.triscape.mxs\":[\"mxs\"],\"application/vnd.trueapp\":[\"tra\"],\"application/vnd.ufdl\":[\"ufd\",\"ufdl\"],\"application/vnd.uiq.theme\":[\"utz\"],\"application/vnd.umajin\":[\"umj\"],\"application/vnd.unity\":[\"unityweb\"],\"application/vnd.uoml+xml\":[\"uoml\"],\"application/vnd.vcx\":[\"vcx\"],\"application/vnd.visio\":[\"vsd\",\"vst\",\"vss\",\"vsw\"],\"application/vnd.visionary\":[\"vis\"],\"application/vnd.vsf\":[\"vsf\"],\"application/vnd.wap.wbxml\":[\"wbxml\"],\"application/vnd.wap.wmlc\":[\"wmlc\"],\"application/vnd.wap.wmlscriptc\":[\"wmlsc\"],\"application/vnd.webturbo\":[\"wtb\"],\"application/vnd.wolfram.player\":[\"nbp\"],\"application/vnd.wordperfect\":[\"wpd\"],\"application/vnd.wqd\":[\"wqd\"],\"application/vnd.wt.stf\":[\"stf\"],\"application/vnd.xara\":[\"xar\"],\"application/vnd.xfdl\":[\"xfdl\"],\"application/vnd.yamaha.hv-dic\":[\"hvd\"],\"application/vnd.yamaha.hv-script\":[\"hvs\"],\"application/vnd.yamaha.hv-voice\":[\"hvp\"],\"application/vnd.yamaha.openscoreformat\":[\"osf\"],\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":[\"osfpvg\"],\"application/vnd.yamaha.smaf-audio\":[\"saf\"],\"application/vnd.yamaha.smaf-phrase\":[\"spf\"],\"application/vnd.yellowriver-custom-menu\":[\"cmp\"],\"application/vnd.zul\":[\"zir\",\"zirz\"],\"application/vnd.zzazz.deck+xml\":[\"zaz\"],\"application/voicexml+xml\":[\"vxml\"],\"application/wasm\":[\"wasm\"],\"application/widget\":[\"wgt\"],\"application/winhlp\":[\"hlp\"],\"application/wsdl+xml\":[\"wsdl\"],\"application/wspolicy+xml\":[\"wspolicy\"],\"application/x-7z-compressed\":[\"7z\"],\"application/x-abiword\":[\"abw\"],\"application/x-ace-compressed\":[\"ace\"],\"application/x-apple-diskimage\":[],\"application/x-arj\":[\"arj\"],\"application/x-authorware-bin\":[\"aab\",\"x32\",\"u32\",\"vox\"],\"application/x-authorware-map\":[\"aam\"],\"application/x-authorware-seg\":[\"aas\"],\"application/x-bcpio\":[\"bcpio\"],\"application/x-bdoc\":[],\"application/x-bittorrent\":[\"torrent\"],\"application/x-blorb\":[\"blb\",\"blorb\"],\"application/x-bzip\":[\"bz\"],\"application/x-bzip2\":[\"bz2\",\"boz\"],\"application/x-cbr\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"],\"application/x-cdlink\":[\"vcd\"],\"application/x-cfs-compressed\":[\"cfs\"],\"application/x-chat\":[\"chat\"],\"application/x-chess-pgn\":[\"pgn\"],\"application/x-chrome-extension\":[\"crx\"],\"application/x-cocoa\":[\"cco\"],\"application/x-conference\":[\"nsc\"],\"application/x-cpio\":[\"cpio\"],\"application/x-csh\":[\"csh\"],\"application/x-debian-package\":[\"udeb\"],\"application/x-dgc-compressed\":[\"dgc\"],\"application/x-director\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"],\"application/x-doom\":[\"wad\"],\"application/x-dtbncx+xml\":[\"ncx\"],\"application/x-dtbook+xml\":[\"dtb\"],\"application/x-dtbresource+xml\":[\"res\"],\"application/x-dvi\":[\"dvi\"],\"application/x-envoy\":[\"evy\"],\"application/x-eva\":[\"eva\"],\"application/x-font-bdf\":[\"bdf\"],\"application/x-font-ghostscript\":[\"gsf\"],\"application/x-font-linux-psf\":[\"psf\"],\"application/x-font-pcf\":[\"pcf\"],\"application/x-font-snf\":[\"snf\"],\"application/x-font-type1\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"],\"application/x-freearc\":[\"arc\"],\"application/x-futuresplash\":[\"spl\"],\"application/x-gca-compressed\":[\"gca\"],\"application/x-glulx\":[\"ulx\"],\"application/x-gnumeric\":[\"gnumeric\"],\"application/x-gramps-xml\":[\"gramps\"],\"application/x-gtar\":[\"gtar\"],\"application/x-hdf\":[\"hdf\"],\"application/x-httpd-php\":[\"php\"],\"application/x-install-instructions\":[\"install\"],\"application/x-iso9660-image\":[],\"application/x-java-archive-diff\":[\"jardiff\"],\"application/x-java-jnlp-file\":[\"jnlp\"],\"application/x-latex\":[\"latex\"],\"application/x-lua-bytecode\":[\"luac\"],\"application/x-lzh-compressed\":[\"lzh\",\"lha\"],\"application/x-makeself\":[\"run\"],\"application/x-mie\":[\"mie\"],\"application/x-mobipocket-ebook\":[\"prc\",\"mobi\"],\"application/x-ms-application\":[\"application\"],\"application/x-ms-shortcut\":[\"lnk\"],\"application/x-ms-wmd\":[\"wmd\"],\"application/x-ms-wmz\":[\"wmz\"],\"application/x-ms-xbap\":[\"xbap\"],\"application/x-msaccess\":[\"mdb\"],\"application/x-msbinder\":[\"obd\"],\"application/x-mscardfile\":[\"crd\"],\"application/x-msclip\":[\"clp\"],\"application/x-msdos-program\":[],\"application/x-msdownload\":[\"com\",\"bat\"],\"application/x-msmediaview\":[\"mvb\",\"m13\",\"m14\"],\"application/x-msmetafile\":[\"wmf\",\"emf\",\"emz\"],\"application/x-msmoney\":[\"mny\"],\"application/x-mspublisher\":[\"pub\"],\"application/x-msschedule\":[\"scd\"],\"application/x-msterminal\":[\"trm\"],\"application/x-mswrite\":[\"wri\"],\"application/x-netcdf\":[\"nc\",\"cdf\"],\"application/x-ns-proxy-autoconfig\":[\"pac\"],\"application/x-nzb\":[\"nzb\"],\"application/x-perl\":[\"pl\",\"pm\"],\"application/x-pilot\":[],\"application/x-pkcs12\":[\"p12\",\"pfx\"],\"application/x-pkcs7-certificates\":[\"p7b\",\"spc\"],\"application/x-pkcs7-certreqresp\":[\"p7r\"],\"application/x-rar-compressed\":[\"rar\"],\"application/x-redhat-package-manager\":[\"rpm\"],\"application/x-research-info-systems\":[\"ris\"],\"application/x-sea\":[\"sea\"],\"application/x-sh\":[\"sh\"],\"application/x-shar\":[\"shar\"],\"application/x-shockwave-flash\":[\"swf\"],\"application/x-silverlight-app\":[\"xap\"],\"application/x-sql\":[\"sql\"],\"application/x-stuffit\":[\"sit\"],\"application/x-stuffitx\":[\"sitx\"],\"application/x-subrip\":[\"srt\"],\"application/x-sv4cpio\":[\"sv4cpio\"],\"application/x-sv4crc\":[\"sv4crc\"],\"application/x-t3vm-image\":[\"t3\"],\"application/x-tads\":[\"gam\"],\"application/x-tar\":[\"tar\"],\"application/x-tcl\":[\"tcl\",\"tk\"],\"application/x-tex\":[\"tex\"],\"application/x-tex-tfm\":[\"tfm\"],\"application/x-texinfo\":[\"texinfo\",\"texi\"],\"application/x-tgif\":[\"obj\"],\"application/x-ustar\":[\"ustar\"],\"application/x-virtualbox-hdd\":[\"hdd\"],\"application/x-virtualbox-ova\":[\"ova\"],\"application/x-virtualbox-ovf\":[\"ovf\"],\"application/x-virtualbox-vbox\":[\"vbox\"],\"application/x-virtualbox-vbox-extpack\":[\"vbox-extpack\"],\"application/x-virtualbox-vdi\":[\"vdi\"],\"application/x-virtualbox-vhd\":[\"vhd\"],\"application/x-virtualbox-vmdk\":[\"vmdk\"],\"application/x-wais-source\":[\"src\"],\"application/x-web-app-manifest+json\":[\"webapp\"],\"application/x-x509-ca-cert\":[\"der\",\"crt\",\"pem\"],\"application/x-xfig\":[\"fig\"],\"application/x-xliff+xml\":[\"xlf\"],\"application/x-xpinstall\":[\"xpi\"],\"application/x-xz\":[\"xz\"],\"application/x-zmachine\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"],\"application/xaml+xml\":[\"xaml\"],\"application/xcap-diff+xml\":[\"xdf\"],\"application/xenc+xml\":[\"xenc\"],\"application/xhtml+xml\":[\"xhtml\",\"xht\"],\"application/xml\":[\"xml\",\"xsl\",\"xsd\",\"rng\"],\"application/xml-dtd\":[\"dtd\"],\"application/xop+xml\":[\"xop\"],\"application/xproc+xml\":[\"xpl\"],\"application/xslt+xml\":[\"xslt\"],\"application/xspf+xml\":[\"xspf\"],\"application/xv+xml\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"],\"application/yang\":[\"yang\"],\"application/yin+xml\":[\"yin\"],\"application/zip\":[\"zip\"],\"audio/3gpp\":[],\"audio/adpcm\":[\"adp\"],\"audio/basic\":[\"au\",\"snd\"],\"audio/midi\":[\"mid\",\"midi\",\"kar\",\"rmi\"],\"audio/mp3\":[],\"audio/mp4\":[\"m4a\",\"mp4a\"],\"audio/mpeg\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"],\"audio/ogg\":[\"oga\",\"ogg\",\"spx\"],\"audio/s3m\":[\"s3m\"],\"audio/silk\":[\"sil\"],\"audio/vnd.dece.audio\":[\"uva\",\"uvva\"],\"audio/vnd.digital-winds\":[\"eol\"],\"audio/vnd.dra\":[\"dra\"],\"audio/vnd.dts\":[\"dts\"],\"audio/vnd.dts.hd\":[\"dtshd\"],\"audio/vnd.lucent.voice\":[\"lvp\"],\"audio/vnd.ms-playready.media.pya\":[\"pya\"],\"audio/vnd.nuera.ecelp4800\":[\"ecelp4800\"],\"audio/vnd.nuera.ecelp7470\":[\"ecelp7470\"],\"audio/vnd.nuera.ecelp9600\":[\"ecelp9600\"],\"audio/vnd.rip\":[\"rip\"],\"audio/wav\":[\"wav\"],\"audio/wave\":[],\"audio/webm\":[\"weba\"],\"audio/x-aac\":[\"aac\"],\"audio/x-aiff\":[\"aif\",\"aiff\",\"aifc\"],\"audio/x-caf\":[\"caf\"],\"audio/x-flac\":[\"flac\"],\"audio/x-m4a\":[],\"audio/x-matroska\":[\"mka\"],\"audio/x-mpegurl\":[\"m3u\"],\"audio/x-ms-wax\":[\"wax\"],\"audio/x-ms-wma\":[\"wma\"],\"audio/x-pn-realaudio\":[\"ram\",\"ra\"],\"audio/x-pn-realaudio-plugin\":[\"rmp\"],\"audio/x-realaudio\":[],\"audio/x-wav\":[],\"audio/xm\":[\"xm\"],\"chemical/x-cdx\":[\"cdx\"],\"chemical/x-cif\":[\"cif\"],\"chemical/x-cmdf\":[\"cmdf\"],\"chemical/x-cml\":[\"cml\"],\"chemical/x-csml\":[\"csml\"],\"chemical/x-xyz\":[\"xyz\"],\"font/collection\":[\"ttc\"],\"font/otf\":[\"otf\"],\"font/ttf\":[\"ttf\"],\"font/woff\":[\"woff\"],\"font/woff2\":[\"woff2\"],\"image/apng\":[\"apng\"],\"image/bmp\":[\"bmp\"],\"image/cgm\":[\"cgm\"],\"image/g3fax\":[\"g3\"],\"image/gif\":[\"gif\"],\"image/ief\":[\"ief\"],\"image/jp2\":[\"jp2\",\"jpg2\"],\"image/jpeg\":[\"jpeg\",\"jpg\",\"jpe\"],\"image/jpm\":[\"jpm\"],\"image/jpx\":[\"jpx\",\"jpf\"],\"image/ktx\":[\"ktx\"],\"image/png\":[\"png\"],\"image/prs.btif\":[\"btif\"],\"image/sgi\":[\"sgi\"],\"image/svg+xml\":[\"svg\",\"svgz\"],\"image/tiff\":[\"tiff\",\"tif\"],\"image/vnd.adobe.photoshop\":[\"psd\"],\"image/vnd.dece.graphic\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"],\"image/vnd.djvu\":[\"djvu\",\"djv\"],\"image/vnd.dvb.subtitle\":[],\"image/vnd.dwg\":[\"dwg\"],\"image/vnd.dxf\":[\"dxf\"],\"image/vnd.fastbidsheet\":[\"fbs\"],\"image/vnd.fpx\":[\"fpx\"],\"image/vnd.fst\":[\"fst\"],\"image/vnd.fujixerox.edmics-mmr\":[\"mmr\"],\"image/vnd.fujixerox.edmics-rlc\":[\"rlc\"],\"image/vnd.ms-modi\":[\"mdi\"],\"image/vnd.ms-photo\":[\"wdp\"],\"image/vnd.net-fpx\":[\"npx\"],\"image/vnd.wap.wbmp\":[\"wbmp\"],\"image/vnd.xiff\":[\"xif\"],\"image/webp\":[\"webp\"],\"image/x-3ds\":[\"3ds\"],\"image/x-cmu-raster\":[\"ras\"],\"image/x-cmx\":[\"cmx\"],\"image/x-freehand\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"],\"image/x-icon\":[\"ico\"],\"image/x-jng\":[\"jng\"],\"image/x-mrsid-image\":[\"sid\"],\"image/x-ms-bmp\":[],\"image/x-pcx\":[\"pcx\"],\"image/x-pict\":[\"pic\",\"pct\"],\"image/x-portable-anymap\":[\"pnm\"],\"image/x-portable-bitmap\":[\"pbm\"],\"image/x-portable-graymap\":[\"pgm\"],\"image/x-portable-pixmap\":[\"ppm\"],\"image/x-rgb\":[\"rgb\"],\"image/x-tga\":[\"tga\"],\"image/x-xbitmap\":[\"xbm\"],\"image/x-xpixmap\":[\"xpm\"],\"image/x-xwindowdump\":[\"xwd\"],\"message/rfc822\":[\"eml\",\"mime\"],\"model/gltf+json\":[\"gltf\"],\"model/gltf-binary\":[\"glb\"],\"model/iges\":[\"igs\",\"iges\"],\"model/mesh\":[\"msh\",\"mesh\",\"silo\"],\"model/vnd.collada+xml\":[\"dae\"],\"model/vnd.dwf\":[\"dwf\"],\"model/vnd.gdl\":[\"gdl\"],\"model/vnd.gtw\":[\"gtw\"],\"model/vnd.mts\":[\"mts\"],\"model/vnd.vtu\":[\"vtu\"],\"model/vrml\":[\"wrl\",\"vrml\"],\"model/x3d+binary\":[\"x3db\",\"x3dbz\"],\"model/x3d+vrml\":[\"x3dv\",\"x3dvz\"],\"model/x3d+xml\":[\"x3d\",\"x3dz\"],\"text/cache-manifest\":[\"appcache\",\"manifest\"],\"text/calendar\":[\"ics\",\"ifb\"],\"text/coffeescript\":[\"coffee\",\"litcoffee\"],\"text/css\":[\"css\"],\"text/csv\":[\"csv\"],\"text/hjson\":[\"hjson\"],\"text/html\":[\"html\",\"htm\",\"shtml\"],\"text/jade\":[\"jade\"],\"text/jsx\":[\"jsx\"],\"text/less\":[\"less\"],\"text/markdown\":[\"markdown\",\"md\"],\"text/mathml\":[\"mml\"],\"text/n3\":[\"n3\"],\"text/plain\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"],\"text/prs.lines.tag\":[\"dsc\"],\"text/richtext\":[\"rtx\"],\"text/rtf\":[],\"text/sgml\":[\"sgml\",\"sgm\"],\"text/slim\":[\"slim\",\"slm\"],\"text/stylus\":[\"stylus\",\"styl\"],\"text/tab-separated-values\":[\"tsv\"],\"text/troff\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"],\"text/turtle\":[\"ttl\"],\"text/uri-list\":[\"uri\",\"uris\",\"urls\"],\"text/vcard\":[\"vcard\"],\"text/vnd.curl\":[\"curl\"],\"text/vnd.curl.dcurl\":[\"dcurl\"],\"text/vnd.curl.mcurl\":[\"mcurl\"],\"text/vnd.curl.scurl\":[\"scurl\"],\"text/vnd.dvb.subtitle\":[\"sub\"],\"text/vnd.fly\":[\"fly\"],\"text/vnd.fmi.flexstor\":[\"flx\"],\"text/vnd.graphviz\":[\"gv\"],\"text/vnd.in3d.3dml\":[\"3dml\"],\"text/vnd.in3d.spot\":[\"spot\"],\"text/vnd.sun.j2me.app-descriptor\":[\"jad\"],\"text/vnd.wap.wml\":[\"wml\"],\"text/vnd.wap.wmlscript\":[\"wmls\"],\"text/vtt\":[\"vtt\"],\"text/x-asm\":[\"s\",\"asm\"],\"text/x-c\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"],\"text/x-component\":[\"htc\"],\"text/x-fortran\":[\"f\",\"for\",\"f77\",\"f90\"],\"text/x-handlebars-template\":[\"hbs\"],\"text/x-java-source\":[\"java\"],\"text/x-lua\":[\"lua\"],\"text/x-markdown\":[\"mkd\"],\"text/x-nfo\":[\"nfo\"],\"text/x-opml\":[\"opml\"],\"text/x-org\":[],\"text/x-pascal\":[\"p\",\"pas\"],\"text/x-processing\":[\"pde\"],\"text/x-sass\":[\"sass\"],\"text/x-scss\":[\"scss\"],\"text/x-setext\":[\"etx\"],\"text/x-sfv\":[\"sfv\"],\"text/x-suse-ymp\":[\"ymp\"],\"text/x-uuencode\":[\"uu\"],\"text/x-vcalendar\":[\"vcs\"],\"text/x-vcard\":[\"vcf\"],\"text/xml\":[],\"text/yaml\":[\"yaml\",\"yml\"],\"video/3gpp\":[\"3gp\",\"3gpp\"],\"video/3gpp2\":[\"3g2\"],\"video/h261\":[\"h261\"],\"video/h263\":[\"h263\"],\"video/h264\":[\"h264\"],\"video/jpeg\":[\"jpgv\"],\"video/jpm\":[\"jpgm\"],\"video/mj2\":[\"mj2\",\"mjp2\"],\"video/mp2t\":[\"ts\"],\"video/mp4\":[\"mp4\",\"mp4v\",\"mpg4\"],\"video/mpeg\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"],\"video/ogg\":[\"ogv\"],\"video/quicktime\":[\"qt\",\"mov\"],\"video/vnd.dece.hd\":[\"uvh\",\"uvvh\"],\"video/vnd.dece.mobile\":[\"uvm\",\"uvvm\"],\"video/vnd.dece.pd\":[\"uvp\",\"uvvp\"],\"video/vnd.dece.sd\":[\"uvs\",\"uvvs\"],\"video/vnd.dece.video\":[\"uvv\",\"uvvv\"],\"video/vnd.dvb.file\":[\"dvb\"],\"video/vnd.fvt\":[\"fvt\"],\"video/vnd.mpegurl\":[\"mxu\",\"m4u\"],\"video/vnd.ms-playready.media.pyv\":[\"pyv\"],\"video/vnd.uvvu.mp4\":[\"uvu\",\"uvvu\"],\"video/vnd.vivo\":[\"viv\"],\"video/webm\":[\"webm\"],\"video/x-f4v\":[\"f4v\"],\"video/x-fli\":[\"fli\"],\"video/x-flv\":[\"flv\"],\"video/x-m4v\":[\"m4v\"],\"video/x-matroska\":[\"mkv\",\"mk3d\",\"mks\"],\"video/x-mng\":[\"mng\"],\"video/x-ms-asf\":[\"asf\",\"asx\"],\"video/x-ms-vob\":[\"vob\"],\"video/x-ms-wm\":[\"wm\"],\"video/x-ms-wmv\":[\"wmv\"],\"video/x-ms-wmx\":[\"wmx\"],\"video/x-ms-wvx\":[\"wvx\"],\"video/x-msvideo\":[\"avi\"],\"video/x-sgi-movie\":[\"movie\"],\"video/x-smv\":[\"smv\"],\"x-conference/x-cooltalk\":[\"ice\"]}", "var path = require('path');\nvar fs = require('fs');\n\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (process.env.DEBUG_MIME && this.types[exts[i]]) {\n        console.warn((this._loading || \"define()\").replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' +\n          this.types[exts[i]] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function(file) {\n  this._loading = file;\n  // Read file and split into lines\n  var map = {},\n      content = fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n\n  lines.forEach(function(line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n\n  this.define(map);\n\n  this._loading = null;\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function(path, fallback) {\n  var ext = path.replace(/^.*[\\.\\/\\\\]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function(mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Define built-in types\nmime.define(require('./types.json'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function(mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\/|^application\\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\n\nmodule.exports = mime;\n", "module.exports = require('util').inspect;\n", "var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar utilInspect = require('./util.inspect');\nvar inspectCustom = utilInspect.custom;\nvar inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n\nvar quotes = {\n    __proto__: null,\n    'double': '\"',\n    single: \"'\"\n};\nvar quoteREs = {\n    __proto__: null,\n    'double': /([\"\\\\])/g,\n    single: /(['\\\\])/g\n};\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && !has(quotes, opts.quoteStyle)) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n            return utilInspect(obj, { depth: maxDepth - depth });\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        if (mapForEach) {\n            mapForEach.call(obj, function (value, key) {\n                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n            });\n        }\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        if (setForEach) {\n            setForEach.call(obj, function (value) {\n                setParts.push(inspect(value, obj));\n            });\n        }\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other\n    /* eslint-env browser */\n    if (typeof window !== 'undefined' && obj === window) {\n        return '{ [object Window] }';\n    }\n    if (\n        (typeof globalThis !== 'undefined' && obj === globalThis)\n        || (typeof global !== 'undefined' && obj === global)\n    ) {\n        return '{ [object globalThis] }';\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var style = opts.quoteStyle || defaultStyle;\n    var quoteChar = quotes[style];\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction canTrustToString(obj) {\n    return !toStringTag || !(typeof obj === 'object' && (toStringTag in obj || typeof obj[toStringTag] !== 'undefined'));\n}\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && canTrustToString(obj); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && canTrustToString(obj); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && canTrustToString(obj); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && canTrustToString(obj); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && canTrustToString(obj); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && canTrustToString(obj); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && canTrustToString(obj); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    var quoteRE = quoteREs[opts.quoteStyle || 'single'];\n    quoteRE.lastIndex = 0;\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, quoteRE, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n", "'use strict';\n\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\n\n/*\n* This function traverses the list returning the node corresponding to the given key.\n*\n* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list.\n* By doing so, all the recently used nodes can be accessed relatively quickly.\n*/\n/** @type {import('./list.d.ts').listGetNode} */\n// eslint-disable-next-line consistent-return\nvar listGetNode = function (list, key, isDelete) {\n\t/** @type {typeof list | NonNullable<(typeof list)['next']>} */\n\tvar prev = list;\n\t/** @type {(typeof list)['next']} */\n\tvar curr;\n\t// eslint-disable-next-line eqeqeq\n\tfor (; (curr = prev.next) != null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\tif (!isDelete) {\n\t\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t\tcurr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);\n\t\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\t}\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\n/** @type {import('./list.d.ts').listGet} */\nvar listGet = function (objects, key) {\n\tif (!objects) {\n\t\treturn void undefined;\n\t}\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\n/** @type {import('./list.d.ts').listSet} */\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t});\n\t}\n};\n/** @type {import('./list.d.ts').listHas} */\nvar listHas = function (objects, key) {\n\tif (!objects) {\n\t\treturn false;\n\t}\n\treturn !!listGetNode(objects, key);\n};\n/** @type {import('./list.d.ts').listDelete} */\n// eslint-disable-next-line consistent-return\nvar listDelete = function (objects, key) {\n\tif (objects) {\n\t\treturn listGetNode(objects, key, true);\n\t}\n};\n\n/** @type {import('.')} */\nmodule.exports = function getSideChannelList() {\n\t/** @typedef {ReturnType<typeof getSideChannelList>} Channel */\n\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t/** @type {import('./list.d.ts').RootNode<V, K> | undefined} */ var $o;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\tvar root = $o && $o.next;\n\t\t\tvar deletedNode = listDelete($o, key);\n\t\t\tif (deletedNode && root && root === deletedNode) {\n\t\t\t\t$o = void undefined;\n\t\t\t}\n\t\t\treturn !!deletedNode;\n\t\t},\n\t\tget: function (key) {\n\t\t\treturn listGet($o, key);\n\t\t},\n\t\thas: function (key) {\n\t\t\treturn listHas($o, key);\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$o) {\n\t\t\t\t// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n\t\t\t\t$o = {\n\t\t\t\t\tnext: void undefined\n\t\t\t\t};\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\tlistSet(/** @type {NonNullable<typeof $o>} */ ($o), key, value);\n\t\t}\n\t};\n\t// @ts-expect-error TODO: figure out why this is erroring\n\treturn channel;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBindBasic = require('call-bind-apply-helpers');\n\n/** @type {(thisArg: string, searchString: string, position?: number) => number} */\nvar $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);\n\n/** @type {import('.')} */\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\t/* eslint no-extra-parens: 0 */\n\n\tvar intrinsic = /** @type {(this: unknown, ...args: unknown[]) => unknown} */ (GetIntrinsic(name, !!allowMissing));\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBindBasic(/** @type {const} */ ([intrinsic]));\n\t}\n\treturn intrinsic;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\nvar $Map = GetIntrinsic('%Map%', true);\n\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\nvar $mapGet = callBound('Map.prototype.get', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\nvar $mapSet = callBound('Map.prototype.set', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapHas = callBound('Map.prototype.has', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapDelete = callBound('Map.prototype.delete', true);\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */\nvar $mapSize = callBound('Map.prototype.size', true);\n\n/** @type {import('.')} */\nmodule.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {\n\t/** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\n\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t/** @type {Map<K, V> | undefined} */ var $m;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\tif ($m) {\n\t\t\t\tvar result = $mapDelete($m, key);\n\t\t\t\tif ($mapSize($m) === 0) {\n\t\t\t\t\t$m = void undefined;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($m) {\n\t\t\t\treturn $mapGet($m, key);\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($m) {\n\t\t\t\treturn $mapHas($m, key);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$m) {\n\t\t\t\t// @ts-expect-error TS can't handle narrowing a variable inside a closure\n\t\t\t\t$m = new $Map();\n\t\t\t}\n\t\t\t$mapSet($m, key, value);\n\t\t}\n\t};\n\n\t// @ts-expect-error TODO: figure out why TS is erroring here\n\treturn channel;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar inspect = require('object-inspect');\nvar getSideChannelMap = require('side-channel-map');\n\nvar $TypeError = require('es-errors/type');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\n\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => V} */\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K, value: V) => void} */\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */\nvar $weakMapDelete = callBound('WeakMap.prototype.delete', true);\n\n/** @type {import('.')} */\nmodule.exports = $WeakMap\n\t? /** @type {Exclude<import('.'), false>} */ function getSideChannelWeakMap() {\n\t\t/** @typedef {ReturnType<typeof getSideChannelWeakMap>} Channel */\n\t\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t\t/** @type {WeakMap<K & object, V> | undefined} */ var $wm;\n\t\t/** @type {Channel | undefined} */ var $m;\n\n\t\t/** @type {Channel} */\n\t\tvar channel = {\n\t\t\tassert: function (key) {\n\t\t\t\tif (!channel.has(key)) {\n\t\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t\t}\n\t\t\t},\n\t\t\t'delete': function (key) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapDelete($wm, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (getSideChannelMap) {\n\t\t\t\t\tif ($m) {\n\t\t\t\t\t\treturn $m['delete'](key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tget: function (key) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $m && $m.get(key);\n\t\t\t},\n\t\t\thas: function (key) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !!$m && $m.has(key);\n\t\t\t},\n\t\t\tset: function (key, value) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif (!$wm) {\n\t\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t\t}\n\t\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t\t} else if (getSideChannelMap) {\n\t\t\t\t\tif (!$m) {\n\t\t\t\t\t\t$m = getSideChannelMap();\n\t\t\t\t\t}\n\t\t\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t\t\t/** @type {NonNullable<typeof $m>} */ ($m).set(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// @ts-expect-error TODO: figure out why this is erroring\n\t\treturn channel;\n\t}\n\t: getSideChannelMap;\n", "'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar inspect = require('object-inspect');\nvar getSideChannelList = require('side-channel-list');\nvar getSideChannelMap = require('side-channel-map');\nvar getSideChannelWeakMap = require('side-channel-weakmap');\n\nvar makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;\n\n/** @type {import('.')} */\nmodule.exports = function getSideChannel() {\n\t/** @typedef {ReturnType<typeof getSideChannel>} Channel */\n\n\t/** @type {Channel | undefined} */ var $channelData;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\treturn !!$channelData && $channelData['delete'](key);\n\t\t},\n\t\tget: function (key) {\n\t\t\treturn $channelData && $channelData.get(key);\n\t\t},\n\t\thas: function (key) {\n\t\t\treturn !!$channelData && $channelData.has(key);\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$channelData) {\n\t\t\t\t$channelData = makeChannel();\n\t\t\t}\n\n\t\t\t$channelData.set(key, value);\n\t\t}\n\t};\n\t// @ts-expect-error TODO: figure out why this is erroring\n\treturn channel;\n};\n", "'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n", "'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? { __proto__: null } : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object' && typeof source !== 'function') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if (\n                (options && (options.plainObjects || options.allowPrototypes))\n                || !has.call(Object.prototype, source)\n            ) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, defaultDecoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar limit = 1024;\n\n/* eslint operator-linebreak: [2, \"before\"] */\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var j = 0; j < string.length; j += limit) {\n        var segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        var arr = [];\n\n        for (var i = 0; i < segment.length; ++i) {\n            var c = segment.charCodeAt(i);\n            if (\n                c === 0x2D // -\n                || c === 0x2E // .\n                || c === 0x5F // _\n                || c === 0x7E // ~\n                || (c >= 0x30 && c <= 0x39) // 0-9\n                || (c >= 0x41 && c <= 0x5A) // a-z\n                || (c >= 0x61 && c <= 0x7A) // A-Z\n                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n\n            if (c < 0x80) {\n                arr[arr.length] = hexTable[c];\n                continue;\n            }\n\n            if (c < 0x800) {\n                arr[arr.length] = hexTable[0xC0 | (c >> 6)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            if (c < 0xD800 || c >= 0xE000) {\n                arr[arr.length] = hexTable[0xE0 | (c >> 12)]\n                    + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            i += 1;\n            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));\n\n            arr[arr.length] = hexTable[0xF0 | (c >> 18)]\n                + hexTable[0x80 | ((c >> 12) & 0x3F)]\n                + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                + hexTable[0x80 | (c & 0x3F)];\n        }\n\n        out += arr.join('');\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n", "'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    commaRoundTrip: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    filter: void undefined,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    allowEmptyArrays,\n    strictNullHandling,\n    skipNulls,\n    encodeDotInKeys,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\n\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n        return adjustedPrefix + '[]';\n    }\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && key && typeof key.value !== 'undefined'\n            ? key.value\n            : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\\./g, '%2E') : String(key);\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            allowEmptyArrays,\n            strictNullHandling,\n            skipNulls,\n            encodeDotInKeys,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    var arrayFormat;\n    if (opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n        var value = obj[key];\n\n        if (options.skipNulls && value === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            value,\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.allowEmptyArrays,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encodeDotInKeys,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('\u2713')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n", "'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowEmptyArrays: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decodeDotInKeys: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    duplicates: 'combine',\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictDepth: false,\n    strictNullHandling: false,\n    throwOnLimitExceeded: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options, currentArrayLength) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {\n        throw new RangeError('Array limit exceeded. Only ' + options.arrayLimit + ' element' + (options.arrayLimit === 1 ? '' : 's') + ' allowed in an array.');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the \u2713 character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the \u2713 character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('\u2713')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(\n        options.delimiter,\n        options.throwOnLimitExceeded ? limit + 1 : limit\n    );\n\n    if (options.throwOnLimitExceeded && parts.length > limit) {\n        throw new RangeError('Parameter limit exceeded. Only ' + limit + ' parameter' + (limit === 1 ? '' : 's') + ' allowed.');\n    }\n\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key;\n        var val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n\n            val = utils.maybeMap(\n                parseArrayValue(\n                    part.slice(pos + 1),\n                    options,\n                    isArray(obj[key]) ? obj[key].length : 0\n                ),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(String(val));\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        var existing = has.call(obj, key);\n        if (existing && options.duplicates === 'combine') {\n            obj[key] = utils.combine(obj[key], val);\n        } else if (!existing || options.duplicates === 'last') {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var currentArrayLength = 0;\n    if (chain.length > 0 && chain[chain.length - 1] === '[]') {\n        var parentKey = chain.slice(0, -1).join('');\n        currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;\n    }\n\n    var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))\n                ? []\n                : utils.combine([], leaf);\n        } else {\n            obj = options.plainObjects ? { __proto__: null } : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\n            var index = parseInt(decodedRoot, 10);\n            if (!options.parseArrays && decodedRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== decodedRoot\n                && String(index) === decodedRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (decodedRoot !== '__proto__') {\n                obj[decodedRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, check strictDepth option for throw, else just add whatever is left\n\n    if (segment) {\n        if (options.strictDepth === true) {\n            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');\n        }\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    if (typeof opts.throwOnLimitExceeded !== 'undefined' && typeof opts.throwOnLimitExceeded !== 'boolean') {\n        throw new TypeError('`throwOnLimitExceeded` option must be a boolean');\n    }\n\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n\n    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n        throw new TypeError('The duplicates option must be either combine, first, or last');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        duplicates: duplicates,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\n        throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === 'boolean' ? opts.throwOnLimitExceeded : false\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? { __proto__: null } : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? { __proto__: null } : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n", "'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n", "{\n  \"name\": \"superagent\",\n  \"version\": \"3.8.1\",\n  \"description\": \"elegant & feature rich browser / node HTTP with a fluent API\",\n  \"scripts\": {\n    \"prepare\": \"make all\",\n    \"test\": \"make test\"\n  },\n  \"keywords\": [\n    \"http\",\n    \"ajax\",\n    \"request\",\n    \"agent\"\n  ],\n  \"license\": \"MIT\",\n  \"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n  \"contributors\": [\n    \"Kornel Lesi\u0144ski <kornel@geekhood.net>\",\n    \"Peter Lyons <pete@peterlyons.com>\",\n    \"Hunter Loftis <hunter@hunterloftis.com>\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/visionmedia/superagent.git\"\n  },\n  \"dependencies\": {\n    \"component-emitter\": \"^1.2.0\",\n    \"cookiejar\": \"^2.1.0\",\n    \"debug\": \"^3.1.0\",\n    \"extend\": \"^3.0.0\",\n    \"form-data\": \"^2.3.1\",\n    \"formidable\": \"^1.1.1\",\n    \"methods\": \"^1.1.1\",\n    \"mime\": \"^1.4.1\",\n    \"qs\": \"^6.5.1\",\n    \"readable-stream\": \"^2.0.5\"\n  },\n  \"devDependencies\": {\n    \"Base64\": \"^1.0.1\",\n    \"basic-auth-connect\": \"^1.0.0\",\n    \"body-parser\": \"^1.18.2\",\n    \"browserify\": \"^14.1.0\",\n    \"cookie-parser\": \"^1.4.3\",\n    \"express\": \"^4.16.0\",\n    \"express-session\": \"^1.15.6\",\n    \"marked\": \"^0.3.6\",\n    \"mocha\": \"^3.5.3\",\n    \"multer\": \"^1.3.0\",\n    \"should\": \"^11.2.0\",\n    \"should-http\": \"^0.1.1\",\n    \"zuul\": \"^3.11.1\"\n  },\n  \"browser\": {\n    \"./lib/node/index.js\": \"./lib/client.js\",\n    \"./test/support/server.js\": \"./test/support/blank.js\"\n  },\n  \"component\": {\n    \"scripts\": {\n      \"superagent\": \"lib/client.js\"\n    }\n  },\n  \"main\": \"./lib/node/index.js\",\n  \"engines\": {\n    \"node\": \">= 4.0\"\n  }\n}\n", "'use strict';\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n", "'use strict';\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = require('./is-object');\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in RequestBase.prototype) {\n    obj[key] = RequestBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function _clearTimeout(){\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function timeout(options){\n  if (!options || 'object' !== typeof options) {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    return this;\n  }\n\n  for(var option in options) {\n    switch(option) {\n      case 'deadline':\n        this._timeout = options.deadline;\n        break;\n      case 'response':\n        this._responseTimeout = options.response;\n        break;\n      default:\n        console.warn(\"Unknown timeout option\", option);\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function retry(count, fn){\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\nvar ERROR_CODES = [\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EADDRINFO',\n  'ESOCKETTIMEDOUT'\n];\n\n/**\n * Determine if a request should be retried.\n * (Borrowed from segmentio/superagent-retry)\n *\n * @param {Error} err\n * @param {Response} [res]\n * @returns {Boolean}\n */\nRequestBase.prototype._shouldRetry = function(err, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      var override = this._retryCallback(err, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch(e) {\n      console.error(e);\n    }\n  }\n  if (res && res.status && res.status >= 500 && res.status != 501) return true;\n  if (err) {\n    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;\n    // Superagent timeout\n    if (err.timeout && err.code == 'ECONNABORTED') return true;\n    if (err.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function() {\n\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    if (this._endCalled) {\n      console.warn(\"Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises\");\n    }\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {\n      self.end(function(err, res) {\n        if (err) innerReject(err);\n        else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\n\nRequestBase.prototype.catch = function(cb) {\n  return this.then(undefined, cb);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function use(fn) {\n  fn(this);\n  return this;\n};\n\nRequestBase.prototype.ok = function(cb) {\n  if ('function' !== typeof cb) throw Error(\"Callback required\");\n  this._okCallback = cb;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function(res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nRequestBase.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function(name, val) {\n  // name should be either a string or an object.\n  if (null === name || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    console.error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      this.field(key, name[key]);\n    }\n    return this;\n  }\n\n  if (Array.isArray(val)) {\n    for (var i in val) {\n      this.field(name, val[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (null === val || undefined === val) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if ('boolean' === typeof val) {\n    val = '' + val;\n  }\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nRequestBase.prototype.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\nRequestBase.prototype._auth = function(user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n\n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', 'Bearer ' + user);\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function(on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on == undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function(n){\n  if ('number' !== typeof n) {\n    throw TypeError(\"Invalid argument\");\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function() {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header,\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.send = function(data){\n  var isObj = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    console.error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObj && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObj || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function(sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n    if (index >= 0) {\n      var queryArr = this.url.substring(index + 1).split('&');\n      if ('function' === typeof this._sort) {\n        queryArr.sort(this._sort);\n      } else {\n        queryArr.sort();\n      }\n      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = function() {console.trace(\"Unsupported\");}\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function(reason, timeout, errno){\n  if (this._aborted) {\n    return;\n  }\n  var err = new Error(reason + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  err.code = 'ECONNABORTED';\n  err.errno = errno;\n  this.timedout = true;\n  this.abort();\n  this.callback(err);\n};\n\nRequestBase.prototype._setTimeouts = function() {\n  var self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function(){\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n", "/* jshint node: true */\n(function () {\n    \"use strict\";\n\n    function CookieAccessInfo(domain, path, secure, script) {\n        if (this instanceof CookieAccessInfo) {\n            this.domain = domain || undefined;\n            this.path = path || \"/\";\n            this.secure = !!secure;\n            this.script = !!script;\n            return this;\n        }\n        return new CookieAccessInfo(domain, path, secure, script);\n    }\n    CookieAccessInfo.All = Object.freeze(Object.create(null));\n    exports.CookieAccessInfo = CookieAccessInfo;\n\n    function Cookie(cookiestr, request_domain, request_path) {\n        if (cookiestr instanceof Cookie) {\n            return cookiestr;\n        }\n        if (this instanceof Cookie) {\n            this.name = null;\n            this.value = null;\n            this.expiration_date = Infinity;\n            this.path = String(request_path || \"/\");\n            this.explicit_path = false;\n            this.domain = request_domain || null;\n            this.explicit_domain = false;\n            this.secure = false; //how to define default?\n            this.noscript = false; //httponly\n            if (cookiestr) {\n                this.parse(cookiestr, request_domain, request_path);\n            }\n            return this;\n        }\n        return new Cookie(cookiestr, request_domain, request_path);\n    }\n    exports.Cookie = Cookie;\n\n    Cookie.prototype.toString = function toString() {\n        var str = [this.name + \"=\" + this.value];\n        if (this.expiration_date !== Infinity) {\n            str.push(\"expires=\" + (new Date(this.expiration_date)).toGMTString());\n        }\n        if (this.domain) {\n            str.push(\"domain=\" + this.domain);\n        }\n        if (this.path) {\n            str.push(\"path=\" + this.path);\n        }\n        if (this.secure) {\n            str.push(\"secure\");\n        }\n        if (this.noscript) {\n            str.push(\"httponly\");\n        }\n        return str.join(\"; \");\n    };\n\n    Cookie.prototype.toValueString = function toValueString() {\n        return this.name + \"=\" + this.value;\n    };\n\n    var cookie_str_splitter = /[:](?=\\s*[a-zA-Z0-9_\\-]+\\s*[=])/g;\n    Cookie.prototype.parse = function parse(str, request_domain, request_path) {\n        if (this instanceof Cookie) {\n            if ( str.length > 32768 ) {\n                console.warn(\"Cookie too long for parsing (>32768 characters)\");\n                return;\n            }\n    \n            var parts = str.split(\";\").filter(function (value) {\n                    return !!value;\n                });\n            var i;\n\n            var pair = parts[0].match(/([^=]+)=([\\s\\S]*)/);\n            if (!pair) {\n                console.warn(\"Invalid cookie header encountered. Header: '\"+str+\"'\");\n                return;\n            }\n\n            var key = pair[1];\n            var value = pair[2];\n            if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {\n                console.warn(\"Unable to extract values from cookie header. Cookie: '\"+str+\"'\");\n                return;\n            }\n\n            this.name = key;\n            this.value = value;\n\n            for (i = 1; i < parts.length; i += 1) {\n                pair = parts[i].match(/([^=]+)(?:=([\\s\\S]*))?/);\n                key = pair[1].trim().toLowerCase();\n                value = pair[2];\n                switch (key) {\n                case \"httponly\":\n                    this.noscript = true;\n                    break;\n                case \"expires\":\n                    this.expiration_date = value ?\n                            Number(Date.parse(value)) :\n                            Infinity;\n                    break;\n                case \"path\":\n                    this.path = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_path = true;\n                    break;\n                case \"domain\":\n                    this.domain = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_domain = !!this.domain;\n                    break;\n                case \"secure\":\n                    this.secure = true;\n                    break;\n                }\n            }\n\n            if (!this.explicit_path) {\n               this.path = request_path || \"/\";\n            }\n            if (!this.explicit_domain) {\n               this.domain = request_domain;\n            }\n\n            return this;\n        }\n        return new Cookie().parse(str, request_domain, request_path);\n    };\n\n    Cookie.prototype.matches = function matches(access_info) {\n        if (access_info === CookieAccessInfo.All) {\n          return true;\n        }\n        if (this.noscript && access_info.script ||\n                this.secure && !access_info.secure ||\n                !this.collidesWith(access_info)) {\n            return false;\n        }\n        return true;\n    };\n\n    Cookie.prototype.collidesWith = function collidesWith(access_info) {\n        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {\n            return false;\n        }\n        if (this.path && access_info.path.indexOf(this.path) !== 0) {\n            return false;\n        }\n        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {\n           return false;\n        }\n        var access_domain = access_info.domain && access_info.domain.replace(/^[\\.]/,'');\n        var cookie_domain = this.domain && this.domain.replace(/^[\\.]/,'');\n        if (cookie_domain === access_domain) {\n            return true;\n        }\n        if (cookie_domain) {\n            if (!this.explicit_domain) {\n                return false; // we already checked if the domains were exactly the same\n            }\n            var wildcard = access_domain.indexOf(cookie_domain);\n            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    function CookieJar() {\n        var cookies, cookies_list, collidable_cookie;\n        if (this instanceof CookieJar) {\n            cookies = Object.create(null); //name: [Cookie]\n\n            this.setCookie = function setCookie(cookie, request_domain, request_path) {\n                var remove, i;\n                cookie = new Cookie(cookie, request_domain, request_path);\n                //Delete the cookie if the set is past the current time\n                remove = cookie.expiration_date <= Date.now();\n                if (cookies[cookie.name] !== undefined) {\n                    cookies_list = cookies[cookie.name];\n                    for (i = 0; i < cookies_list.length; i += 1) {\n                        collidable_cookie = cookies_list[i];\n                        if (collidable_cookie.collidesWith(cookie)) {\n                            if (remove) {\n                                cookies_list.splice(i, 1);\n                                if (cookies_list.length === 0) {\n                                    delete cookies[cookie.name];\n                                }\n                                return false;\n                            }\n                            cookies_list[i] = cookie;\n                            return cookie;\n                        }\n                    }\n                    if (remove) {\n                        return false;\n                    }\n                    cookies_list.push(cookie);\n                    return cookie;\n                }\n                if (remove) {\n                    return false;\n                }\n                cookies[cookie.name] = [cookie];\n                return cookies[cookie.name];\n            };\n            //returns a cookie\n            this.getCookie = function getCookie(cookie_name, access_info) {\n                var cookie, i;\n                cookies_list = cookies[cookie_name];\n                if (!cookies_list) {\n                    return;\n                }\n                for (i = 0; i < cookies_list.length; i += 1) {\n                    cookie = cookies_list[i];\n                    if (cookie.expiration_date <= Date.now()) {\n                        if (cookies_list.length === 0) {\n                            delete cookies[cookie.name];\n                        }\n                        continue;\n                    }\n\n                    if (cookie.matches(access_info)) {\n                        return cookie;\n                    }\n                }\n            };\n            //returns a list of cookies\n            this.getCookies = function getCookies(access_info) {\n                var matches = [], cookie_name, cookie;\n                for (cookie_name in cookies) {\n                    cookie = this.getCookie(cookie_name, access_info);\n                    if (cookie) {\n                        matches.push(cookie);\n                    }\n                }\n                matches.toString = function toString() {\n                    return matches.join(\":\");\n                };\n                matches.toValueString = function toValueString() {\n                    return matches.map(function (c) {\n                        return c.toValueString();\n                    }).join('; ');\n                };\n                return matches;\n            };\n\n            return this;\n        }\n        return new CookieJar();\n    }\n    exports.CookieJar = CookieJar;\n\n    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.\n    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {\n        cookies = Array.isArray(cookies) ?\n                cookies :\n                cookies.split(cookie_str_splitter);\n        var successful = [],\n            i,\n            cookie;\n        cookies = cookies.map(function(item){\n            return new Cookie(item, request_domain, request_path);\n        });\n        for (i = 0; i < cookies.length; i += 1) {\n            cookie = cookies[i];\n            if (this.setCookie(cookie, request_domain, request_path)) {\n                successful.push(cookie);\n            }\n        }\n        return successful;\n    };\n}());\n", "function Agent() {\n  this._defaults = [];\n}\n\n[\"use\", \"on\", \"once\", \"set\", \"query\", \"type\", \"accept\", \"auth\", \"withCredentials\", \"sortQuery\", \"retry\", \"ok\", \"redirects\",\n \"timeout\", \"buffer\", \"serialize\", \"parse\", \"ca\", \"key\", \"pfx\", \"cert\"].forEach(function(fn) {\n  /** Default setting for all requests from this agent */\n  Agent.prototype[fn] = function(/*varargs*/) {\n    this._defaults.push({fn:fn, arguments:arguments});\n    return this;\n  }\n});\n\nAgent.prototype._setDefaults = function(req) {\n    this._defaults.forEach(function(def) {\n      req[def.fn].apply(req, def.arguments);\n    });\n};\n\nmodule.exports = Agent;\n", "'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst CookieJar = require('cookiejar').CookieJar;\nconst CookieAccess = require('cookiejar').CookieAccessInfo;\nconst parse = require('url').parse;\nconst request = require('../..');\nconst AgentBase = require('../agent-base');\nlet methods = require('methods');\n\n/**\n * Expose `Agent`.\n */\n\nmodule.exports = Agent;\n\n/**\n * Initialize a new `Agent`.\n *\n * @api public\n */\n\nfunction Agent(options) {\n  if (!(this instanceof Agent)) {\n    return new Agent(options);\n  }\n  AgentBase.call(this);\n  this.jar = new CookieJar();\n\n  if (options) {\n    if (options.ca) {this.ca(options.ca);}\n    if (options.key) {this.key(options.key);}\n    if (options.pfx) {this.pfx(options.pfx);}\n    if (options.cert) {this.cert(options.cert);}\n  }\n}\n\nAgent.prototype = Object.create(AgentBase.prototype);\n\n/**\n * Save the cookies in the given `res` to\n * the agent's cookie jar for persistence.\n *\n * @param {Response} res\n * @api private\n */\n\nAgent.prototype._saveCookies = function(res) {\n  const cookies = res.headers['set-cookie'];\n  if (cookies) this.jar.setCookies(cookies);\n};\n\n/**\n * Attach cookies when available to the given `req`.\n *\n * @param {Request} req\n * @api private\n */\n\nAgent.prototype._attachCookies = function(req) {\n  const url = parse(req.url);\n  const access = CookieAccess(\n    url.hostname,\n    url.pathname,\n    'https:' == url.protocol\n  );\n  const cookies = this.jar.getCookies(access).toValueString();\n  req.cookies = cookies;\n};\n\nmethods.forEach(name => {\n  const method = name.toUpperCase();\n  Agent.prototype[name] = function(url, fn) {\n    const req = new request.Request(method, url);\n\n    req.on('response', this._saveCookies.bind(this));\n    req.on('redirect', this._saveCookies.bind(this));\n    req.on('redirect', this._attachCookies.bind(this, req));\n    this._attachCookies(req);\n    this._setDefaults(req);\n\n    if (fn) {\n      req.end(fn);\n    }\n    return req;\n  };\n});\n\nAgent.prototype.del = Agent.prototype['delete'];\n", "'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst qs = require('qs');\n\nmodule.exports = function(res, fn){\n  res.text = '';\n  res.setEncoding('ascii');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', () => {\n    try {\n      fn(null, qs.parse(res.text));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n", "'use strict';\n\nmodule.exports = function parseJSON(res, fn){\n  res.text = '';\n  res.setEncoding('utf8');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', () => {\n    try {\n      var body = res.text && JSON.parse(res.text);\n    } catch (e) {\n      var err = e;\n      // issue #675: return the raw response if the response parsing fails\n      err.rawResponse = res.text || null;\n      // issue #876: return the http status code if the response parsing fails\n      err.statusCode = res.statusCode;\n    } finally {\n      fn(err, body);\n    }\n  });\n};\n", "'use strict';\n\nmodule.exports = function(res, fn){\n  res.text = '';\n  res.setEncoding('utf8');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', fn);\n};\n", "'use strict';\n\nmodule.exports = (res, fn) => {\n  const data = []; // Binary data needs binary storage\n\n  res.on('data', chunk => {\n    data.push(chunk);\n  });\n  res.on('end', () => {\n    fn(null, Buffer.concat(data));\n  });\n};\n", "'use strict';\n\nexports['application/x-www-form-urlencoded'] = require('./urlencoded');\nexports['application/json'] = require('./json');\nexports.text = require('./text');\n\nconst binary = require('./image');\nexports['application/octet-stream'] = binary;\nexports['application/pdf'] = binary;\nexports.image = binary;\n", "'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst debug = require('debug')('superagent');\nconst formidable = require('formidable');\nconst FormData = require('form-data');\nconst Response = require('./response');\nconst parse = require('url').parse;\nconst format = require('url').format;\nconst resolve = require('url').resolve;\nlet methods = require('methods');\nconst Stream = require('stream');\nconst utils = require('../utils');\nconst unzip = require('./unzip').unzip;\nconst extend = require('extend');\nconst mime = require('mime');\nconst https = require('https');\nconst http = require('http');\nconst fs = require('fs');\nconst qs = require('qs');\nconst zlib = require('zlib');\nconst util = require('util');\nconst pkg = require('../../package.json');\nconst RequestBase = require('../request-base');\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\nexports = module.exports = request;\n\n/**\n * Expose `Request`.\n */\n\nexports.Request = Request;\n\n/**\n * Expose the agent function\n */\n\nexports.agent = require('./agent');\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `Response`.\n */\n\nexports.Response = Response;\n\n/**\n * Define \"form\" mime type.\n */\n\nmime.define({\n  'application/x-www-form-urlencoded': ['form', 'urlencoded', 'form-data']\n}, true);\n\n/**\n * Protocol map.\n */\n\nexports.protocols = {\n  'http:': http,\n  'https:': https,\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nexports.serialize = {\n  'application/x-www-form-urlencoded': qs.stringify,\n  'application/json': JSON.stringify,\n};\n\n/**\n * Default parsers.\n *\n *     superagent.parse['application/xml'] = function(res, fn){\n *       fn(null, res);\n *     };\n *\n */\n\nexports.parse = require('./parsers');\n\n/**\n * Initialize internal header tracking properties on a request instance.\n *\n * @param {Object} req the instance\n * @api private\n */\nfunction _initHeaders(req) {\n  const ua = `node-superagent/${pkg.version}`;\n  req._header = { // coerces header names to lowercase\n    'user-agent': ua\n  };\n  req.header = { // preserves header name case\n    'User-Agent': ua\n  };\n}\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String|Object} url\n * @api public\n */\n\nfunction Request(method, url) {\n  Stream.call(this);\n  if ('string' != typeof url) url = format(url);\n  this._agent = false;\n  this._formData = null;\n  this.method = method;\n  this.url = url;\n  _initHeaders(this);\n  this.writable = true;\n  this._redirects = 0;\n  this.redirects(method === 'HEAD' ? 0 : 5);\n  this.cookies = '';\n  this.qs = {};\n  this._query = [];\n  this.qsRaw = this._query; // Unused, for backwards compatibility only\n  this._redirectList = [];\n  this._streamRequest = false;\n  this.once('end', this.clearTimeout.bind(this));\n}\n\n/**\n * Inherit from `Stream` (which inherits from `EventEmitter`).\n * Mixin `RequestBase`.\n */\nutil.inherits(Request, Stream);\nRequestBase(Request.prototype);\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('http://localhost/upload')\n *   .attach(new Buffer('<b>Hello world</b>'), 'hello.html')\n *   .end(callback);\n * ```\n *\n * A filename may also be used:\n *\n * ``` js\n * request.post('http://localhost/upload')\n *   .attach('files', 'image.jpg')\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {String|fs.ReadStream|Buffer} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    let o = options || {};\n    if ('string' == typeof options) {\n      o = { filename: options };\n    }\n\n    if ('string' == typeof file) {\n      if (!o.filename) o.filename = file;\n      debug('creating `fs.ReadStream` instance for file: %s', file);\n      file = fs.createReadStream(file);\n    } else if (!o.filename && file.path) {\n      o.filename = file.path;\n    }\n\n    this._getFormData().append(field, file, o);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function() {\n  if (!this._formData) {\n    this._formData = new FormData();\n    this._formData.on('error', err => {\n      this.emit('error', err);\n      this.abort();\n    });\n  }\n  return this._formData;\n};\n\n/**\n * Gets/sets the `Agent` to use for this HTTP request. The default (if this\n * function is not called) is to opt out of connection pooling (`agent: false`).\n *\n * @param {http.Agent} agent\n * @return {http.Agent}\n * @api public\n */\n\nRequest.prototype.agent = function(agent){\n  if (!arguments.length) return this._agent;\n  this._agent = agent;\n  return this;\n};\n\n/**\n * Set _Content-Type_ response header passed through `mime.lookup()`.\n *\n * Examples:\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('json')\n *        .send(jsonstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/json')\n *        .send(jsonstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type) {\n  return this.set(\n    'Content-Type',\n    ~type.indexOf('/') ? type : mime.lookup(type)\n  );\n};\n\n/**\n * Set _Accept_ response header passed through `mime.lookup()`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  return this.set('Accept', ~type.indexOf('/')\n    ? type\n    : mime.lookup(type));\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' == typeof val) {\n    this._query.push(val);\n  } else {\n    extend(this.qs, val);\n  }\n  return this;\n};\n\n/**\n * Write raw `data` / `encoding` to the socket.\n *\n * @param {Buffer|String} data\n * @param {String} encoding\n * @return {Boolean}\n * @api public\n */\n\nRequest.prototype.write = function(data, encoding){\n  const req = this.request();\n  if (!this._streamRequest) {\n    this._streamRequest = true;\n  }\n  return req.write(data, encoding);\n};\n\n/**\n * Pipe the request body to `stream`.\n *\n * @param {Stream} stream\n * @param {Object} options\n * @return {Stream}\n * @api public\n */\n\nRequest.prototype.pipe = function(stream, options){\n  this.piped = true; // HACK...\n  this.buffer(false);\n  this.end();\n  return this._pipeContinue(stream, options);\n};\n\nRequest.prototype._pipeContinue = function(stream, options){\n  this.req.once('response', res => {\n    // redirect\n    const redirect = isRedirect(res.statusCode);\n    if (redirect && this._redirects++ != this._maxRedirects) {\n      return this._redirect(res)._pipeContinue(stream, options);\n    }\n\n    this.res = res;\n    this._emitResponse();\n    if (this._aborted) return;\n\n    if (this._shouldUnzip(res)) {\n      const unzipObj = zlib.createUnzip();\n      unzipObj.on('error', err => {\n        if (err && err.code === 'Z_BUF_ERROR') { // unexpected end of file is ignored by browsers and curl\n          stream.emit('end');\n          return;\n        }\n        stream.emit('error', err);\n      });\n      res.pipe(unzipObj).pipe(stream, options);\n    } else {\n      res.pipe(stream, options);\n    }\n    res.once('end', () => {\n      this.emit('end');\n    });\n  });\n  return stream;\n};\n\n/**\n * Enable / disable buffering.\n *\n * @return {Boolean} [val]\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.buffer = function(val){\n  this._buffer = (false !== val);\n  return this;\n};\n\n/**\n * Redirect to `url\n *\n * @param {IncomingMessage} res\n * @return {Request} for chaining\n * @api private\n */\n\nRequest.prototype._redirect = function(res){\n  let url = res.headers.location;\n  if (!url) {\n    return this.callback(new Error('No location header for redirect'), res);\n  }\n\n  debug('redirect %s -> %s', this.url, url);\n\n  // location\n  url = resolve(this.url, url);\n\n  // ensure the response is being consumed\n  // this is required for Node v0.10+\n  res.resume();\n\n  let headers = this.req._headers;\n\n  const changesOrigin = parse(url).host !== parse(this.url).host;\n\n  // implementation of 302 following defacto standard\n  if (res.statusCode == 301 || res.statusCode == 302){\n    // strip Content-* related fields\n    // in case of POST etc\n    headers = utils.cleanHeader(this.req._headers, changesOrigin);\n\n    // force GET\n    this.method = 'HEAD' == this.method\n      ? 'HEAD'\n      : 'GET';\n\n    // clear data\n    this._data = null;\n  }\n  // 303 is always GET\n  if (res.statusCode == 303) {\n    // strip Content-* related fields\n    // in case of POST etc\n    headers = utils.cleanHeader(this.req._headers, changesOrigin);\n\n    // force method\n    this.method = 'GET';\n\n    // clear data\n    this._data = null;\n  }\n  // 307 preserves method\n  // 308 preserves method\n  delete headers.host;\n\n  delete this.req;\n  delete this._formData;\n\n  // remove all add header except User-Agent\n  _initHeaders(this);\n\n  // redirect\n  this._endCalled = false;\n  this.url = url;\n  this.qs = {};\n  this._query.length = 0;\n  this.set(headers);\n  this.emit('redirect', res);\n  this._redirectList.push(this.url);\n  this.end(this._callback);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * Examples:\n *\n *   .auth('tobi', 'learnboost')\n *   .auth('tobi:learnboost')\n *   .auth('tobi')\n *   .auth(accessToken, { type: 'bearer' })\n *\n * @param {String} user\n * @param {String} [pass]\n * @param {Object} [options] options with authorization type 'basic' or 'bearer' ('basic' is default)\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (1 === arguments.length) pass = '';\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = { type: 'basic' };\n  }\n\n  var encoder = function(string) {\n    return new Buffer(string).toString('base64');\n  };\n\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Set the certificate authority option for https request.\n *\n * @param {Buffer | Array} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.ca = function(cert){\n  this._ca = cert;\n  return this;\n};\n\n/**\n * Set the client certificate key option for https request.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.key = function(cert){\n  this._key = cert;\n  return this;\n};\n\n/**\n * Set the key, certificate, and CA certs of the client in PFX or PKCS12 format.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.pfx = function(cert) {\n  if (typeof cert === 'object' && !Buffer.isBuffer(cert)) {\n    this._pfx = cert.pfx;\n    this._passphrase = cert.passphrase;\n  } else {\n    this._pfx = cert;\n  }\n  return this;\n};\n\n/**\n * Set the client certificate option for https request.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.cert = function(cert){\n  this._cert = cert;\n  return this;\n};\n\n/**\n * Return an http[s] request.\n *\n * @return {OutgoingMessage}\n * @api private\n */\n\nRequest.prototype.request = function(){\n  if (this.req) return this.req;\n\n  const options = {};\n\n  try {\n    const query = qs.stringify(this.qs, {\n      indices: false,\n      strictNullHandling: true,\n    });\n    if (query) {\n      this.qs = {};\n      this._query.push(query);\n    }\n    this._finalizeQueryString();\n  } catch (e) {\n    return this.emit('error', e);\n  }\n\n  let url = this.url;\n  const retries = this._retries;\n\n  // default to http://\n  if (0 != url.indexOf('http')) url = `http://${url}`;\n  url = parse(url);\n\n  // support unix sockets\n  if (/^https?\\+unix:/.test(url.protocol) === true) {\n    // get the protocol\n    url.protocol = `${url.protocol.split('+')[0]}:`;\n\n    // get the socket, path\n    const unixParts = url.path.match(/^([^/]+)(.+)$/);\n    options.socketPath = unixParts[1].replace(/%2F/g, '/');\n    url.path = unixParts[2];\n  }\n\n  // options\n  options.method = this.method;\n  options.port = url.port;\n  options.path = url.path;\n  options.host = url.hostname;\n  options.ca = this._ca;\n  options.key = this._key;\n  options.pfx = this._pfx;\n  options.cert = this._cert;\n  options.passphrase = this._passphrase;\n  options.agent = this._agent;\n\n  // initiate request\n  const mod = exports.protocols[url.protocol];\n\n  // request\n  const req = (this.req = mod.request(options));\n\n  // set tcp no delay\n  req.setNoDelay(true);\n\n  if ('HEAD' != options.method) {\n    req.setHeader('Accept-Encoding', 'gzip, deflate');\n  }\n  this.protocol = url.protocol;\n  this.host = url.host;\n\n  // expose events\n  req.once('drain', () => { this.emit('drain'); });\n\n  req.once('error', err => {\n    // flag abortion here for out timeouts\n    // because node will emit a faux-error \"socket hang up\"\n    // when request is aborted before a connection is made\n    if (this._aborted) return;\n    // if not the same, we are in the **old** (cancelled) request,\n    // so need to continue (same as for above)\n    if (this._retries !== retries) return;\n    // if we've received a response then we don't want to let\n    // an error in the request blow up the response\n    if (this.response) return;\n    this.callback(err);\n  });\n\n  // auth\n  if (url.auth) {\n    const auth = url.auth.split(':');\n    this.auth(auth[0], auth[1]);\n  }\n  if (this.username && this.password) {\n    this.auth(this.username, this.password);\n  }\n\n  // add cookies\n  if (this.cookies) req.setHeader('Cookie', this.cookies);\n\n  for (const key in this.header) {\n    if (this.header.hasOwnProperty(key))\n      req.setHeader(key, this.header[key]);\n  }\n\n  return req;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  if (this._shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  // Avoid the error which is emitted from 'socket hang up' to cause the fn undefined error on JS runtime.\n  const fn = this._callback || noop;\n  this.clearTimeout();\n  if (this.called) return console.warn('superagent: double callback bug');\n  this.called = true;\n\n  if (!err) {\n    try {\n      if (this._isResponseOK(res)) {\n        return fn(err, res);\n      }\n\n      let msg = 'Unsuccessful HTTP response';\n      if (res) {\n        msg = http.STATUS_CODES[res.status] || msg;\n      }\n      err = new Error(msg);\n      err.status = res ? res.status : undefined;\n    } catch (new_err) {\n      err = new_err;\n    }\n  }\n\n  err.response = res;\n  if (this._maxRetries) err.retries = this._retries - 1;\n\n  // only emit error event if there is a listener\n  // otherwise we assume the callback to `.end()` will get the error\n  if (err && this.listeners('error').length > 0) {\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Check if `obj` is a host object,\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof Stream || obj instanceof FormData;\n}\n\n/**\n * Initiate request, invoking callback `fn(err, res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype._emitResponse = function(body, files) {\n  const response = new Response(this);\n  this.response = response;\n  response.redirects = this._redirectList;\n  if (undefined !== body) {\n    response.body = body;\n  }\n  response.files = files;\n  this.emit('response', response);\n  return response;\n};\n\nRequest.prototype.end = function(fn) {\n  this.request();\n  debug('%s %s', this.method, this.url);\n\n  if (this._endCalled) {\n    console.warn(\n      'Warning: .end() was called twice. This is not supported in superagent'\n    );\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  let data = this._data;\n  const req = this.req;\n  let buffer = this._buffer;\n  const method = this.method;\n\n  this._setTimeouts();\n\n  // body\n  if ('HEAD' != method && !req._headerSent) {\n    // serialize stuff\n    if ('string' != typeof data) {\n      let contentType = req.getHeader('Content-Type');\n      // Parse out just the content type from the header (ignore the charset)\n      if (contentType) contentType = contentType.split(';')[0];\n      let serialize = exports.serialize[contentType];\n      if (!serialize && isJSON(contentType)) {\n        serialize = exports.serialize['application/json'];\n      }\n      if (serialize) data = serialize(data);\n    }\n\n    // content-length\n    if (data && !req.getHeader('Content-Length')) {\n      req.setHeader('Content-Length', Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));\n    }\n  }\n\n  // response\n  req.once('response', res => {\n    debug('%s %s -> %s', this.method, this.url, res.statusCode);\n\n    if (this._responseTimeoutTimer) {\n      clearTimeout(this._responseTimeoutTimer);\n    }\n\n    if (this.piped) {\n      return;\n    }\n\n    const max = this._maxRedirects;\n    const mime = utils.type(res.headers['content-type'] || '') || 'text/plain';\n    const type = mime.split('/')[0];\n    const multipart = 'multipart' == type;\n    const redirect = isRedirect(res.statusCode);\n    let parser = this._parser;\n    const responseType = this._responseType;\n\n    this.res = res;\n\n    // redirect\n    if (redirect && this._redirects++ != max) {\n      return this._redirect(res);\n    }\n\n    if ('HEAD' == this.method) {\n      this.emit('end');\n      this.callback(null, this._emitResponse());\n      return;\n    }\n\n    // zlib support\n    if (this._shouldUnzip(res)) {\n      unzip(req, res);\n    }\n\n    if (!parser) {\n      if (responseType) {\n        parser = exports.parse.image; // It's actually a generic Buffer\n        buffer = true;\n      } else if (multipart) {\n        const form = new formidable.IncomingForm();\n        parser = form.parse.bind(form);\n        buffer = true;\n      } else if (isImageOrVideo(mime)) {\n        parser = exports.parse.image;\n        buffer = true; // For backwards-compatibility buffering default is ad-hoc MIME-dependent\n      } else if (exports.parse[mime]) {\n        parser = exports.parse[mime];\n      } else if ('text' == type) {\n        parser = exports.parse.text;\n        buffer = (buffer !== false);\n\n        // everyone wants their own white-labeled json\n      } else if (isJSON(mime)) {\n        parser = exports.parse['application/json'];\n        buffer = (buffer !== false);\n      } else if (buffer) {\n        parser = exports.parse.text;\n      }\n    }\n\n    // by default only buffer text/*, json and messed up thing from hell\n    if ((undefined === buffer && isText(mime)) || isJSON(mime)) {\n      buffer = true;\n    }\n\n    let parserHandlesEnd = false;\n    if (buffer) {\n      // Protectiona against zip bombs and other nuisance\n      let responseBytesLeft = this._maxResponseSize || 200000000;\n      res.on('data', buf => {\n        responseBytesLeft -= buf.byteLength || buf.length;\n        if (responseBytesLeft < 0) {\n          // This will propagate through error event\n          const err = Error(\"Maximum response size reached\");\n          err.code = \"ETOOLARGE\";\n          // Parsers aren't required to observe error event,\n          // so would incorrectly report success\n          parserHandlesEnd = false;\n          // Will emit error event\n          res.destroy(err);\n        }\n      });\n    }\n\n    if (parser) {\n      try {\n        // Unbuffered parsers are supposed to emit response early,\n        // which is weird BTW, because response.body won't be there.\n        parserHandlesEnd = buffer;\n\n        parser(res, (err, obj, files) => {\n          if (this.timedout) {\n            // Timeout has already handled all callbacks\n            return;\n          }\n\n          // Intentional (non-timeout) abort is supposed to preserve partial response,\n          // even if it doesn't parse.\n          if (err && !this._aborted) {\n            return this.callback(err);\n          }\n\n          if (parserHandlesEnd) {\n            this.emit('end');\n            this.callback(null, this._emitResponse(obj, files));\n          }\n        });\n      } catch (err) {\n        this.callback(err);\n        return;\n      }\n    }\n\n    this.res = res;\n\n    // unbuffered\n    if (!buffer) {\n      debug('unbuffered %s %s', this.method, this.url);\n      this.callback(null, this._emitResponse());\n      if (multipart) return; // allow multipart to handle end event\n      res.once('end', () => {\n        debug('end %s %s', this.method, this.url);\n        this.emit('end');\n      });\n      return;\n    }\n\n    // terminating events\n    res.once('error', err => {\n      parserHandlesEnd = false;\n      this.callback(err, null);\n    });\n    if (!parserHandlesEnd)\n      res.once('end', () => {\n        debug('end %s %s', this.method, this.url);\n        // TODO: unless buffering emit earlier to stream\n        this.emit('end');\n        this.callback(null, this._emitResponse());\n      });\n  });\n\n  this.emit('request', this);\n\n  // if a FormData instance got created, then we send that as the request body\n  const formData = this._formData;\n  if (formData) {\n\n    // set headers\n    const headers = formData.getHeaders();\n    for (const i in headers) {\n      debug('setting FormData header: \"%s: %s\"', i, headers[i]);\n      req.setHeader(i, headers[i]);\n    }\n\n    // attempt to get \"Content-Length\" header\n    formData.getLength((err, length) => {\n      // TODO: Add chunked encoding when no length (if err)\n\n      debug('got FormData Content-Length: %s', length);\n      if ('number' == typeof length) {\n        req.setHeader('Content-Length', length);\n      }\n\n      const getProgressMonitor = () => {\n        const lengthComputable = true;\n        const total = req.getHeader('Content-Length');\n        let loaded = 0;\n\n        const progress = new Stream.Transform();\n        progress._transform = (chunk, encoding, cb) => {\n          loaded += chunk.length;\n          this.emit('progress', {\n            direction: 'upload',\n            lengthComputable,\n            loaded,\n            total,\n          });\n          cb(null, chunk);\n        };\n        return progress;\n      };\n      formData.pipe(getProgressMonitor()).pipe(req);\n    });\n  } else {\n    req.end(data);\n  }\n\n  return this;\n};\n\n/**\n * Check whether response has a non-0-sized gzip-encoded body\n */\nRequest.prototype._shouldUnzip = res => {\n  if (res.statusCode === 204 || res.statusCode === 304) {\n    // These aren't supposed to have any body\n    return false;\n  }\n\n  // header content is a string, and distinction between 0 and no information is crucial\n  if ('0' === res.headers['content-length']) {\n    // We know that the body is empty (unfortunately, this check does not cover chunked encoding)\n    return false;\n  }\n\n  // console.log(res);\n  return /^\\s*(?:deflate|gzip)\\s*$/.test(res.headers['content-encoding']);\n};\n\n// generate HTTP verb methods\nif (methods.indexOf('del') == -1) {\n  // create a copy so we don't cause conflicts with\n  // other packages using the methods package and\n  // npm 3.x\n  methods = methods.slice(0);\n  methods.push('del');\n}\nmethods.forEach(method => {\n  const name = method;\n  method = 'del' == method ? 'delete' : method;\n\n  method = method.toUpperCase();\n  request[name] = (url, data, fn) => {\n    const req = request(method, url);\n    if ('function' == typeof data) (fn = data), (data = null);\n    if (data) {\n      if (method === 'GET' || method === 'HEAD') {\n        req.query(data);\n      } else {\n        req.send(data);\n      }\n    }\n    fn && req.end(fn);\n    return req;\n  };\n});\n\n/**\n * Check if `mime` is text and should be buffered.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api public\n */\n\nfunction isText(mime) {\n  const parts = mime.split('/');\n  const type = parts[0];\n  const subtype = parts[1];\n\n  return 'text' == type || 'x-www-form-urlencoded' == subtype;\n}\n\nfunction isImageOrVideo(mime) {\n  const type = mime.split('/')[0];\n\n  return 'image' == type || 'video' == type;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Check if we should follow the redirect `code`.\n *\n * @param {Number} code\n * @return {Boolean}\n * @api private\n */\n\nfunction isRedirect(code) {\n  return ~[301, 302, 303, 305, 307, 308].indexOf(code);\n}\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * AccountExport service.\n * @module api/AccountExportApi\n */\n\n/**\n * Constructs a new AccountExportApi. \n * @alias module:api/AccountExportApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Get account export info\n   * Get information about a specific account export.\n   * @param {String} exportId The unique id for the account export.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Exports} and HTTP response\n   */\n  this.getAccountExportsWithHttpInfo = function(exportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'exportId' is set\n    if (exportId === undefined || exportId === null) {\n      throw new Error(\"Missing the required parameter 'exportId' when calling \");\n    }\n\n    var pathParams = {\n      'export_id': exportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports/{export_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get account export info\n   * Get information about a specific account export.\n   * @param {String} exportId The unique id for the account export.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Exports}\n   */\n  this.getAccountExports = function(exportId, opts) {\n    return this.getAccountExportsWithHttpInfo(exportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * AccountExports service.\n * @module api/AccountExportsApi\n */\n\n/**\n * Constructs a new AccountExportsApi. \n * @alias module:api/AccountExportsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List account exports\n   * Get a list of account exports for a given account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response\n   */\n  this.listAccountExportsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List account exports\n   * Get a list of account exports for a given account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}\n   */\n  this.listAccountExports = function(opts) {\n    return this.listAccountExportsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add export\n   * Create a new account export in your Mailchimp account.\n   * @param {module:model/CreateAnAccountExport} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Exports} and HTTP response\n   */\n  this.createAccountExportWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add export\n   * Create a new account export in your Mailchimp account.\n   * @param {module:model/CreateAnAccountExport} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Exports}\n   */\n  this.createAccountExport = function(body) {\n    return this.createAccountExportWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * ActivityFeed service.\n * @module api/ActivityFeedApi\n */\n\n/**\n * Constructs a new ActivityFeedApi. \n * @alias module:api/ActivityFeedApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Get latest chimp chatter\n   * Return the Chimp Chatter for this account ordered by most recent.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response\n   */\n  this.getChimpChatterWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/activity-feed/chimp-chatter', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get latest chimp chatter\n   * Return the Chimp Chatter for this account ordered by most recent.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}\n   */\n  this.getChimpChatter = function(opts) {\n    return this.getChimpChatterWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * AuthorizedApps service.\n * @module api/AuthorizedAppsApi\n */\n\n/**\n * Constructs a new AuthorizedAppsApi. \n * @alias module:api/AuthorizedAppsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List authorized apps\n   * Get a list of an account's registered, connected applications.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/authorized-apps', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List authorized apps\n   * Get a list of an account's registered, connected applications.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get authorized app info\n   * Get information about a specific authorized application.\n   * @param {String} appId The unique id for the connected authorized application.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002Apps} and HTTP response\n   */\n  this.getWithHttpInfo = function(appId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'appId' is set\n    if (appId === undefined || appId === null) {\n      throw new Error(\"Missing the required parameter 'appId' when calling \");\n    }\n\n    var pathParams = {\n      'app_id': appId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/authorized-apps/{app_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get authorized app info\n   * Get information about a specific authorized application.\n   * @param {String} appId The unique id for the connected authorized application.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002Apps}\n   */\n  this.get = function(appId, opts) {\n    return this.getWithHttpInfo(appId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Automations service.\n * @module api/AutomationsApi\n */\n\n/**\n * Constructs a new AutomationsApi. \n * @alias module:api/AutomationsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Archive automation\n   * Archiving will permanently end your automation and keep the report data. You\u2019ll be able to replicate your archived automation, but you can\u2019t restart it.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.archiveWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/archive', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Archive automation\n   * Archiving will permanently end your automation and keep the report data. You\u2019ll be able to replicate your archived automation, but you can\u2019t restart it.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.archive = function(workflowId) {\n    return this.archiveWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete workflow email\n   * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete workflow email\n   * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.deleteWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automations\n   * Get a summary of an account's classic automations.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Date} opts.beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.status Restrict the results to automations with the specified status.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'before_create_time': ( opts['beforeCreateTime'] ? opts['beforeCreateTime'] : opts['before_create_time']),\n      'since_create_time': ( opts['sinceCreateTime'] ? opts['sinceCreateTime'] : opts['since_create_time']),\n      'before_start_time': ( opts['beforeStartTime'] ? opts['beforeStartTime'] : opts['before_start_time']),\n      'since_start_time': ( opts['sinceStartTime'] ? opts['sinceStartTime'] : opts['since_start_time']),\n      'status': ( opts['status'] ? opts['status'] : opts['status'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automations\n   * Get a summary of an account's classic automations.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Date} opts.beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.status Restrict the results to automations with the specified status.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get automation info\n   * Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflow} and HTTP response\n   */\n  this.getWithHttpInfo = function(workflowId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get automation info\n   * Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflow}\n   */\n  this.get = function(workflowId, opts) {\n    return this.getWithHttpInfo(workflowId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automated emails\n   * Get a summary of the emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationEmails} and HTTP response\n   */\n  this.listAllWorkflowEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automated emails\n   * Get a summary of the emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationEmails}\n   */\n  this.listAllWorkflowEmails = function(workflowId) {\n    return this.listAllWorkflowEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get workflow email info\n   * Get information about an individual classic automation workflow email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflowEmail} and HTTP response\n   */\n  this.getWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get workflow email info\n   * Get information about an individual classic automation workflow email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflowEmail}\n   */\n  this.getWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.getWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automated email subscribers\n   * Get information about a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response\n   */\n  this.getWorkflowEmailSubscriberQueueWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automated email subscribers\n   * Get information about a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}\n   */\n  this.getWorkflowEmailSubscriberQueue = function(workflowId, workflowEmailId) {\n    return this.getWorkflowEmailSubscriberQueueWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get automated email subscriber\n   * Get information about a specific subscriber in a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberInAutomationQueue2} and HTTP response\n   */\n  this.getWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get automated email subscriber\n   * Get information about a specific subscriber in a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberInAutomationQueue2}\n   */\n  this.getWorkflowEmailSubscriber = function(workflowId, workflowEmailId, subscriberHash) {\n    return this.getWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List subscribers removed from workflow\n   * Get information about subscribers who were removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemovedSubscribers} and HTTP response\n   */\n  this.listWorkflowEmailSubscribersRemovedWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List subscribers removed from workflow\n   * Get information about subscribers who were removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemovedSubscribers}\n   */\n  this.listWorkflowEmailSubscribersRemoved = function(workflowId) {\n    return this.listWorkflowEmailSubscribersRemovedWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get subscriber removed from workflow\n   * Get information about a specific subscriber who was removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow} and HTTP response\n   */\n  this.getRemovedWorkflowEmailSubscriberWithHttpInfo = function(workflowId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get subscriber removed from workflow\n   * Get information about a specific subscriber who was removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow}\n   */\n  this.getRemovedWorkflowEmailSubscriber = function(workflowId, subscriberHash) {\n    return this.getRemovedWorkflowEmailSubscriberWithHttpInfo(workflowId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update workflow email\n   * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/UpdateInformationAboutASpecificWorkflowEmail} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflowEmail} and HTTP response\n   */\n  this.updateWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update workflow email\n   * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/UpdateInformationAboutASpecificWorkflowEmail} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflowEmail}\n   */\n  this.updateWorkflowEmail = function(workflowId, workflowEmailId, body) {\n    return this.updateWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add automation\n   * Create a new classic automation in your Mailchimp account.\n   * @param {module:model/AutomationWorkflow1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflow} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add automation\n   * Create a new classic automation in your Mailchimp account.\n   * @param {module:model/AutomationWorkflow1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflow}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause automation emails\n   * Pause all emails in a specific classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseAllEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/pause-all-emails', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause automation emails\n   * Pause all emails in a specific classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pauseAllEmails = function(workflowId) {\n    return this.pauseAllEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start automation emails\n   * Start all emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.startAllEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/start-all-emails', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start automation emails\n   * Start all emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.startAllEmails = function(workflowId) {\n    return this.startAllEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause automated email\n   * Pause an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause automated email\n   * Pause an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pauseWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.pauseWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start automated email\n   * Start an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.startWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/actions/start', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start automated email\n   * Start an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.startWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.startWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add subscriber to workflow email\n   * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/SubscriberInAutomationQueue1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberInAutomationQueue2} and HTTP response\n   */\n  this.addWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add subscriber to workflow email\n   * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/SubscriberInAutomationQueue1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberInAutomationQueue2}\n   */\n  this.addWorkflowEmailSubscriber = function(workflowId, workflowEmailId, body) {\n    return this.addWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Remove subscriber from workflow\n   * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {module:model/SubscriberInAutomationQueue3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow} and HTTP response\n   */\n  this.removeWorkflowEmailSubscriberWithHttpInfo = function(workflowId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Remove subscriber from workflow\n   * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {module:model/SubscriberInAutomationQueue3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow}\n   */\n  this.removeWorkflowEmailSubscriber = function(workflowId, body) {\n    return this.removeWorkflowEmailSubscriberWithHttpInfo(workflowId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * BatchWebhooks service.\n * @module api/BatchWebhooksApi\n */\n\n/**\n * Constructs a new BatchWebhooksApi. \n * @alias module:api/BatchWebhooksApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete batch webhook\n   * Remove a batch webhook. Webhooks will no longer be sent to the given URL.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(batchWebhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete batch webhook\n   * Remove a batch webhook. Webhooks will no longer be sent to the given URL.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(batchWebhookId) {\n    return this.removeWithHttpInfo(batchWebhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get batch webhook info\n   * Get information about a specific batch webhook.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.getWithHttpInfo = function(batchWebhookId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get batch webhook info\n   * Get information about a specific batch webhook.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.get = function(batchWebhookId, opts) {\n    return this.getWithHttpInfo(batchWebhookId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List batch webhooks\n   * Get all webhooks that have been configured for batches.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhooks} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List batch webhooks\n   * Get all webhooks that have been configured for batches.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhooks}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update batch webhook\n   * Update a webhook that will fire whenever any batch request completes processing.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {module:model/BatchWebhook2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.updateWithHttpInfo = function(batchWebhookId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update batch webhook\n   * Update a webhook that will fire whenever any batch request completes processing.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {module:model/BatchWebhook2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.update = function(batchWebhookId, body) {\n    return this.updateWithHttpInfo(batchWebhookId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add batch webhook\n   * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.\n   * @param {module:model/BatchWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add batch webhook\n   * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.\n   * @param {module:model/BatchWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Batches service.\n * @module api/BatchesApi\n */\n\n/**\n * Constructs a new BatchesApi. \n * @alias module:api/BatchesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete batch request\n   * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.\n   * @param {String} batchId The unique id for the batch operation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteRequestWithHttpInfo = function(batchId) {\n    var postBody = null;\n\n    // verify the required parameter 'batchId' is set\n    if (batchId === undefined || batchId === null) {\n      throw new Error(\"Missing the required parameter 'batchId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_id': batchId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches/{batch_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete batch request\n   * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.\n   * @param {String} batchId The unique id for the batch operation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteRequest = function(batchId) {\n    return this.deleteRequestWithHttpInfo(batchId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List batch requests\n   * Get a summary of batch requests that have been made.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchOperations} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List batch requests\n   * Get a summary of batch requests that have been made.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchOperations}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get batch operation status\n   * Get the status of a batch request.\n   * @param {String} batchId The unique id for the batch operation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response\n   */\n  this.statusWithHttpInfo = function(batchId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'batchId' is set\n    if (batchId === undefined || batchId === null) {\n      throw new Error(\"Missing the required parameter 'batchId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_id': batchId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches/{batch_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get batch operation status\n   * Get the status of a batch request.\n   * @param {String} batchId The unique id for the batch operation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}\n   */\n  this.status = function(batchId, opts) {\n    return this.statusWithHttpInfo(batchId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start batch operation\n   * Begin processing a batch operations request.\n   * @param {module:model/Body} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response\n   */\n  this.startWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start batch operation\n   * Begin processing a batch operations request.\n   * @param {module:model/Body} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}\n   */\n  this.start = function(body) {\n    return this.startWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * CampaignFolders service.\n * @module api/CampaignFoldersApi\n */\n\n/**\n * Constructs a new CampaignFoldersApi. \n * @alias module:api/CampaignFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete campaign folder\n   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign folder\n   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(folderId) {\n    return this.removeWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign folders\n   * Get all folders used to organize campaigns.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolders} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign folders\n   * Get all folders used to organize campaigns.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolders}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign folder\n   * Get information about a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.getWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign folder\n   * Get information about a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.get = function(folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign folder\n   * Update a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {module:model/CampaignFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.updateWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign folder\n   * Update a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {module:model/CampaignFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.update = function(folderId, body) {\n    return this.updateWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign folder\n   * Create a new campaign folder.\n   * @param {module:model/CampaignFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign folder\n   * Create a new campaign folder.\n   * @param {module:model/CampaignFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Campaigns service.\n * @module api/CampaignsApi\n */\n\n/**\n * Constructs a new CampaignsApi. \n * @alias module:api/CampaignsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete campaign\n   * Remove a campaign from your Mailchimp account.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign\n   * Remove a campaign from your Mailchimp account.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(campaignId) {\n    return this.removeWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete campaign feedback message\n   * Remove a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFeedbackMessageWithHttpInfo = function(campaignId, feedbackId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign feedback message\n   * Remove a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFeedbackMessage = function(campaignId, feedbackId) {\n    return this.deleteFeedbackMessageWithHttpInfo(campaignId, feedbackId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaigns\n   * Get all campaigns in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {module:model/String} opts.status The status of the campaign.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {String} opts.memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member\u2019s email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'status': ( opts['status'] ? opts['status'] : opts['status']),\n      'before_send_time': ( opts['beforeSendTime'] ? opts['beforeSendTime'] : opts['before_send_time']),\n      'since_send_time': ( opts['sinceSendTime'] ? opts['sinceSendTime'] : opts['since_send_time']),\n      'before_create_time': ( opts['beforeCreateTime'] ? opts['beforeCreateTime'] : opts['before_create_time']),\n      'since_create_time': ( opts['sinceCreateTime'] ? opts['sinceCreateTime'] : opts['since_create_time']),\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id']),\n      'folder_id': ( opts['folderId'] ? opts['folderId'] : opts['folder_id']),\n      'member_id': ( opts['memberId'] ? opts['memberId'] : opts['member_id']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaigns\n   * Get all campaigns in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {module:model/String} opts.status The status of the campaign.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {String} opts.memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member\u2019s email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign info\n   * Get information about a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.getWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign info\n   * Get information about a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.get = function(campaignId, opts) {\n    return this.getWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign content\n   * Get the the HTML and plain-text content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignContent} and HTTP response\n   */\n  this.getContentWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign content\n   * Get the the HTML and plain-text content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignContent}\n   */\n  this.getContent = function(campaignId, opts) {\n    return this.getContentWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign feedback\n   * Get team feedback while you're working together on a Mailchimp campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReports} and HTTP response\n   */\n  this.getFeedbackWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign feedback\n   * Get team feedback while you're working together on a Mailchimp campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReports}\n   */\n  this.getFeedback = function(campaignId, opts) {\n    return this.getFeedbackWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign feedback message\n   * Get a specific feedback message from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.getFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign feedback message\n   * Get a specific feedback message from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.getFeedbackMessage = function(campaignId, feedbackId, opts) {\n    return this.getFeedbackMessageWithHttpInfo(campaignId, feedbackId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign send checklist\n   * Review the send checklist for a campaign, and resolve any issues before sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendChecklist} and HTTP response\n   */\n  this.getSendChecklistWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/send-checklist', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign send checklist\n   * Review the send checklist for a campaign, and resolve any issues before sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendChecklist}\n   */\n  this.getSendChecklist = function(campaignId, opts) {\n    return this.getSendChecklistWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign settings\n   * Update some or all of the settings for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Campaign2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.updateWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign settings\n   * Update some or all of the settings for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Campaign2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.update = function(campaignId, body) {\n    return this.updateWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign feedback message\n   * Update a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {module:model/CampaignFeedback3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.updateFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign feedback message\n   * Update a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {module:model/CampaignFeedback3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.updateFeedbackMessage = function(campaignId, feedbackId, body) {\n    return this.updateFeedbackMessageWithHttpInfo(campaignId, feedbackId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign\n   * Create a new Mailchimp campaign.\n   * @param {module:model/Campaign1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign\n   * Create a new Mailchimp campaign.\n   * @param {module:model/Campaign1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Cancel campaign\n   * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.cancelSendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/cancel-send', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Cancel campaign\n   * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.cancelSend = function(campaignId) {\n    return this.cancelSendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Resend campaign\n   * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign3} and HTTP response\n   */\n  this.createResendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/create-resend', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Resend campaign\n   * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign3}\n   */\n  this.createResend = function(campaignId) {\n    return this.createResendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause rss campaign\n   * Pause an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/pause', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause rss campaign\n   * Pause an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pause = function(campaignId) {\n    return this.pauseWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Replicate campaign\n   * Replicate a campaign in saved or send status.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign3} and HTTP response\n   */\n  this.replicateWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/replicate', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Replicate campaign\n   * Replicate a campaign in saved or send status.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign3}\n   */\n  this.replicate = function(campaignId) {\n    return this.replicateWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Resume rss campaign\n   * Resume an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.resumeWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/resume', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Resume rss campaign\n   * Resume an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.resume = function(campaignId) {\n    return this.resumeWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Schedule campaign\n   * Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.scheduleWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/schedule', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Schedule campaign\n   * Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.schedule = function(campaignId, body) {\n    return this.scheduleWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Send campaign\n   * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.sendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/send', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Send campaign\n   * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.send = function(campaignId) {\n    return this.sendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Send test email\n   * Send a test email.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.sendTestEmailWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/test', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Send test email\n   * Send a test email.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.sendTestEmail = function(campaignId, body) {\n    return this.sendTestEmailWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unschedule campaign\n   * Unschedule a scheduled campaign that hasn't started sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unscheduleWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/unschedule', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unschedule campaign\n   * Unschedule a scheduled campaign that hasn't started sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unschedule = function(campaignId) {\n    return this.unscheduleWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign feedback\n   * Add feedback on a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignFeedback1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.addFeedbackWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign feedback\n   * Add feedback on a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignFeedback1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.addFeedback = function(campaignId, body) {\n    return this.addFeedbackWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Set campaign content\n   * Set the content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignContent1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignContent} and HTTP response\n   */\n  this.setContentWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/content', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Set campaign content\n   * Set the content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignContent1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignContent}\n   */\n  this.setContent = function(campaignId, body) {\n    return this.setContentWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * ConnectedSites service.\n * @module api/ConnectedSitesApi\n */\n\n/**\n * Constructs a new ConnectedSitesApi. \n * @alias module:api/ConnectedSitesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(connectedSiteId) {\n    return this.removeWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSites} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSites}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.getWithHttpInfo = function(connectedSiteId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.get = function(connectedSiteId, opts) {\n    return this.getWithHttpInfo(connectedSiteId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.verifyScriptInstallationWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}/actions/verify-script-installation', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.verifyScriptInstallation = function(connectedSiteId) {\n    return this.verifyScriptInstallationWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Conversations service.\n * @module api/ConversationsApi\n */\n\n/**\n * Constructs a new ConversationsApi. \n * @alias module:api/ConversationsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List conversations\n   * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.hasUnreadMessages Whether the conversation has any unread messages.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TrackedConversations} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'has_unread_messages': ( opts['hasUnreadMessages'] ? opts['hasUnreadMessages'] : opts['has_unread_messages']),\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List conversations\n   * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.hasUnreadMessages Whether the conversation has any unread messages.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TrackedConversations}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get conversation\n   * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Conversation} and HTTP response\n   */\n  this.getWithHttpInfo = function(conversationId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get conversation\n   * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Conversation}\n   */\n  this.get = function(conversationId, opts) {\n    return this.getWithHttpInfo(conversationId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List messages\n   * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.isRead Whether a conversation message has been marked as read.\n   * @param {Date} opts.beforeTimestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceTimestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfConversationMessages} and HTTP response\n   */\n  this.getConversationMessagesWithHttpInfo = function(conversationId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'is_read': ( opts['isRead'] ? opts['isRead'] : opts['is_read']),\n      'before_timestamp': ( opts['beforeTimestamp'] ? opts['beforeTimestamp'] : opts['before_timestamp']),\n      'since_timestamp': ( opts['sinceTimestamp'] ? opts['sinceTimestamp'] : opts['since_timestamp'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}/messages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List messages\n   * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.isRead Whether a conversation message has been marked as read.\n   * @param {Date} opts.beforeTimestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceTimestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfConversationMessages}\n   */\n  this.getConversationMessages = function(conversationId, opts) {\n    return this.getConversationMessagesWithHttpInfo(conversationId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get message\n   * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {String} messageId The unique id for the conversation message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationMessage} and HTTP response\n   */\n  this.getConversationMessageWithHttpInfo = function(conversationId, messageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    // verify the required parameter 'messageId' is set\n    if (messageId === undefined || messageId === null) {\n      throw new Error(\"Missing the required parameter 'messageId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId,\n      'message_id': messageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}/messages/{message_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get message\n   * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren\u2019t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {String} messageId The unique id for the conversation message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationMessage}\n   */\n  this.getConversationMessage = function(conversationId, messageId, opts) {\n    return this.getConversationMessageWithHttpInfo(conversationId, messageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * CustomerJourneys service.\n * @module api/CustomerJourneysApi\n */\n\n/**\n * Constructs a new CustomerJourneysApi. \n * @alias module:api/CustomerJourneysApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Customer Journeys API trigger for a contact\n   * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We\u2019ll provide a url during the process that includes the {journey_id} and {step_id}. You\u2019ll then be able to use this endpoint to trigger the condition for the posted contact.\n   * @param {Number} journeyId The id for the Journey.\n   * @param {Number} stepId The id for the Step.\n   * @param {module:model/SubscriberInCustomerJourneysAudience} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n  this.triggerWithHttpInfo = function(journeyId, stepId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'journeyId' is set\n    if (journeyId === undefined || journeyId === null) {\n      throw new Error(\"Missing the required parameter 'journeyId' when calling \");\n    }\n\n    // verify the required parameter 'stepId' is set\n    if (stepId === undefined || stepId === null) {\n      throw new Error(\"Missing the required parameter 'stepId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'journey_id': journeyId,\n      'step_id': stepId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Customer Journeys API trigger for a contact\n   * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We\u2019ll provide a url during the process that includes the {journey_id} and {step_id}. You\u2019ll then be able to use this endpoint to trigger the condition for the posted contact.\n   * @param {Number} journeyId The id for the Journey.\n   * @param {Number} stepId The id for the Step.\n   * @param {module:model/SubscriberInCustomerJourneysAudience} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n  this.trigger = function(journeyId, stepId, body) {\n    return this.triggerWithHttpInfo(journeyId, stepId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Ecommerce service.\n * @module api/EcommerceApi\n */\n\n/**\n * Constructs a new EcommerceApi. \n * @alias module:api/EcommerceApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n  this.deleteStoreWithHttpInfo = function(storeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n  this.deleteStore = function(storeId) {\n    return this.deleteStoreWithHttpInfo(storeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCartWithHttpInfo = function(storeId, cartId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCart = function(storeId, cartId) {\n    return this.deleteStoreCartWithHttpInfo(storeId, cartId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteCartLineItemWithHttpInfo = function(storeId, cartId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteCartLineItem = function(storeId, cartId, lineId) {\n    return this.deleteCartLineItemWithHttpInfo(storeId, cartId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCustomerWithHttpInfo = function(storeId, customerId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCustomer = function(storeId, customerId) {\n    return this.deleteStoreCustomerWithHttpInfo(storeId, customerId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderWithHttpInfo = function(storeId, orderId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrder = function(storeId, orderId) {\n    return this.deleteOrderWithHttpInfo(storeId, orderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderLineItemWithHttpInfo = function(storeId, orderId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrderLineItem = function(storeId, orderId, lineId) {\n    return this.deleteOrderLineItemWithHttpInfo(storeId, orderId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreProductWithHttpInfo = function(storeId, productId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreProduct = function(storeId, productId) {\n    return this.deleteStoreProductWithHttpInfo(storeId, productId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductImageWithHttpInfo = function(storeId, productId, imageId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductImage = function(storeId, productId, imageId) {\n    return this.deleteProductImageWithHttpInfo(storeId, productId, imageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductVariantWithHttpInfo = function(storeId, productId, variantId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductVariant = function(storeId, productId, variantId) {\n    return this.deleteProductVariantWithHttpInfo(storeId, productId, variantId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoCode = function(storeId, promoRuleId, promoCodeId) {\n    return this.deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoRuleWithHttpInfo = function(storeId, promoRuleId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoRule = function(storeId, promoRuleId) {\n    return this.deletePromoRuleWithHttpInfo(storeId, promoRuleId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders} and HTTP response\n   */\n  this.ordersWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id']),\n      'outreach_id': ( opts['outreachId'] ? opts['outreachId'] : opts['outreach_id']),\n      'customer_id': ( opts['customerId'] ? opts['customerId'] : opts['customer_id']),\n      'has_outreach': ( opts['hasOutreach'] ? opts['hasOutreach'] : opts['has_outreach'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders}\n   */\n  this.orders = function(opts) {\n    return this.ordersWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStores} and HTTP response\n   */\n  this.storesWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStores}\n   */\n  this.stores = function(opts) {\n    return this.storesWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.getStoreWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.getStore = function(storeId, opts) {\n    return this.getStoreWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Carts} and HTTP response\n   */\n  this.getStoreCartsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Carts}\n   */\n  this.getStoreCarts = function(storeId, opts) {\n    return this.getStoreCartsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.getStoreCartWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.getStoreCart = function(storeId, cartId, opts) {\n    return this.getStoreCartWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartLines} and HTTP response\n   */\n  this.getAllCartLineItemsWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartLines}\n   */\n  this.getAllCartLineItems = function(storeId, cartId, opts) {\n    return this.getAllCartLineItemsWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.getCartLineItemWithHttpInfo = function(storeId, cartId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.getCartLineItem = function(storeId, cartId, lineId, opts) {\n    return this.getCartLineItemWithHttpInfo(storeId, cartId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customers} and HTTP response\n   */\n  this.getAllStoreCustomersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'email_address': ( opts['emailAddress'] ? opts['emailAddress'] : opts['email_address'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customers}\n   */\n  this.getAllStoreCustomers = function(storeId, opts) {\n    return this.getAllStoreCustomersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.getStoreCustomerWithHttpInfo = function(storeId, customerId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.getStoreCustomer = function(storeId, customerId, opts) {\n    return this.getStoreCustomerWithHttpInfo(storeId, customerId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders1} and HTTP response\n   */\n  this.getStoreOrdersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'customer_id': ( opts['customerId'] ? opts['customerId'] : opts['customer_id']),\n      'has_outreach': ( opts['hasOutreach'] ? opts['hasOutreach'] : opts['has_outreach']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id']),\n      'outreach_id': ( opts['outreachId'] ? opts['outreachId'] : opts['outreach_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders1}\n   */\n  this.getStoreOrders = function(storeId, opts) {\n    return this.getStoreOrdersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.getOrderWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.getOrder = function(storeId, orderId, opts) {\n    return this.getOrderWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLines} and HTTP response\n   */\n  this.getAllOrderLineItemsWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLines}\n   */\n  this.getAllOrderLineItems = function(storeId, orderId, opts) {\n    return this.getAllOrderLineItemsWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.getOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.getOrderLineItem = function(storeId, orderId, lineId, opts) {\n    return this.getOrderLineItemWithHttpInfo(storeId, orderId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Products} and HTTP response\n   */\n  this.getAllStoreProductsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Products}\n   */\n  this.getAllStoreProducts = function(storeId, opts) {\n    return this.getAllStoreProductsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.getStoreProductWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.getStoreProduct = function(storeId, productId, opts) {\n    return this.getStoreProductWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImages} and HTTP response\n   */\n  this.getProductImagesWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImages}\n   */\n  this.getProductImages = function(storeId, productId, opts) {\n    return this.getProductImagesWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.getProductImageWithHttpInfo = function(storeId, productId, imageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.getProductImage = function(storeId, productId, imageId, opts) {\n    return this.getProductImageWithHttpInfo(storeId, productId, imageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariants} and HTTP response\n   */\n  this.getProductVariantsWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariants}\n   */\n  this.getProductVariants = function(storeId, productId, opts) {\n    return this.getProductVariantsWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.getProductVariantWithHttpInfo = function(storeId, productId, variantId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.getProductVariant = function(storeId, productId, variantId, opts) {\n    return this.getProductVariantWithHttpInfo(storeId, productId, variantId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoCodes} and HTTP response\n   */\n  this.getPromoCodesWithHttpInfo = function(promoRuleId, storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'promo_rule_id': promoRuleId,\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoCodes}\n   */\n  this.getPromoCodes = function(promoRuleId, storeId, opts) {\n    return this.getPromoCodesWithHttpInfo(promoRuleId, storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.getPromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.getPromoCode = function(storeId, promoRuleId, promoCodeId, opts) {\n    return this.getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoRules} and HTTP response\n   */\n  this.listPromoRulesWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoRules}\n   */\n  this.listPromoRules = function(storeId, opts) {\n    return this.listPromoRulesWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.getPromoRuleWithHttpInfo = function(storeId, promoRuleId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.getPromoRule = function(storeId, promoRuleId, opts) {\n    return this.getPromoRuleWithHttpInfo(storeId, promoRuleId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.updateStoreWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.updateStore = function(storeId, body) {\n    return this.updateStoreWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.updateStoreCartWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.updateStoreCart = function(storeId, cartId, body) {\n    return this.updateStoreCartWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.updateCartLineItemWithHttpInfo = function(storeId, cartId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.updateCartLineItem = function(storeId, cartId, lineId, body) {\n    return this.updateCartLineItemWithHttpInfo(storeId, cartId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.updateStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.updateStoreCustomer = function(storeId, customerId, body) {\n    return this.updateStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.updateOrderWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.updateOrder = function(storeId, orderId, body) {\n    return this.updateOrderWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.updateOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.updateOrderLineItem = function(storeId, orderId, lineId, body) {\n    return this.updateOrderLineItemWithHttpInfo(storeId, orderId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.updateStoreProductWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.updateStoreProduct = function(storeId, productId, body) {\n    return this.updateStoreProductWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.updateProductImageWithHttpInfo = function(storeId, productId, imageId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.updateProductImage = function(storeId, productId, imageId, body) {\n    return this.updateProductImageWithHttpInfo(storeId, productId, imageId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.updateProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.updateProductVariant = function(storeId, productId, variantId, body) {\n    return this.updateProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.updatePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.updatePromoCode = function(storeId, promoRuleId, promoCodeId, body) {\n    return this.updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.updatePromoRuleWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.updatePromoRule = function(storeId, promoRuleId, body) {\n    return this.updatePromoRuleWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.addStoreWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.addStore = function(body) {\n    return this.addStoreWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.addStoreCartWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.addStoreCart = function(storeId, body) {\n    return this.addStoreCartWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.addCartLineItemWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.addCartLineItem = function(storeId, cartId, body) {\n    return this.addCartLineItemWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.addStoreCustomerWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.addStoreCustomer = function(storeId, body) {\n    return this.addStoreCustomerWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.addStoreOrderWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.addStoreOrder = function(storeId, body) {\n    return this.addStoreOrderWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.addOrderLineItemWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.addOrderLineItem = function(storeId, orderId, body) {\n    return this.addOrderLineItemWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.addStoreProductWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.addStoreProduct = function(storeId, body) {\n    return this.addStoreProductWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.addProductImageWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.addProductImage = function(storeId, productId, body) {\n    return this.addProductImageWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantsWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariants = function(storeId, productId, body) {\n    return this.addProductVariantsWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.addPromoCodeWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.addPromoCode = function(storeId, promoRuleId, body) {\n    return this.addPromoCodeWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.addPromoRulesWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.addPromoRules = function(storeId, body) {\n    return this.addPromoRulesWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.setStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.setStoreCustomer = function(storeId, customerId, body) {\n    return this.setStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariant = function(storeId, productId, variantId, body) {\n    return this.addProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * FacebookAds service.\n * @module api/FacebookAdsApi\n */\n\n/**\n * Constructs a new FacebookAdsApi. \n * @alias module:api/FacebookAdsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List facebook ads\n   * Get list of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/facebook-ads', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ads\n   * Get list of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get facebook ad info\n   * Get details of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response\n   */\n  this.getAdWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/facebook-ads/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get facebook ad info\n   * Get details of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009}\n   */\n  this.getAd = function(outreachId, opts) {\n    return this.getAdWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * FileManager service.\n * @module api/FileManagerApi\n */\n\n/**\n * Constructs a new FileManagerApi. \n * @alias module:api/FileManagerApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete file\n   * Remove a specific file from the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFileWithHttpInfo = function(fileId) {\n    var postBody = null;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete file\n   * Remove a specific file from the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFile = function(fileId) {\n    return this.deleteFileWithHttpInfo(fileId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete folder\n   * Delete a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFolderWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete folder\n   * Delete a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFolder = function(folderId) {\n    return this.deleteFolderWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List stored files\n   * Get a list of available images and files stored in the File Manager for the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The file type for the File Manager file.\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileManager} and HTTP response\n   */\n  this.filesWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List stored files\n   * Get a list of available images and files stored in the File Manager for the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The file type for the File Manager file.\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileManager}\n   */\n  this.files = function(opts) {\n    return this.filesWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get file\n   * Get information about a specific file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.getFileWithHttpInfo = function(fileId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get file\n   * Get information about a specific file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.getFile = function(fileId, opts) {\n    return this.getFileWithHttpInfo(fileId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List folders\n   * Get a list of all folders in the File Manager.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileManagerFolders} and HTTP response\n   */\n  this.listFoldersWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List folders\n   * Get a list of all folders in the File Manager.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileManagerFolders}\n   */\n  this.listFolders = function(opts) {\n    return this.listFoldersWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get folder\n   * Get information about a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.getFolderWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get folder\n   * Get information about a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.getFolder = function(folderId, opts) {\n    return this.getFolderWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update file\n   * Update a file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {module:model/GalleryFile2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.updateFileWithHttpInfo = function(fileId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update file\n   * Update a file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {module:model/GalleryFile2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.updateFile = function(fileId, body) {\n    return this.updateFileWithHttpInfo(fileId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update folder\n   * Update a specific File Manager folder.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {module:model/GalleryFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.updateFolderWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update folder\n   * Update a specific File Manager folder.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {module:model/GalleryFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.updateFolder = function(folderId, body) {\n    return this.updateFolderWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add file\n   * Upload a new image or file to the File Manager.\n   * @param {module:model/GalleryFile1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.uploadWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add file\n   * Upload a new image or file to the File Manager.\n   * @param {module:model/GalleryFile1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.upload = function(body) {\n    return this.uploadWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add folder\n   * Create a new folder in the File Manager.\n   * @param {module:model/GalleryFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.createFolderWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add folder\n   * Create a new folder in the File Manager.\n   * @param {module:model/GalleryFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.createFolder = function(body) {\n    return this.createFolderWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * LandingPages service.\n * @module api/LandingPagesApi\n */\n\n/**\n * Constructs a new LandingPagesApi. \n * @alias module:api/LandingPagesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete landing page\n   * Delete a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete landing page\n   * Delete a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePage = function(pageId) {\n    return this.deletePageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List landing pages\n   * Get all landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response\n   */\n  this.getAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List landing pages\n   * Get all landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}\n   */\n  this.getAll = function(opts) {\n    return this.getAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page info\n   * Get information about a specific page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.getPageWithHttpInfo = function(pageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page info\n   * Get information about a specific page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.getPage = function(pageId, opts) {\n    return this.getPageWithHttpInfo(pageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page content\n   * Get the the HTML for your landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPageContent} and HTTP response\n   */\n  this.getPageContentWithHttpInfo = function(pageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page content\n   * Get the the HTML for your landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPageContent}\n   */\n  this.getPageContent = function(pageId, opts) {\n    return this.getPageContentWithHttpInfo(pageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update landing page\n   * Update a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {module:model/LandingPage2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.updatePageWithHttpInfo = function(pageId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update landing page\n   * Update a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {module:model/LandingPage2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.updatePage = function(pageId, body) {\n    return this.updatePageWithHttpInfo(pageId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add landing page\n   * Create a new Mailchimp landing page.\n   * @param {module:model/LandingPage1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.useDefaultList Will create the Landing Page using the account's Default List instead of requiring a list_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.createWithHttpInfo = function(body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'use_default_list': ( opts['useDefaultList'] ? opts['useDefaultList'] : opts['use_default_list'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add landing page\n   * Create a new Mailchimp landing page.\n   * @param {module:model/LandingPage1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.useDefaultList Will create the Landing Page using the account's Default List instead of requiring a list_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.create = function(body, opts) {\n    return this.createWithHttpInfo(body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Publish landing page\n   * Publish a landing page that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.publishPageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/actions/publish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Publish landing page\n   * Publish a landing page that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.publishPage = function(pageId) {\n    return this.publishPageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unpublish landing page\n   * Unpublish a landing page that is in draft or has been published.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unpublishPageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/actions/unpublish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unpublish landing page\n   * Unpublish a landing page that is in draft or has been published.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unpublishPage = function(pageId) {\n    return this.unpublishPageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Lists service.\n * @module api/ListsApi\n */\n\n/**\n * Constructs a new ListsApi. \n * @alias module:api/ListsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete list\n   * Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history\u2014including subscriber activity, unsubscribes, complaints, and bounces. You\u2019ll also lose subscribers\u2019 email addresses, unless you exported and backed up your list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete list\n   * Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history\u2014including subscriber activity, unsubscribes, complaints, and bounces. You\u2019ll also lose subscribers\u2019 email addresses, unless you exported and backed up your list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteList = function(listId) {\n    return this.deleteListWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete interest category\n   * Delete a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteInterestCategoryWithHttpInfo = function(listId, interestCategoryId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete interest category\n   * Delete a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteInterestCategory = function(listId, interestCategoryId) {\n    return this.deleteInterestCategoryWithHttpInfo(listId, interestCategoryId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete interest in category\n   * Delete interests or group names in a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete interest in category\n   * Delete interests or group names in a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteInterestCategoryInterest = function(listId, interestCategoryId, interestId) {\n    return this.deleteInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Archive list member\n   * Archive a list member. To permanently delete, use the delete-permanent action.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberWithHttpInfo = function(listId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Archive list member\n   * Archive a list member. To permanently delete, use the delete-permanent action.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMember = function(listId, subscriberHash) {\n    return this.deleteListMemberWithHttpInfo(listId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete note\n   * Delete a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete note\n   * Delete a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMemberNote = function(listId, subscriberHash, noteId) {\n    return this.deleteListMemberNoteWithHttpInfo(listId, subscriberHash, noteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete merge field\n   * Delete a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMergeFieldWithHttpInfo = function(listId, mergeId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete merge field\n   * Delete a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMergeField = function(listId, mergeId) {\n    return this.deleteListMergeFieldWithHttpInfo(listId, mergeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete segment\n   * Delete a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteSegmentWithHttpInfo = function(listId, segmentId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete segment\n   * Delete a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteSegment = function(listId, segmentId) {\n    return this.deleteSegmentWithHttpInfo(listId, segmentId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Remove list member from segment\n   * Remove a member from the specified static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeSegmentMemberWithHttpInfo = function(listId, segmentId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Remove list member from segment\n   * Remove a member from the specified static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.removeSegmentMember = function(listId, segmentId, subscriberHash) {\n    return this.removeSegmentMemberWithHttpInfo(listId, segmentId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete webhook\n   * Delete a specific webhook in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListWebhookWithHttpInfo = function(listId, webhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete webhook\n   * Delete a specific webhook in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListWebhook = function(listId, webhookId) {\n    return this.deleteListWebhookWithHttpInfo(listId, webhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member tags\n   * Get the tags on a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfTags} and HTTP response\n   */\n  this.getListMemberTagsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/tags', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member tags\n   * Get the tags on a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfTags}\n   */\n  this.getListMemberTags = function(listId, subscriberHash, opts) {\n    return this.getListMemberTagsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get lists info\n   * Get information about all lists in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.beforeDateCreated Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceDateCreated Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCampaignLastSent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCampaignLastSent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.email Restrict results to lists that include a specific subscriber's email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.hasEcommerceStore Restrict results to lists that contain an active, connected, undeleted ecommerce store.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberLists} and HTTP response\n   */\n  this.getAllListsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'before_date_created': ( opts['beforeDateCreated'] ? opts['beforeDateCreated'] : opts['before_date_created']),\n      'since_date_created': ( opts['sinceDateCreated'] ? opts['sinceDateCreated'] : opts['since_date_created']),\n      'before_campaign_last_sent': ( opts['beforeCampaignLastSent'] ? opts['beforeCampaignLastSent'] : opts['before_campaign_last_sent']),\n      'since_campaign_last_sent': ( opts['sinceCampaignLastSent'] ? opts['sinceCampaignLastSent'] : opts['since_campaign_last_sent']),\n      'email': ( opts['email'] ? opts['email'] : opts['email']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'has_ecommerce_store': ( opts['hasEcommerceStore'] ? opts['hasEcommerceStore'] : opts['has_ecommerce_store']),\n      'include_total_contacts': ( opts['includeTotalContacts'] ? opts['includeTotalContacts'] : opts['include_total_contacts'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get lists info\n   * Get information about all lists in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.beforeDateCreated Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceDateCreated Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCampaignLastSent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCampaignLastSent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.email Restrict results to lists that include a specific subscriber's email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.hasEcommerceStore Restrict results to lists that contain an active, connected, undeleted ecommerce store.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberLists}\n   */\n  this.getAllLists = function(opts) {\n    return this.getAllListsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get list info\n   * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.getListWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'include_total_contacts': ( opts['includeTotalContacts'] ? opts['includeTotalContacts'] : opts['include_total_contacts'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get list info\n   * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.getList = function(listId, opts) {\n    return this.getListWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List abuse reports\n   * Get all abuse reports for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaints} and HTTP response\n   */\n  this.getListAbuseReportsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/abuse-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List abuse reports\n   * Get all abuse reports for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaints}\n   */\n  this.getListAbuseReports = function(listId, opts) {\n    return this.getListAbuseReportsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get abuse report\n   * Get details about a specific abuse report.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaint} and HTTP response\n   */\n  this.getListAbuseReportDetailsWithHttpInfo = function(listId, reportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'reportId' is set\n    if (reportId === undefined || reportId === null) {\n      throw new Error(\"Missing the required parameter 'reportId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'report_id': reportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/abuse-reports/{report_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get abuse report\n   * Get details about a specific abuse report.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaint}\n   */\n  this.getListAbuseReportDetails = function(listId, reportId, opts) {\n    return this.getListAbuseReportDetailsWithHttpInfo(listId, reportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List recent activity\n   * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListActivity} and HTTP response\n   */\n  this.getListRecentActivityWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List recent activity\n   * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListActivity}\n   */\n  this.getListRecentActivity = function(listId, opts) {\n    return this.getListRecentActivityWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List top email clients\n   * Get a list of the top email clients based on user-agent strings.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailClients} and HTTP response\n   */\n  this.getListClientsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/clients', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List top email clients\n   * Get a list of the top email clients based on user-agent strings.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailClients}\n   */\n  this.getListClients = function(listId, opts) {\n    return this.getListClientsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List growth history data\n   * Get a month-by-month summary of a specific list's growth activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrowthHistory} and HTTP response\n   */\n  this.getListGrowthHistoryWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/growth-history', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List growth history data\n   * Get a month-by-month summary of a specific list's growth activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrowthHistory}\n   */\n  this.getListGrowthHistory = function(listId, opts) {\n    return this.getListGrowthHistoryWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get growth history by month\n   * Get a summary of a specific list's growth activity for a specific month and year.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} month A specific month of list growth history.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrowthHistory} and HTTP response\n   */\n  this.getListGrowthHistoryByMonthWithHttpInfo = function(listId, month, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'month' is set\n    if (month === undefined || month === null) {\n      throw new Error(\"Missing the required parameter 'month' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'month': month\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/growth-history/{month}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get growth history by month\n   * Get a summary of a specific list's growth activity for a specific month and year.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} month A specific month of list growth history.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrowthHistory}\n   */\n  this.getListGrowthHistoryByMonth = function(listId, month, opts) {\n    return this.getListGrowthHistoryByMonthWithHttpInfo(listId, month, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List interest categories\n   * Get information about a list's interest categories.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Restrict results a type of interest group\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestGroupings} and HTTP response\n   */\n  this.getListInterestCategoriesWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List interest categories\n   * Get information about a list's interest categories.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Restrict results a type of interest group\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestGroupings}\n   */\n  this.getListInterestCategories = function(listId, opts) {\n    return this.getListInterestCategoriesWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get interest category info\n   * Get information about a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.getInterestCategoryWithHttpInfo = function(listId, interestCategoryId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get interest category info\n   * Get information about a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.getInterestCategory = function(listId, interestCategoryId, opts) {\n    return this.getInterestCategoryWithHttpInfo(listId, interestCategoryId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List interests in category\n   * Get a list of this category's interests.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interests} and HTTP response\n   */\n  this.listInterestCategoryInterestsWithHttpInfo = function(listId, interestCategoryId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List interests in category\n   * Get a list of this category's interests.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interests}\n   */\n  this.listInterestCategoryInterests = function(listId, interestCategoryId, opts) {\n    return this.listInterestCategoryInterestsWithHttpInfo(listId, interestCategoryId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get interest in category\n   * Get interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.getInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get interest in category\n   * Get interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.getInterestCategoryInterest = function(listId, interestCategoryId, interestId, opts) {\n    return this.getInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List locations\n   * Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListLocations} and HTTP response\n   */\n  this.getListLocationsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/locations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List locations\n   * Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListLocations}\n   */\n  this.getListLocations = function(listId, opts) {\n    return this.getListLocationsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List members info\n   * Get information about members in a specific Mailchimp list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailType The email type.\n   * @param {module:model/String} opts.status The subscriber's status.\n   * @param {String} opts.sinceTimestampOpt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeTimestampOpt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceLastChanged Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeLastChanged Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.uniqueEmailId A unique identifier for the email address across all Mailchimp lists.\n   * @param {Boolean} opts.vipOnly A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.\n   * @param {String} opts.interestCategoryId The unique id for the interest category.\n   * @param {String} opts.interestIds Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.\n   * @param {module:model/String} opts.interestMatch Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \\\"any\\\" will match a member with any of the interest supplied, \\\"all\\\" will only match members with every interest supplied, and \\\"none\\\" will match members without any of the interest supplied.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.sinceLastCampaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.\n   * @param {String} opts.unsubscribedSince Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.getListMembersInfoWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'email_type': ( opts['emailType'] ? opts['emailType'] : opts['email_type']),\n      'status': ( opts['status'] ? opts['status'] : opts['status']),\n      'since_timestamp_opt': ( opts['sinceTimestampOpt'] ? opts['sinceTimestampOpt'] : opts['since_timestamp_opt']),\n      'before_timestamp_opt': ( opts['beforeTimestampOpt'] ? opts['beforeTimestampOpt'] : opts['before_timestamp_opt']),\n      'since_last_changed': ( opts['sinceLastChanged'] ? opts['sinceLastChanged'] : opts['since_last_changed']),\n      'before_last_changed': ( opts['beforeLastChanged'] ? opts['beforeLastChanged'] : opts['before_last_changed']),\n      'unique_email_id': ( opts['uniqueEmailId'] ? opts['uniqueEmailId'] : opts['unique_email_id']),\n      'vip_only': ( opts['vipOnly'] ? opts['vipOnly'] : opts['vip_only']),\n      'interest_category_id': ( opts['interestCategoryId'] ? opts['interestCategoryId'] : opts['interest_category_id']),\n      'interest_ids': ( opts['interestIds'] ? opts['interestIds'] : opts['interest_ids']),\n      'interest_match': ( opts['interestMatch'] ? opts['interestMatch'] : opts['interest_match']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'since_last_campaign': ( opts['sinceLastCampaign'] ? opts['sinceLastCampaign'] : opts['since_last_campaign']),\n      'unsubscribed_since': ( opts['unsubscribedSince'] ? opts['unsubscribedSince'] : opts['unsubscribed_since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List members info\n   * Get information about members in a specific Mailchimp list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailType The email type.\n   * @param {module:model/String} opts.status The subscriber's status.\n   * @param {String} opts.sinceTimestampOpt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeTimestampOpt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceLastChanged Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeLastChanged Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.uniqueEmailId A unique identifier for the email address across all Mailchimp lists.\n   * @param {Boolean} opts.vipOnly A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.\n   * @param {String} opts.interestCategoryId The unique id for the interest category.\n   * @param {String} opts.interestIds Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.\n   * @param {module:model/String} opts.interestMatch Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \\\"any\\\" will match a member with any of the interest supplied, \\\"all\\\" will only match members with every interest supplied, and \\\"none\\\" will match members without any of the interest supplied.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.sinceLastCampaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.\n   * @param {String} opts.unsubscribedSince Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.getListMembersInfo = function(listId, opts) {\n    return this.getListMembersInfoWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get member info\n   * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.getListMemberWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get member info\n   * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.getListMember = function(listId, subscriberHash, opts) {\n    return this.getListMemberWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View recent activity 50\n   * Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.action A comma seperated list of actions to return.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberActivityEvents} and HTTP response\n   */\n  this.getListMemberActivityWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'action': this.apiClient.buildCollectionParam(opts['action'] ? opts['action'] : opts['action'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View recent activity 50\n   * Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.action A comma seperated list of actions to return.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberActivityEvents}\n   */\n  this.getListMemberActivity = function(listId, subscriberHash, opts) {\n    return this.getListMemberActivityWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View recent activity\n   * Get a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.activityFilters A comma-separated list of activity filters that correspond to a set of activity types, e.g \\\"?activity_filters=open,bounce,click\\\".\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberActivityEvents1} and HTTP response\n   */\n  this.getListMemberActivityFeedWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'activity_filters': this.apiClient.buildCollectionParam(opts['activityFilters'] ? opts['activityFilters'] : opts['activity_filters'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/activity-feed', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View recent activity\n   * Get a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.activityFilters A comma-separated list of activity filters that correspond to a set of activity types, e.g \\\"?activity_filters=open,bounce,click\\\".\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberActivityEvents1}\n   */\n  this.getListMemberActivityFeed = function(listId, subscriberHash, opts) {\n    return this.getListMemberActivityFeedWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member events\n   * Get events for a contact.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfEvents} and HTTP response\n   */\n  this.getListMemberEventsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/events', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member events\n   * Get events for a contact.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfEvents}\n   */\n  this.getListMemberEvents = function(listId, subscriberHash, opts) {\n    return this.getListMemberEventsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member goal events\n   * Get the last 50 Goal events for a member on a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfMemberActivityEvents} and HTTP response\n   */\n  this.getListMemberGoalsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/goals', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member goal events\n   * Get the last 50 Goal events for a member on a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfMemberActivityEvents}\n   */\n  this.getListMemberGoals = function(listId, subscriberHash, opts) {\n    return this.getListMemberGoalsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List recent member notes\n   * Get recent notes for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortField Returns notes sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfNotes} and HTTP response\n   */\n  this.getListMemberNotesWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List recent member notes\n   * Get recent notes for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortField Returns notes sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfNotes}\n   */\n  this.getListMemberNotes = function(listId, subscriberHash, opts) {\n    return this.getListMemberNotesWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get member note\n   * Get a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.getListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get member note\n   * Get a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.getListMemberNote = function(listId, subscriberHash, noteId, opts) {\n    return this.getListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List merge fields\n   * Get a list of all merge fields for an audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The merge field type.\n   * @param {Boolean} opts.required Whether it's a required merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfMergeFields} and HTTP response\n   */\n  this.getListMergeFieldsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'required': ( opts['required'] ? opts['required'] : opts['required'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List merge fields\n   * Get a list of all merge fields for an audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The merge field type.\n   * @param {Boolean} opts.required Whether it's a required merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfMergeFields}\n   */\n  this.getListMergeFields = function(listId, opts) {\n    return this.getListMergeFieldsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get merge field\n   * Get information about a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.getListMergeFieldWithHttpInfo = function(listId, mergeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get merge field\n   * Get information about a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.getListMergeField = function(listId, mergeId, opts) {\n    return this.getListMergeFieldWithHttpInfo(listId, mergeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get segment info\n   * Get information about a specific segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.getSegmentWithHttpInfo = function(listId, segmentId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get segment info\n   * Get information about a specific segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.getSegment = function(listId, segmentId, opts) {\n    return this.getSegmentWithHttpInfo(listId, segmentId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List members in segment\n   * Get information about members in a saved segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SegmentMembers} and HTTP response\n   */\n  this.getSegmentMembersListWithHttpInfo = function(listId, segmentId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List members in segment\n   * Get information about members in a saved segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SegmentMembers}\n   */\n  this.getSegmentMembersList = function(listId, segmentId, opts) {\n    return this.getSegmentMembersListWithHttpInfo(listId, segmentId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List signup forms\n   * Get signup forms for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSignupForms} and HTTP response\n   */\n  this.getListSignupFormsWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/signup-forms', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List signup forms\n   * Get signup forms for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSignupForms}\n   */\n  this.getListSignupForms = function(listId) {\n    return this.getListSignupFormsWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get information about all surveys for a list\n   * Get information about all available surveys for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.getAllSurveysForListWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get information about all surveys for a list\n   * Get information about all available surveys for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.getAllSurveysForList = function(listId) {\n    return this.getAllSurveysForListWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey\n   * Get details about a specific survey.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.getSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey\n   * Get details about a specific survey.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.getSurvey = function(listId, surveyId) {\n    return this.getSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List webhooks\n   * Get information about all webhooks for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.getListWebhooksWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List webhooks\n   * Get information about all webhooks for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.getListWebhooks = function(listId) {\n    return this.getListWebhooksWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get webhook info\n   * Get information about a specific webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.getListWebhookWithHttpInfo = function(listId, webhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get webhook info\n   * Get information about a specific webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.getListWebhook = function(listId, webhookId) {\n    return this.getListWebhookWithHttpInfo(listId, webhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update lists\n   * Update the settings for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SubscriberList2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.updateListWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update lists\n   * Update the settings for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SubscriberList2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.updateList = function(listId, body) {\n    return this.updateListWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update interest category\n   * Update a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/InterestCategory2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.updateInterestCategoryWithHttpInfo = function(listId, interestCategoryId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update interest category\n   * Update a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/InterestCategory2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.updateInterestCategory = function(listId, interestCategoryId, body) {\n    return this.updateInterestCategoryWithHttpInfo(listId, interestCategoryId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update interest in category\n   * Update interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {module:model/Interest2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.updateInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update interest in category\n   * Update interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {module:model/Interest2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.updateInterestCategoryInterest = function(listId, interestCategoryId, interestId, body) {\n    return this.updateInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update list member\n   * Update information for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers3} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.updateListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update list member\n   * Update information for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers3} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.updateListMember = function(listId, subscriberHash, body, opts) {\n    return this.updateListMemberWithHttpInfo(listId, subscriberHash, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update note\n   * Update a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {module:model/MemberNotes2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.updateListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update note\n   * Update a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {module:model/MemberNotes2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.updateListMemberNote = function(listId, subscriberHash, noteId, body) {\n    return this.updateListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update merge field\n   * Update a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {module:model/MergeField2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.updateListMergeFieldWithHttpInfo = function(listId, mergeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update merge field\n   * Update a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {module:model/MergeField2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.updateListMergeField = function(listId, mergeId, body) {\n    return this.updateListMergeFieldWithHttpInfo(listId, mergeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update segment\n   * Update a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/List9} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.updateSegmentWithHttpInfo = function(listId, segmentId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update segment\n   * Update a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/List9} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.updateSegment = function(listId, segmentId, body) {\n    return this.updateSegmentWithHttpInfo(listId, segmentId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update webhook\n   * Update the settings for an existing webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @param {module:model/AddWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.updateListWebhookWithHttpInfo = function(listId, webhookId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update webhook\n   * Update the settings for an existing webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @param {module:model/AddWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.updateListWebhook = function(listId, webhookId, body) {\n    return this.updateListWebhookWithHttpInfo(listId, webhookId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add event\n   * Add an event for a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/Events} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.createListMemberEventWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/events', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add event\n   * Add an event for a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/Events} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.createListMemberEvent = function(listId, subscriberHash, body) {\n    return this.createListMemberEventWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or remove member tags\n   * Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberTags} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.updateListMemberTagsWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/tags', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or remove member tags\n   * Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberTags} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.updateListMemberTags = function(listId, subscriberHash, body) {\n    return this.updateListMemberTagsWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add list\n   * Create a new list in your Mailchimp account.\n   * @param {module:model/SubscriberList1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.createListWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add list\n   * Create a new list in your Mailchimp account.\n   * @param {module:model/SubscriberList1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.createList = function(body) {\n    return this.createListWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Batch subscribe or unsubscribe\n   * Batch subscribe or unsubscribe list members.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MembersToSubscribeUnsubscribeTofromAListInBatch} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @param {Boolean} opts.skipDuplicateCheck If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchUpdateListMembers} and HTTP response\n   */\n  this.batchListMembersWithHttpInfo = function(listId, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation']),\n      'skip_duplicate_check': ( opts['skipDuplicateCheck'] ? opts['skipDuplicateCheck'] : opts['skip_duplicate_check'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Batch subscribe or unsubscribe\n   * Batch subscribe or unsubscribe list members.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MembersToSubscribeUnsubscribeTofromAListInBatch} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @param {Boolean} opts.skipDuplicateCheck If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchUpdateListMembers}\n   */\n  this.batchListMembers = function(listId, body, opts) {\n    return this.batchListMembersWithHttpInfo(listId, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add interest category\n   * Create a new interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/InterestCategory1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.createListInterestCategoryWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add interest category\n   * Create a new interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/InterestCategory1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.createListInterestCategory = function(listId, body) {\n    return this.createListInterestCategoryWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add interest in category\n   * Create a new interest or 'group name' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/Interest1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.createInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add interest in category\n   * Create a new interest or 'group name' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/Interest1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.createInterestCategoryInterest = function(listId, interestCategoryId, body) {\n    return this.createInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member to list\n   * Add a new member to the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddListMembers1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.addListMemberWithHttpInfo = function(listId, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member to list\n   * Add a new member to the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddListMembers1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.addListMember = function(listId, body, opts) {\n    return this.addListMemberWithHttpInfo(listId, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete list member\n   * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberPermanentWithHttpInfo = function(listId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete list member\n   * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMemberPermanent = function(listId, subscriberHash) {\n    return this.deleteListMemberPermanentWithHttpInfo(listId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member note\n   * Add a new note for a specific subscriber.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberNotes1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.createListMemberNoteWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member note\n   * Add a new note for a specific subscriber.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberNotes1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.createListMemberNote = function(listId, subscriberHash, body) {\n    return this.createListMemberNoteWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add merge field\n   * Add a new merge field for a specific audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MergeField1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.addListMergeFieldWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add merge field\n   * Add a new merge field for a specific audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MergeField1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.addListMergeField = function(listId, body) {\n    return this.addListMergeFieldWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add segment\n   * Create a new segment in a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/List8} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.createSegmentWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add segment\n   * Create a new segment in a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/List8} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.createSegment = function(listId, body) {\n    return this.createSegmentWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Batch add or remove members\n   * Batch add/remove list members to static segment\n   * @param {module:model/MembersToAddremoveTofromAStaticSegment} body \n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchAddremoveListMembersTofromStaticSegment} and HTTP response\n   */\n  this.batchSegmentMembersWithHttpInfo = function(body, listId, segmentId) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Batch add or remove members\n   * Batch add/remove list members to static segment\n   * @param {module:model/MembersToAddremoveTofromAStaticSegment} body \n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchAddremoveListMembersTofromStaticSegment}\n   */\n  this.batchSegmentMembers = function(body, listId, segmentId) {\n    return this.batchSegmentMembersWithHttpInfo(body, listId, segmentId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member to segment\n   * Add a member to a static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/Body3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers1} and HTTP response\n   */\n  this.createSegmentMemberWithHttpInfo = function(listId, segmentId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member to segment\n   * Add a member to a static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/Body3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers1}\n   */\n  this.createSegmentMember = function(listId, segmentId, body) {\n    return this.createSegmentMemberWithHttpInfo(listId, segmentId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Customize signup form\n   * Customize a list's default signup form.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SignupForm1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignupForm} and HTTP response\n   */\n  this.updateListSignupFormWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/signup-forms', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Customize signup form\n   * Customize a list's default signup form.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SignupForm1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignupForm}\n   */\n  this.updateListSignupForm = function(listId, body) {\n    return this.updateListSignupFormWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add webhook\n   * Create a new webhook for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddWebhook} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.createListWebhookWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add webhook\n   * Create a new webhook for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddWebhook} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.createListWebhook = function(listId, body) {\n    return this.createListWebhookWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List segments\n   * Get information about all available segments for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Limit results based on segment type.\n   * @param {String} opts.sinceCreatedAt Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCreatedAt Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @param {String} opts.sinceUpdatedAt Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeUpdatedAt Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfSegments} and HTTP response\n   */\n  this.listSegmentsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed']),\n      'since_updated_at': ( opts['sinceUpdatedAt'] ? opts['sinceUpdatedAt'] : opts['since_updated_at']),\n      'before_updated_at': ( opts['beforeUpdatedAt'] ? opts['beforeUpdatedAt'] : opts['before_updated_at'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List segments\n   * Get information about all available segments for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Limit results based on segment type.\n   * @param {String} opts.sinceCreatedAt Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCreatedAt Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @param {String} opts.sinceUpdatedAt Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeUpdatedAt Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfSegments}\n   */\n  this.listSegments = function(listId, opts) {\n    return this.listSegmentsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update list member\n   * Add or update a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers2} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.setListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update list member\n   * Add or update a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers2} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.setListMember = function(listId, subscriberHash, body, opts) {\n    return this.setListMemberWithHttpInfo(listId, subscriberHash, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Search for tags on a list by name.\n   * Search for tags on a list by name. If no name is provided, will return all tags on the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {String} opts.name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagSearchResults} and HTTP response\n   */\n  this.tagSearchWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'name': ( opts['name'] ? opts['name'] : opts['name'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/tag-search', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search for tags on a list by name.\n   * Search for tags on a list by name. If no name is provided, will return all tags on the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {String} opts.name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagSearchResults}\n   */\n  this.tagSearch = function(listId, opts) {\n    return this.tagSearchWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Ping service.\n * @module api/PingApi\n */\n\n/**\n * Constructs a new PingApi. \n * @alias module:api/PingApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Ping\n   * A health check for the API that won't return any account-specific information.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIHealthStatus} and HTTP response\n   */\n  this.getWithHttpInfo = function() {\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ping', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Ping\n   * A health check for the API that won't return any account-specific information.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIHealthStatus}\n   */\n  this.get = function() {\n    return this.getWithHttpInfo()\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Reporting service.\n * @module api/ReportingApi\n */\n\n/**\n * Constructs a new ReportingApi. \n * @alias module:api/ReportingApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List facebook ads reports\n   * Get reports of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response\n   */\n  this.getFacebookAdsReportAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ads reports\n   * Get reports of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}\n   */\n  this.getFacebookAdsReportAll = function(opts) {\n    return this.getFacebookAdsReportAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get facebook ad report\n   * Get report of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response\n   */\n  this.getFacebookAdReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get facebook ad report\n   * Get report of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}\n   */\n  this.getFacebookAdReport = function(outreachId, opts) {\n    return this.getFacebookAdReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List facebook ecommerce report\n   * Get breakdown of product activity for an outreach.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response\n   */\n  this.getFacebookAdProductActivityReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ecommerce report\n   * Get breakdown of product activity for an outreach.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}\n   */\n  this.getFacebookAdProductActivityReport = function(outreachId, opts) {\n    return this.getFacebookAdProductActivityReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List landing pages reports\n   * Get reports of landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response\n   */\n  this.getLandingPageReportsAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/landing-pages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List landing pages reports\n   * Get reports of landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}\n   */\n  this.getLandingPageReportsAll = function(opts) {\n    return this.getLandingPageReportsAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page report\n   * Get report of a landing page.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPageReport} and HTTP response\n   */\n  this.getLandingPageReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/landing-pages/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page report\n   * Get report of a landing page.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPageReport}\n   */\n  this.getLandingPageReport = function(outreachId, opts) {\n    return this.getLandingPageReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey reports\n   * Get reports for surveys.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response\n   */\n  this.getSurveyReportsAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey reports\n   * Get reports for surveys.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}\n   */\n  this.getSurveyReportsAll = function(opts) {\n    return this.getSurveyReportsAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey report\n   * Get report for a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyReport} and HTTP response\n   */\n  this.getSurveyReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey report\n   * Get report for a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyReport}\n   */\n  this.getSurveyReport = function(outreachId, opts) {\n    return this.getSurveyReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey question reports\n   * Get reports for survey questions.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response\n   */\n  this.getSurveyQuestionReportsAllWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey question reports\n   * Get reports for survey questions.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}\n   */\n  this.getSurveyQuestionReportsAll = function(outreachId, opts) {\n    return this.getSurveyQuestionReportsAllWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey question report\n   * Get report for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyQuestionReport} and HTTP response\n   */\n  this.getSurveyQuestionReportWithHttpInfo = function(outreachId, questionId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'questionId' is set\n    if (questionId === undefined || questionId === null) {\n      throw new Error(\"Missing the required parameter 'questionId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'question_id': questionId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions/{question_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey question report\n   * Get report for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyQuestionReport}\n   */\n  this.getSurveyQuestionReport = function(outreachId, questionId, opts) {\n    return this.getSurveyQuestionReportWithHttpInfo(outreachId, questionId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List answers for question\n   * Get answers for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response\n   */\n  this.getSurveyQuestionAnswersWithHttpInfo = function(outreachId, questionId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'questionId' is set\n    if (questionId === undefined || questionId === null) {\n      throw new Error(\"Missing the required parameter 'questionId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'question_id': questionId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'respondent_familiarity_is': ( opts['respondentFamiliarityIs'] ? opts['respondentFamiliarityIs'] : opts['respondent_familiarity_is'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions/{question_id}/answers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List answers for question\n   * Get answers for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20015}\n   */\n  this.getSurveyQuestionAnswers = function(outreachId, questionId, opts) {\n    return this.getSurveyQuestionAnswersWithHttpInfo(outreachId, questionId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey responses\n   * Get responses to a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.answeredQuestion The ID of the question that was answered.\n   * @param {String} opts.choseAnswer The ID of the option chosen to filter responses on.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response\n   */\n  this.getSurveyResponsesAllWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'answered_question': ( opts['answeredQuestion'] ? opts['answeredQuestion'] : opts['answered_question']),\n      'chose_answer': ( opts['choseAnswer'] ? opts['choseAnswer'] : opts['chose_answer']),\n      'respondent_familiarity_is': ( opts['respondentFamiliarityIs'] ? opts['respondentFamiliarityIs'] : opts['respondent_familiarity_is'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/responses', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey responses\n   * Get responses to a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.answeredQuestion The ID of the question that was answered.\n   * @param {String} opts.choseAnswer The ID of the option chosen to filter responses on.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}\n   */\n  this.getSurveyResponsesAll = function(outreachId, opts) {\n    return this.getSurveyResponsesAllWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey response\n   * Get a single survey response.\n   * @param {String} outreachId The outreach id.\n   * @param {String} responseId The ID of the survey response.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyResponse} and HTTP response\n   */\n  this.getSurveyResponseWithHttpInfo = function(outreachId, responseId) {\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'responseId' is set\n    if (responseId === undefined || responseId === null) {\n      throw new Error(\"Missing the required parameter 'responseId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'response_id': responseId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/responses/{response_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey response\n   * Get a single survey response.\n   * @param {String} outreachId The outreach id.\n   * @param {String} responseId The ID of the survey response.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyResponse}\n   */\n  this.getSurveyResponse = function(outreachId, responseId) {\n    return this.getSurveyResponseWithHttpInfo(outreachId, responseId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Reports service.\n * @module api/ReportsApi\n */\n\n/**\n * Constructs a new ReportsApi. \n * @alias module:api/ReportsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List campaign reports\n   * Get campaign reports.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReports1} and HTTP response\n   */\n  this.getAllCampaignReportsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'before_send_time': ( opts['beforeSendTime'] ? opts['beforeSendTime'] : opts['before_send_time']),\n      'since_send_time': ( opts['sinceSendTime'] ? opts['sinceSendTime'] : opts['since_send_time'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign reports\n   * Get campaign reports.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReports1}\n   */\n  this.getAllCampaignReports = function(opts) {\n    return this.getAllCampaignReportsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign report\n   * Get report details for a specific sent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReport} and HTTP response\n   */\n  this.getCampaignReportWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign report\n   * Get report details for a specific sent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReport}\n   */\n  this.getCampaignReport = function(campaignId, opts) {\n    return this.getCampaignReportWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List abuse reports\n   * Get a list of abuse complaints for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaints1} and HTTP response\n   */\n  this.getCampaignAbuseReportsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/abuse-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List abuse reports\n   * Get a list of abuse complaints for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaints1}\n   */\n  this.getCampaignAbuseReports = function(campaignId, opts) {\n    return this.getCampaignAbuseReportsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get abuse report\n   * Get information about a specific abuse report for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaint1} and HTTP response\n   */\n  this.getCampaignAbuseReportWithHttpInfo = function(campaignId, reportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'reportId' is set\n    if (reportId === undefined || reportId === null) {\n      throw new Error(\"Missing the required parameter 'reportId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'report_id': reportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/abuse-reports/{report_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get abuse report\n   * Get information about a specific abuse report for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaint1}\n   */\n  this.getCampaignAbuseReport = function(campaignId, reportId, opts) {\n    return this.getCampaignAbuseReportWithHttpInfo(campaignId, reportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign feedback\n   * Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignAdviceReport} and HTTP response\n   */\n  this.getCampaignAdviceWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/advice', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign feedback\n   * Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignAdviceReport}\n   */\n  this.getCampaignAdvice = function(campaignId, opts) {\n    return this.getCampaignAdviceWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign details\n   * Get information about clicks on specific links in your Mailchimp campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailReport} and HTTP response\n   */\n  this.getCampaignClickDetailsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign details\n   * Get information about clicks on specific links in your Mailchimp campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailReport}\n   */\n  this.getCampaignClickDetails = function(campaignId, opts) {\n    return this.getCampaignClickDetailsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign link details\n   * Get click details for a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailReport} and HTTP response\n   */\n  this.getCampaignClickDetailsForLinkWithHttpInfo = function(campaignId, linkId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign link details\n   * Get click details for a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailReport}\n   */\n  this.getCampaignClickDetailsForLink = function(campaignId, linkId, opts) {\n    return this.getCampaignClickDetailsForLinkWithHttpInfo(campaignId, linkId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List clicked link subscribers\n   * Get information about list members who clicked on a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailMembers} and HTTP response\n   */\n  this.getSubscribersInfoWithHttpInfo = function(campaignId, linkId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List clicked link subscribers\n   * Get information about list members who clicked on a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailMembers}\n   */\n  this.getSubscribersInfo = function(campaignId, linkId, opts) {\n    return this.getSubscribersInfoWithHttpInfo(campaignId, linkId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get clicked link subscriber\n   * Get information about a specific subscriber who clicked a link in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailMember} and HTTP response\n   */\n  this.getSubscriberInfoWithHttpInfo = function(campaignId, linkId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get clicked link subscriber\n   * Get information about a specific subscriber who clicked a link in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailMember}\n   */\n  this.getSubscriberInfo = function(campaignId, linkId, subscriberHash, opts) {\n    return this.getSubscriberInfoWithHttpInfo(campaignId, linkId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List domain performance stats\n   * Get statistics for the top-performing email domains in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DomainPerformance} and HTTP response\n   */\n  this.getDomainPerformanceForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/domain-performance', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List domain performance stats\n   * Get statistics for the top-performing email domains in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DomainPerformance}\n   */\n  this.getDomainPerformanceForCampaign = function(campaignId, opts) {\n    return this.getDomainPerformanceForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign product activity\n   * Get breakdown of product activity for a campaign\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response\n   */\n  this.getEcommerceProductActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/ecommerce-product-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign product activity\n   * Get breakdown of product activity for a campaign\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}\n   */\n  this.getEcommerceProductActivityForCampaign = function(campaignId, opts) {\n    return this.getEcommerceProductActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List EepURL activity\n   * Get a summary of social activity for the campaign, tracked by EepURL.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EepurlActivity} and HTTP response\n   */\n  this.getEepurlActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/eepurl', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List EepURL activity\n   * Get a summary of social activity for the campaign, tracked by EepURL.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EepurlActivity}\n   */\n  this.getEepurlActivityForCampaign = function(campaignId, opts) {\n    return this.getEepurlActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List email activity\n   * Get a list of member's subscriber activity in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailActivity} and HTTP response\n   */\n  this.getEmailActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/email-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List email activity\n   * Get a list of member's subscriber activity in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailActivity}\n   */\n  this.getEmailActivityForCampaign = function(campaignId, opts) {\n    return this.getEmailActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get subscriber email activity\n   * Get a specific list member's activity in a campaign including opens, clicks, and bounces.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailActivity} and HTTP response\n   */\n  this.getEmailActivityForSubscriberWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/email-activity/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get subscriber email activity\n   * Get a specific list member's activity in a campaign including opens, clicks, and bounces.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailActivity}\n   */\n  this.getEmailActivityForSubscriber = function(campaignId, subscriberHash, opts) {\n    return this.getEmailActivityForSubscriberWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List top open activities\n   * Get top open locations for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenLocations} and HTTP response\n   */\n  this.getLocationsForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/locations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List top open activities\n   * Get top open locations for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenLocations}\n   */\n  this.getLocationsForCampaign = function(campaignId, opts) {\n    return this.getLocationsForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign open details\n   * Get detailed information about any campaign emails that were opened by a list member.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenDetailReport} and HTTP response\n   */\n  this.getCampaignOpenDetailsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/open-details', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign open details\n   * Get detailed information about any campaign emails that were opened by a list member.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenDetailReport}\n   */\n  this.getCampaignOpenDetails = function(campaignId, opts) {\n    return this.getCampaignOpenDetailsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get opened campaign subscriber\n   * Get information about a specific subscriber who opened a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenActivity} and HTTP response\n   */\n  this.getSubscriberInfoForOpenedCampaignWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/open-details/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get opened campaign subscriber\n   * Get information about a specific subscriber who opened a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenActivity}\n   */\n  this.getSubscriberInfoForOpenedCampaign = function(campaignId, subscriberHash, opts) {\n    return this.getSubscriberInfoForOpenedCampaignWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign recipients\n   * Get information about campaign recipients.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SentTo} and HTTP response\n   */\n  this.getCampaignRecipientsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sent-to', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign recipients\n   * Get information about campaign recipients.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SentTo}\n   */\n  this.getCampaignRecipients = function(campaignId, opts) {\n    return this.getCampaignRecipientsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign recipient info\n   * Get information about a specific campaign recipient.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SentTo} and HTTP response\n   */\n  this.getCampaignRecipientWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sent-to/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign recipient info\n   * Get information about a specific campaign recipient.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SentTo}\n   */\n  this.getCampaignRecipient = function(campaignId, subscriberHash, opts) {\n    return this.getCampaignRecipientWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List child campaign reports\n   * Get a list of reports with child campaigns for a specific parent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignSubReports} and HTTP response\n   */\n  this.getSubReportsForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sub-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List child campaign reports\n   * Get a list of reports with child campaigns for a specific parent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignSubReports}\n   */\n  this.getSubReportsForCampaign = function(campaignId, opts) {\n    return this.getSubReportsForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List unsubscribed members\n   * Get information about members who have unsubscribed from a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unsubscribes} and HTTP response\n   */\n  this.getUnsubscribedListForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/unsubscribed', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List unsubscribed members\n   * Get information about members who have unsubscribed from a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unsubscribes}\n   */\n  this.getUnsubscribedListForCampaign = function(campaignId, opts) {\n    return this.getUnsubscribedListForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get unsubscribed member\n   * Get information about a specific list member who unsubscribed from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unsubscribes} and HTTP response\n   */\n  this.getUnsubscribedListMemberWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/unsubscribed/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get unsubscribed member\n   * Get information about a specific list member who unsubscribed from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unsubscribes}\n   */\n  this.getUnsubscribedListMember = function(campaignId, subscriberHash, opts) {\n    return this.getUnsubscribedListMemberWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Root service.\n * @module api/RootApi\n */\n\n/**\n * Constructs a new RootApi. \n * @alias module:api/RootApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List api root resources\n   * Get links to all other resources available in the API.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIRoot} and HTTP response\n   */\n  this.getRootWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List api root resources\n   * Get links to all other resources available in the API.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIRoot}\n   */\n  this.getRoot = function(opts) {\n    return this.getRootWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * SearchCampaigns service.\n * @module api/SearchCampaignsApi\n */\n\n/**\n * Constructs a new SearchCampaignsApi. \n * @alias module:api/SearchCampaignsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Search campaigns\n   * Search all campaigns for the specified query terms.\n   * @param {String} query The search query used to filter results.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaigns} and HTTP response\n   */\n  this.searchWithHttpInfo = function(query, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'query' is set\n    if (query === undefined || query === null) {\n      throw new Error(\"Missing the required parameter 'query' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'query': query\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/search-campaigns', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search campaigns\n   * Search all campaigns for the specified query terms.\n   * @param {String} query The search query used to filter results.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaigns}\n   */\n  this.search = function(query, opts) {\n    return this.searchWithHttpInfo(query, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * SearchMembers service.\n * @module api/SearchMembersApi\n */\n\n/**\n * Constructs a new SearchMembersApi. \n * @alias module:api/SearchMembersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Search members\n   * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.\n   * @param {String} query The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.listId The unique id for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Members} and HTTP response\n   */\n  this.searchWithHttpInfo = function(query, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'query' is set\n    if (query === undefined || query === null) {\n      throw new Error(\"Missing the required parameter 'query' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'query': query,\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/search-members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search members\n   * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.\n   * @param {String} query The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.listId The unique id for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Members}\n   */\n  this.search = function(query, opts) {\n    return this.searchWithHttpInfo(query, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Surveys service.\n * @module api/SurveysApi\n */\n\n/**\n * Constructs a new SurveysApi. \n * @alias module:api/SurveysApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Publish a Survey\n   * Publish a survey that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.publishSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}/actions/publish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Publish a Survey\n   * Publish a survey that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.publishSurvey = function(listId, surveyId) {\n    return this.publishSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unpublish a Survey\n   * Unpublish a survey that has been published.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unpublishSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}/actions/unpublish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unpublish a Survey\n   * Unpublish a survey that has been published.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unpublishSurvey = function(listId, surveyId) {\n    return this.unpublishSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * TemplateFolders service.\n * @module api/TemplateFoldersApi\n */\n\n/**\n * Constructs a new TemplateFoldersApi. \n * @alias module:api/TemplateFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(folderId) {\n    return this.removeWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolders} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolders}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.getWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.get = function(folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.updateWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.update = function(folderId, body) {\n    return this.updateWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Templates service.\n * @module api/TemplatesApi\n */\n\n/**\n * Constructs a new TemplatesApi. \n * @alias module:api/TemplatesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteTemplateWithHttpInfo = function(templateId) {\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteTemplate = function(templateId) {\n    return this.deleteTemplateWithHttpInfo(templateId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Templates} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'since_date_created': ( opts['sinceDateCreated'] ? opts['sinceDateCreated'] : opts['since_date_created']),\n      'before_date_created': ( opts['beforeDateCreated'] ? opts['beforeDateCreated'] : opts['before_date_created']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'category': ( opts['category'] ? opts['category'] : opts['category']),\n      'folder_id': ( opts['folderId'] ? opts['folderId'] : opts['folder_id']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Templates}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.getTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.getTemplate = function(templateId, opts) {\n    return this.getTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateDefaultContent} and HTTP response\n   */\n  this.getDefaultContentForTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}/default-content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateDefaultContent}\n   */\n  this.getDefaultContentForTemplate = function(templateId, opts) {\n    return this.getDefaultContentForTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.updateTemplateWithHttpInfo = function(templateId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.updateTemplate = function(templateId, body) {\n    return this.updateTemplateWithHttpInfo(templateId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * VerifiedDomains service.\n * @module api/VerifiedDomainsApi\n */\n\n/**\n * Constructs a new VerifiedDomainsApi. \n * @alias module:api/VerifiedDomainsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Add domain to account\n   * Add a domain to the account.\n   * @param {module:model/VerifiedDomains2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.createVerifiedDomainWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add domain to account\n   * Add a domain to the account.\n   * @param {module:model/VerifiedDomains2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.createVerifiedDomain = function(body) {\n    return this.createVerifiedDomainWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete domain\n   * Delete a verified domain from the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteDomainWithHttpInfo = function(domainName) {\n    var postBody = null;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete domain\n   * Delete a verified domain from the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteDomain = function(domainName) {\n    return this.deleteDomainWithHttpInfo(domainName)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get domain info\n   * Get the details for a single domain on the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.getDomainWithHttpInfo = function(domainName) {\n    var postBody = null;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get domain info\n   * Get the details for a single domain on the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.getDomain = function(domainName) {\n    return this.getDomainWithHttpInfo(domainName)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List sending domains\n   * Get all of the sending domains on the account.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains1} and HTTP response\n   */\n  this.getVerifiedDomainsAllWithHttpInfo = function() {\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List sending domains\n   * Get all of the sending domains on the account.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains1}\n   */\n  this.getVerifiedDomainsAll = function() {\n    return this.getVerifiedDomainsAllWithHttpInfo()\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Verify domain\n   * Verify a domain for sending.\n   * @param {String} domainName The domain name.\n   * @param {module:model/VerifyADomainForSending_} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.submitDomainVerificationWithHttpInfo = function(domainName, body) {\n    var postBody = body;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}/actions/verify', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Verify domain\n   * Verify a domain for sending.\n   * @param {String} domainName The domain name.\n   * @param {module:model/VerifyADomainForSending_} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.submitDomainVerification = function(domainName, body) {\n    return this.submitDomainVerificationWithHttpInfo(domainName, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n", "/**\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.7\n *\n * Do not edit the class manually.\n *\n */\n\nvar superagent = require('superagent');\nvar querystring = require('querystring');\n\nvar AccountExport = require('./api/AccountExportApi');\nvar AccountExports = require('./api/AccountExportsApi');\nvar ActivityFeed = require('./api/ActivityFeedApi');\nvar AuthorizedApps = require('./api/AuthorizedAppsApi');\nvar Automations = require('./api/AutomationsApi');\nvar BatchWebhooks = require('./api/BatchWebhooksApi');\nvar Batches = require('./api/BatchesApi');\nvar CampaignFolders = require('./api/CampaignFoldersApi');\nvar Campaigns = require('./api/CampaignsApi');\nvar ConnectedSites = require('./api/ConnectedSitesApi');\nvar Conversations = require('./api/ConversationsApi');\nvar CustomerJourneys = require('./api/CustomerJourneysApi');\nvar Ecommerce = require('./api/EcommerceApi');\nvar FacebookAds = require('./api/FacebookAdsApi');\nvar FileManager = require('./api/FileManagerApi');\nvar LandingPages = require('./api/LandingPagesApi');\nvar Lists = require('./api/ListsApi');\nvar Ping = require('./api/PingApi');\nvar Reporting = require('./api/ReportingApi');\nvar Reports = require('./api/ReportsApi');\nvar Root = require('./api/RootApi');\nvar SearchCampaigns = require('./api/SearchCampaignsApi');\nvar SearchMembers = require('./api/SearchMembersApi');\nvar Surveys = require('./api/SurveysApi');\nvar TemplateFolders = require('./api/TemplateFoldersApi');\nvar Templates = require('./api/TemplatesApi');\nvar VerifiedDomains = require('./api/VerifiedDomainsApi');\n\n/**\n * @module ApiClient\n * @version 3.0.80\n */\n\n/**\n * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n * application to use this class directly - the *Api and model classes provide the public API for the service. The\n * contents of this file should be regarded as internal but are documented for completeness.\n * @alias module:ApiClient\n * @class\n */\nvar exports = function() {\n\n  /**\n   * The base URL against which to resolve every API call's (relative) path.\n   * @type {String}\n   * @default https://server.api.mailchimp.com/3.0\n   */\n  this.basePath = 'https://server.api.mailchimp.com/3.0'.replace(/\\/+$/, '');\n\n  /**\n   * The API configuration settings object\n   * @type {Object}\n   * @default {}\n   */\n  this.config = {\n    apiKey: '',\n    accessToken: '',\n    server: 'invalid-server'\n  };\n\n  /**\n   * The default HTTP headers to be included for all API calls.\n   * @type {Array.<String>}\n   * @default {}\n   */\n  this.defaultHeaders = {};\n  /**\n   * The default HTTP timeout for all API calls.\n   * @type {Number}\n   * @default 60000\n   */\n  this.timeout = 120000;\n\n  /**\n   * If set to false an additional timestamp parameter is added to all API GET calls to\n   * prevent browser caching\n   * @type {Boolean}\n   * @default true\n   */\n  this.cache = true;\n\n  /**\n   * If set to true, the client will save the cookies from each server\n   * response, and return them in the next request.\n   * @default false\n   */\n  this.enableCookies = false;\n\n  /*\n   * Used to save and return cookies in a node.js (non-browser) setting,\n   * if this.enableCookies is set to true.\n   */\n  if (typeof window === 'undefined') {\n    this.agent = new superagent.agent();\n  }\n\n  // API Routes\n  this.accountExport = new AccountExport(this);\n  this.accountExports = new AccountExports(this);\n  this.activityFeed = new ActivityFeed(this);\n  this.authorizedApps = new AuthorizedApps(this);\n  this.automations = new Automations(this);\n  this.batchWebhooks = new BatchWebhooks(this);\n  this.batches = new Batches(this);\n  this.campaignFolders = new CampaignFolders(this);\n  this.campaigns = new Campaigns(this);\n  this.connectedSites = new ConnectedSites(this);\n  this.conversations = new Conversations(this);\n  this.customerJourneys = new CustomerJourneys(this);\n  this.ecommerce = new Ecommerce(this);\n  this.facebookAds = new FacebookAds(this);\n  this.fileManager = new FileManager(this);\n  this.landingPages = new LandingPages(this);\n  this.lists = new Lists(this);\n  this.ping = new Ping(this);\n  this.reporting = new Reporting(this);\n  this.reports = new Reports(this);\n  this.root = new Root(this);\n  this.searchCampaigns = new SearchCampaigns(this);\n  this.searchMembers = new SearchMembers(this);\n  this.Surveys = new Surveys(this);\n  this.templateFolders = new TemplateFolders(this);\n  this.templates = new Templates(this);\n  this.verifiedDomains = new VerifiedDomains(this);\n};\n\n/**\n * Sets the API configuration settings object.\n * @param config {Object} The configuration object\n */\nexports.prototype.setConfig = function(config = {}) {\n  var _this = this;\n  this.config = config;\n};\n\n/**\n * Returns a string representation for an actual parameter.\n * @param param The actual parameter.\n * @returns {String} The string representation of <code>param</code>.\n */\nexports.prototype.paramToString = function(param) {\n  if (param == undefined || param == null) {\n    return '';\n  }\n  if (param instanceof Date) {\n    return param.toJSON();\n  }\n  return param.toString();\n};\n\n/**\n * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n * NOTE: query parameters are not handled here.\n * @param {String} path The path to append to the base URL.\n * @param {Object} pathParams The parameter values to append.\n * @returns {String} The encoded path with parameter values substituted.\n */\nexports.prototype.buildUrl = function(path, pathParams) {\n  if (!path.match(/^\\//)) {\n    path = '/' + path;\n  }\n  var url = this.basePath + path;\n  var _this = this;\n  url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n    var value;\n    if (pathParams.hasOwnProperty(key)) {\n      value = _this.paramToString(pathParams[key]);\n    } else {\n      value = fullMatch;\n    }\n    return encodeURIComponent(value);\n  });\n\n  // Define the server\n  if (typeof this.config.server !== 'undefined') {\n    url = url.replace('server', this.config.server);\n  }\n\n  return url;\n};\n\n/**\n * Checks whether the given content type represents JSON.<br>\n * JSON content type examples:<br>\n * <ul>\n * <li>application/json</li>\n * <li>application/json; charset=UTF8</li>\n * <li>APPLICATION/JSON</li>\n * </ul>\n * @param {String} contentType The MIME content type to check.\n * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n */\nexports.prototype.isJsonMime = function(contentType) {\n  return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n};\n\n/**\n * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n * @param {Array.<String>} contentTypes\n * @returns {String} The chosen content type, preferring JSON.\n */\nexports.prototype.jsonPreferredMime = function(contentTypes) {\n  for (var i = 0; i < contentTypes.length; i++) {\n    if (this.isJsonMime(contentTypes[i])) {\n      return contentTypes[i];\n    }\n  }\n  return contentTypes[0];\n};\n\n/**\n * Checks whether the given parameter value represents file-like content.\n * @param param The parameter to check.\n * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n */\nexports.prototype.isFileParam = function(param) {\n  // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n  if (typeof require === 'function') {\n    var fs;\n    try {\n      fs = require('fs');\n    } catch (err) {}\n    if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n      return true;\n    }\n  }\n  // Buffer in Node.js\n  if (typeof Buffer === 'function' && param instanceof Buffer) {\n    return true;\n  }\n  // Blob in browser\n  if (typeof Blob === 'function' && param instanceof Blob) {\n    return true;\n  }\n  // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n  if (typeof File === 'function' && param instanceof File) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Normalizes parameter values:\n * <ul>\n * <li>remove nils</li>\n * <li>keep files and arrays</li>\n * <li>format to string with `paramToString` for other cases</li>\n * </ul>\n * @param {Object.<String, Object>} params The parameters as object properties.\n * @returns {Object.<String, Object>} normalized parameters.\n */\nexports.prototype.normalizeParams = function(params) {\n  var newParams = {};\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n      var value = params[key];\n      if (this.isFileParam(value) || Array.isArray(value)) {\n        newParams[key] = value;\n      } else {\n        newParams[key] = this.paramToString(value);\n      }\n    }\n  }\n  return newParams;\n};\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nexports.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n\n/**\n * Builds a string representation of an array-type actual parameter, according to the given collection format.\n * @param {Array} param An array parameter.\n * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n */\nexports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n  if (param == null) {\n    return null;\n  }\n  switch (collectionFormat) {\n    case 'csv':\n      return param.map(this.paramToString).join(',');\n    case 'ssv':\n      return param.map(this.paramToString).join(' ');\n    case 'tsv':\n      return param.map(this.paramToString).join('\\t');\n    case 'pipes':\n      return param.map(this.paramToString).join('|');\n    case 'multi':\n      // return the array directly as SuperAgent will handle it as expected\n      return param.map(this.paramToString);\n    default:\n      throw new Error('Unknown collection format: ' + collectionFormat);\n  }\n};\n\n/**\n * Deserializes an HTTP response body into a value of the specified type.\n * @param {Object} response A SuperAgent response object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns A value of the specified type.\n */\nexports.prototype.deserialize = function deserialize(response, returnType) {\n  if (response == null || returnType == null || response.status == 204) {\n    return null;\n  }\n  // Rely on SuperAgent for parsing response body.\n  // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n  var data = response.body;\n  if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n    // SuperAgent does not always produce a body; use the unparsed response as a fallback\n    data = response.text;\n  }\n  return exports.convertToType(data, returnType);\n};\n\n/**\n * Invokes the REST service using the supplied settings and parameters.\n * @param {String} path The base URL to invoke.\n * @param {String} httpMethod The HTTP method to use.\n * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n * @param {Object} bodyParam The value to pass as the request body.\n * @param {Array.<String>} authNames An array of authentication type names.\n * @param {Array.<String>} contentTypes An array of request MIME types.\n * @param {Array.<String>} accepts An array of acceptable response MIME types.\n * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n * constructor for a complex type.\n * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n */\nexports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n    queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n    returnType) {\n\n  var _this = this;\n  var url = this.buildUrl(path, pathParams);\n  var request = superagent(httpMethod, url);\n\n  // Basic Authentication\n  if (this.config.apiKey !== undefined && this.config.apiKey !== '') {\n    request.auth('user', this.config.apiKey);\n  }\n\n  // OAuth Authentication\n  else if (this.config.accessToken !== undefined && this.config.accessToken !== '') {\n    request.set({'Authorization': 'Bearer ' + this.config.accessToken});\n  }\n\n  // set query parameters\n  if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n    queryParams['_'] = new Date().getTime();\n  }\n  request.query(this.normalizeParams(queryParams));\n\n  // set header parameters\n  request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n  // set request timeout\n  request.timeout(this.timeout);\n\n  var contentType = this.jsonPreferredMime(contentTypes);\n  if (contentType) {\n    // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n    if(contentType != 'multipart/form-data') {\n      request.type(contentType);\n    }\n  } else if (!HeaderUtils.caseInsensitiveGet(request.header, 'content-type')) {\n    request.type('application/json');\n  }\n\n  if (contentType === 'application/x-www-form-urlencoded') {\n    request.send(querystring.stringify(this.normalizeParams(formParams)));\n  } else if (contentType == 'multipart/form-data') {\n    var _formParams = this.normalizeParams(formParams);\n    for (var key in _formParams) {\n      if (_formParams.hasOwnProperty(key)) {\n        if (this.isFileParam(_formParams[key])) {\n          // file field\n          request.attach(key, _formParams[key]);\n        } else {\n          request.field(key, _formParams[key]);\n        }\n      }\n    }\n  } else if (bodyParam) {\n    request.send(bodyParam);\n  }\n\n  var accept = this.jsonPreferredMime(accepts);\n  if (accept) {\n    request.accept(accept);\n  }\n\n  if (returnType === 'Blob') {\n    request.responseType('blob');\n  } else if (returnType === 'String') {\n    request.responseType('string');\n  }\n\n  // Attach previously saved cookies, if enabled\n  if (this.enableCookies){\n    if (typeof window === 'undefined') {\n      this.agent.attachCookies(request);\n    }\n    else {\n      request.withCredentials();\n    }\n  }\n\n  return new Promise(function(resolve, reject) {\n    request.end(function(error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        try {\n          var data = _this.deserialize(response, returnType);\n          if (_this.enableCookies && typeof window === 'undefined'){\n            _this.agent.saveCookies(response);\n          }\n          resolve({data: data, response: response});\n        } catch (err) {\n          reject(err);\n        }\n      }\n    });\n  });\n  };\n\n/**\n * Parses an ISO-8601 string representation of a date value.\n * @param {String} str The date value as a string.\n * @returns {Date} The parsed date object.\n */\nexports.parseDate = function(str) {\n  return new Date(str.replace(/T/i, ' '));\n};\n\n/**\n * Converts a value to the specified type.\n * @param {(String|Object)} data The data to convert, as a string or object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns An instance of the specified type or null or undefined if data is null or undefined.\n */\nexports.convertToType = function(data, type) {\n  if (data === null || data === undefined)\n    return data\n\n  switch (type) {\n    case 'Boolean':\n      return Boolean(data);\n    case 'Integer':\n      return parseInt(data, 10);\n    case 'Number':\n      return parseFloat(data);\n    case 'String':\n      return String(data);\n    case 'Date':\n      return this.parseDate(String(data));\n    case 'Blob':\n      return data;\n    default:\n      if (type === Object) {\n        // generic object, return directly\n        return data;\n      } else if (typeof type === 'function') {\n        // for model type like: User\n        return type.constructFromObject(data);\n      } else if (Array.isArray(type)) {\n        // for array type like: ['String']\n        var itemType = type[0];\n        return data.map(function(item) {\n          return exports.convertToType(item, itemType);\n        });\n      } else if (typeof type === 'object') {\n        // for plain object type like: {'String': 'Integer'}\n        var keyType, valueType;\n        for (var k in type) {\n          if (type.hasOwnProperty(k)) {\n            keyType = k;\n            valueType = type[k];\n            break;\n          }\n        }\n        var result = {};\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) {\n            var key = exports.convertToType(k, keyType);\n            var value = exports.convertToType(data[k], valueType);\n            result[key] = value;\n          }\n        }\n        return result;\n      } else {\n        // for unknown type, return the data directly\n        return data;\n      }\n  }\n};\n\n/**\n * Constructs a new map or array model from REST data.\n * @param data {Object|Array} The REST data.\n * @param obj {Object|Array} The target object or array.\n */\nexports.constructFromObject = function(data, obj, itemType) {\n  if (Array.isArray(data)) {\n    for (var i = 0; i < data.length; i++) {\n      if (data.hasOwnProperty(i))\n        obj[i] = exports.convertToType(data[i], itemType);\n    }\n  } else {\n    for (var k in data) {\n      if (data.hasOwnProperty(k))\n        obj[k] = exports.convertToType(data[k], itemType);\n    }\n  }\n};\n\n  /**\n * The default API client implementation.\n * @type {module:ApiClient}\n */\nexports.instance = new exports();\n\nmodule.exports = exports;\n", "var ApiClient = require('./ApiClient');\n\nmodule.exports = ApiClient.instance;\n", "// Netlify serverless function for Mailchimp subscription\n// This will handle real submissions to the Mailchimp API\n\nconst mailchimp = require('@mailchimp/mailchimp_marketing');\nconst crypto = require('crypto');\n\nexports.handler = async (event, context) => {\n  // DEBUG: Print all env vars\n  console.log('ALL ENV VARS:', Object.keys(process.env));\n  console.log('Mailchimp API Key exists:', !!process.env.MAILCHIMP_API_KEY);\n  console.log('Mailchimp List ID exists:', !!process.env.MAILCHIMP_LIST_ID);\n  console.log('Mailchimp Server Prefix exists:', !!process.env.MAILCHIMP_SERVER_PREFIX);\n  \n  // Set CORS headers for browser clients\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS'\n  };\n\n  // Handle preflight OPTIONS request\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers\n    };\n  }\n\n  // Only allow POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    console.log('Request body:', event.body);\n    \n    // Parse request body\n    const data = JSON.parse(event.body);\n    console.log('Parsed data:', data);\n    \n    // Extract fields from both direct properties and mergeFields\n    const email = data.email;\n    let name = data.name || (data.mergeFields && data.mergeFields.NAME);\n    let phone = data.phone || (data.mergeFields && data.mergeFields.PHONE);\n    let company = data.company || (data.mergeFields && data.mergeFields.COMPANY);\n    let message = data.message || (data.mergeFields && data.mergeFields.MESSAGE);\n    \n    console.log('Received form data:', { email, name, phone, company, hasMessage: !!message });\n\n    // Validate required fields\n    if (!email) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ \n          success: false, \n          error: 'Email is required' \n        })\n      };\n    }\n    \n    console.log('Email validation passed');\n\n    // Get environment variables or use hardcoded values for testing\n    // IMPORTANT: Replace these with environment variables in production\n    const apiKey = process.env.MAILCHIMP_API_KEY || '42709f9c4232a35cae6d405124b84886-us5';\n    const listId = process.env.MAILCHIMP_LIST_ID || '9e58ad0be4';\n    const serverPrefix = process.env.MAILCHIMP_SERVER_PREFIX || 'us5';\n\n    // Validate environment variables\n    console.log('Mailchimp env check:', {\n      hasApiKey: !!apiKey,\n      apiKeyMasked: apiKey ? apiKey.slice(0, 4) + '...' : undefined,\n      hasListId: !!listId,\n      listId,\n      hasServerPrefix: !!serverPrefix,\n      serverPrefix\n    });\n    if (!apiKey || !listId || !serverPrefix) {\n      console.error('Missing Mailchimp configuration:', { \n        hasApiKey: !!apiKey, \n        hasListId: !!listId, \n        hasServerPrefix: !!serverPrefix \n      });\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ \n          success: false, \n          error: 'Server configuration error',\n          detail: 'Mailchimp is not properly configured on the server. Please check your environment variables.'\n        })\n      };\n    }\n    console.log('Server configuration validated');\n\n    // Configure Mailchimp client\n    mailchimp.setConfig({\n      apiKey: apiKey,\n      server: serverPrefix\n    });\n    \n    // Create MD5 hash of lowercase email for Mailchimp API\n    const emailHash = crypto.createHash('md5').update(email.toLowerCase()).digest('hex');\n    \n    // Prepare merge fields with correct mapping\n    const mergeFields = {};\n    if (name) mergeFields.NAME = name;\n    if (phone) mergeFields.PHONE = phone;\n    if (company) mergeFields.COMPANY = company;\n    if (message) mergeFields.MESSAGE = message;\n\n    // Prepare subscriber data\n    const subscriberData = {\n      email_address: email,\n      status: 'subscribed', // Use 'pending' if double opt-in is enabled\n      merge_fields: mergeFields\n    };\n\n    console.log(`Submitting to Mailchimp: ${email}`);\n    console.log('Mailchimp List ID:', listId);\n    console.log('Subscriber data:', JSON.stringify(subscriberData));\n\n    try {\n      // Use the Mailchimp API client to add/update the member\n      const response = await mailchimp.lists.setListMember(\n        listId,\n        emailHash,\n        subscriberData\n      );\n      \n      console.log('Mailchimp API response:', response);\n      \n      // Handle successful response\n      console.log('Successfully subscribed to Mailchimp:', email);\n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify({\n          success: true,\n          status: \"Success\",\n          message: \"Successfully subscribed!\",\n          detail: `${email} has been added to the mailing list.`,\n          mailchimpResponse: response\n        })\n      };\n    } catch (err) {\n      console.error('Mailchimp API error:', err.status, err.response ? err.response.text : '', err.message);\n      \n      // Handle the \"already a member\" case specially\n      if (err.status === 400 && err.response && err.response.body) {\n        const errorBody = JSON.parse(err.response.text || '{}');\n        \n        if (errorBody.title === \"Member Exists\" || \n            (errorBody.detail && errorBody.detail.toLowerCase().includes(\"already a list member\"))) {\n          return {\n            statusCode: 200,\n            headers,\n            body: JSON.stringify({\n              success: true,\n              status: \"Member Exists\",\n              message: \"Already subscribed\",\n              detail: `${email} is already on the mailing list.`\n            })\n          };\n        }\n        \n        return {\n          statusCode: err.status,\n          headers,\n          body: JSON.stringify({\n            success: false,\n            error: errorBody.title || 'Subscription failed',\n            detail: errorBody.detail || 'Please check your details or try again later',\n            mailchimpResponse: errorBody\n          })\n        };\n      }\n      \n      return {\n        statusCode: err.status || 502,\n        headers,\n        body: JSON.stringify({\n          success: false,\n          error: 'Mailchimp API error',\n          detail: err.message || 'Unknown error',\n          mailchimpResponse: err.response ? err.response.text : null\n        })\n      };\n    }\n  } catch (error) {\n    console.error('Server error:', error.message, error.stack);\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        success: false,\n        error: 'Internal server error',\n        detail: error.message\n      })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "exports", "module", "exports", "module", "_typeof", "obj", "exports", "module", "exports", "module", "exports", "module", "useColors", "exports", "module", "exports", "module", "crypto", "File", "exports", "Buffer", "buffer", "clear", "exports", "exports", "exports", "Buffer", "exports", "crypto", "File", "m", "exports", "module", "exports", "module", "exports", "module", "stream", "exports", "module", "exports", "module", "exports", "charset", "extension", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "isNaN", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "concatty", "slicy", "Empty", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "undefined", "doEval", "stringToPath", "getBaseIntrinsic", "require_shams", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Buffer", "exports", "module", "Buffer", "exports", "str", "exports", "module", "exports", "module", "exports", "module", "exports", "exports", "module", "isArray", "isPlainObject", "setProperty", "getProperty", "exports", "module", "exports", "module", "path", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_utils", "exports", "module", "compactQueue", "arrayToObject", "merge", "encode", "compact", "isRegExp", "isBuffer", "combine", "maybeMap", "exports", "module", "isNonNullishPrimitive", "stringify", "value", "normalizeStringifyOptions", "exports", "module", "normalizeParseOptions", "require_lib", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "value", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "require_node", "exports", "module", "mime", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_src", "exports", "module"]
}
